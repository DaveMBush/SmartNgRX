import{a as g}from"./chunk-3VZM5QD4.js";import{a as p}from"./chunk-FVRGWNNR.js";import"./chunk-VM5ESKQM.js";import{a as i}from"./chunk-C6HCTMWR.js";import{L as d,Qa as c,Ra as h,Rb as k,ia as r,va as l}from"./chunk-O5TFSMGJ.js";import{a as n,b as o,g as y}from"./chunk-JPKLQMV2.js";var b=y(k());var D={title:"Database Structure",mdFile:"./index.md",order:2,category:g},t=D;var m=[];var P={},u=P;var w=`<h1 id="database-structure" class="ngde">Database Structure<a title="Link to heading" class="ng-doc-header-link ngde" href="/demo-walkthrough/database-structure#database-structure"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde">The backend database uses SqlLite3, a lightweight database that is easy to use and set up. The database is stored in a file called <code class="ngde">database.d</code> in the root of the project and is created and populated with data when you pnpm the project for the first time.</p><p class="ngde">We use Prisma to interact with the database, including creating tables, inserting data, and querying data. Prisma is a modern database toolkit that makes it easy to interact with databases in a type-safe way. It is used to generate the database schema and typescript types from the database schema.</p><p class="ngde">The database schema and subsequent changes are managed using Prisma Migrate. Prisma Migrate is a database schema migration tool that allows you to make changes to the database schema and apply those changes to the database.</p><p class="ngde">You can find the Prisma schema in the <a href="https://github.com/DaveMBush/SmartNgRX/blob/main/prisma/schema.prisma" class="ngde">prisma/schema.prisma</a>\` file. This file defines the database schema and is used by Prisma to generate the database schema and typescript types.</p><h2 id="tables" class="ngde">Tables<a title="Link to heading" class="ng-doc-header-link ngde" href="/demo-walkthrough/database-structure#tables"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">Currently all of our tables are structured the same with the expection of a field that points to the parent table's id. This is used to create a tree structure in the database.</p><p class="ngde">The fields all tables have are:</p><ul class="ngde"><li class="ngde">id: a unique identifier for the record as a guid.</li><li class="ngde">name: the name of the record.</li><li class="ngde">version: the version of the record as an integer that increments every time something gets updated.</li><li class="ngde">created: the timestamp for when the record was created, we use this to order the records in the UI.</li></ul><p class="ngde">The database has the following tables:</p><ul class="ngde"><li class="ngde">locations: this is the top level table.</li><li class="ngde">departments: this table as a locationId field that points back to the locations table.</li><li class="ngde">docs: this table has a departmentId field that points back to the departments table.</li><li class="ngde">folders: this table has a departmentId field that points back to the departments table.</li><li class="ngde">lists: this table has a departmentId field that points back to the departments table.</li><li class="ngde">sprintFolders: this table has a departmentId field that points back to the departments table.</li></ul><p class="ngde">You'll notice that the docs, folders, lists, and sprintFolders tables all have a departmentId field that points back to the departments table. This allows these to all be children of the departments table.</p>`,v=(()=>{let e=class e extends i{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=w,this.page=t,this.demoAssets=u}};e.\u0275fac=function(s){return new(s||e)},e.\u0275cmp=d({type:e,selectors:[["ng-doc-page-demo-walkthrough-database-structure"]],standalone:!0,features:[c([{provide:i,useExisting:e},m,t.providers??[]]),r,h],decls:1,vars:0,template:function(s,T){s&1&&l(0,"ng-doc-page")},dependencies:[p],encapsulation:2,changeDetection:0});let a=e;return a})(),x=[o(n({},(0,b.isRoute)(t.route)?t.route:{}),{path:"",component:v,title:"Database Structure"})],E=x;export{v as DynamicComponent,E as default};
