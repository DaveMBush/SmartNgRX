import{a as o}from"./chunk-CDUCBZGU.js";import"./chunk-ELQQ62YC.js";import{a as n}from"./chunk-HBTGZLOF.js";import{L as a,Qa as l,Ra as c,ia as d,va as i}from"./chunk-H5ZZRFLE.js";import"./chunk-JPKLQMV2.js";var g=`<header class="ngde"><div class="ng-doc-page-tags ngde"><span class="ng-doc-tag ngde" indexable="false" data-content="ng-doc-scope">smart-ngrx</span> <span class="ng-doc-inline-delimiter ngde" indexable="false">/</span> <span class="ng-doc-tag ngde" indexable="false" data-content="Interface">Interface</span></div><h1 id="smartentitydefinition" class="ngde">SmartEntityDefinition<a title="Link to heading" class="ng-doc-header-link ngde" href="/api/smart-ngrx/interfaces/SmartEntityDefinition#smartentitydefinition"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1></header><section class="ngde"><p class="ngde">This is the interface that is used to define the entity for the provideSmartFeatureEntities provider function</p></section><section class="ngde"><h2 id="properties" class="ngde">Properties<a title="Link to heading" class="ng-doc-header-link ngde" href="/api/smart-ngrx/interfaces/SmartEntityDefinition#properties"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><div class="ng-doc-table-wrapper ngde"><table class="ng-doc-properties-table ngde"><thead class="ngde"><tr indexable="false" class="ngde"><th class="ng-doc-properties-table-name ngde">Name</th><th class="ng-doc-properties-table-type ngde">Type</th><th class="ng-doc-properties-table-description ngde">Description</th></tr></thead><tbody class="ngde"><tr data-slug="effectServiceToken" data-slugtype="member" id="effectServiceToken" class="ngde"><td indexable="false" class="ngde">effectServiceToken<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">EffectServiceToken&#x3C;Row></code></td><td class="ngde"><p class="ngde">This is the service token related to the service the effect for this entity should call to do CRUD operations against the backend.</p></td></tr><tr data-slug="entityAdapter" data-slugtype="member" id="entityAdapter" class="ngde"><td indexable="false" class="ngde">entityAdapter<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">EntityAdapter&#x3C;SmartNgRXRowBase> | undefined</code></td><td class="ngde"><p class="ngde">Supply your own entityAdapter if you are not using ID as the primary key.</p></td></tr><tr data-slug="entityName" data-slugtype="member" id="entityName" class="ngde"><td indexable="false" class="ngde">entityName<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">string</code></td><td class="ngde"><p class="ngde">The entity name that you'd usually use in the reducer object you'd use in StoreModule.forFeature(featureName, reducer) OR the name you'd use in provideState(featureName, reducer)</p><p class="ngde">We also use this name along with the feature as the Source field in actions but this should not matter to you because you'll either be using actions we've created or using your own actions for your specific purposes.</p></td></tr><tr data-slug="isInitialRow" data-slugtype="member" id="isInitialRow" class="ngde"><td indexable="false" class="ngde">isInitialRow<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">boolean | undefined</code></td><td class="ngde"><p class="ngde">If this is true, the assumption is that this is the top level row that has an ID and child fields that hold the IDs of the children. There can be multiple top level rows and each should have at least one child field for it to be useful.</p><p class="ngde">When this is true, the loadById action will be fired with one element of value '1' the effectService will be called with this array where you can make a call to the backend to get the IDs for the child fields.</p></td></tr><tr data-slug="markAndDelete" data-slugtype="member" id="markAndDelete" class="ngde"><td indexable="false" class="ngde">markAndDelete<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">Partial&#x3C;MarkAndDeleteInit> | undefined</code></td><td class="ngde"><p class="ngde">The <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/smart-ngrx/interfaces/MarkAndDeleteInit" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">MarkAndDeleteInit</a></code> for this entity. This is optional and if not provided it will use the global <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/smart-ngrx/interfaces/MarkAndDeleteInit" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">MarkAndDeleteInit</a></code> that is registered with the as part of \`provideSmartNgRX()</p></td></tr></tbody></table></div></section><section class="ngde"><h2 id="methods" class="ngde">Methods<a title="Link to heading" class="ng-doc-header-link ngde" href="/api/smart-ngrx/interfaces/SmartEntityDefinition#methods"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><div class="ng-doc-table-wrapper ngde"><table class="ng-doc-method-table ngde"><thead class="ngde"><tr class="ngde"><th indexable="false" class="ngde"><h3 data-slugtype="member" id="defaultrow" class="ngde">defaultRow()<a title="Link to heading" class="ng-doc-header-link ngde" href="/api/smart-ngrx/interfaces/SmartEntityDefinition#defaultrow"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h3><div class="ng-doc-node-details ngde"></div></th></tr></thead><tbody class="ngde"><tr class="ngde"><td class="ngde"><p class="ngde">The static function that returns a default row for the entity when it does not yet exist in the store.</p></td></tr><tr class="ngde"><td class="ngde"><h5 class="no-anchor ngde" indexable="false">Presentation</h5><pre class="ngde hljs"><code lang="typescript" class="hljs language-typescript code-lines ngde"><span class="line ngde"><span class="hljs-title function_ ngde">defaultRow</span>(<span class="hljs-attr ngde">this</span>: <span class="hljs-built_in ngde">void</span>, <span class="hljs-attr ngde">id</span>: <span class="hljs-built_in ngde">string</span>): <span class="hljs-title class_ ngde">Row</span>;
</span></code></pre></td></tr><tr class="ngde"><td class="ngde"><h5 class="no-anchor ngde" indexable="false">Parameters</h5><div class="ng-doc-table-wrapper ngde"><table class="ng-doc-parameters-table ngde"><thead class="ngde"><tr indexable="false" class="ngde"><th class="ng-doc-parameters-table-name ngde">Name</th><th class="ng-doc-parameters-table-type ngde">Type</th><th class="ng-doc-parameters-table-description ngde">Description</th></tr></thead><tbody class="ngde"><tr class="ngde"><td indexable="false" class="ngde">this<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">void</code></td><td class="ngde"></td></tr><tr class="ngde"><td indexable="false" class="ngde">id<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">string</code></td><td class="ngde"><p class="ngde">The unique identifier for the row. You should use this to set the id of the id row in the default row.</p></td></tr></tbody></table></div><h5 class="no-anchor ngde" indexable="false">Returns</h5><p class="ngde"><code indexable="false" class="ngde">Row</code></p></td></tr></tbody></table></div></section>`,h=(()=>{let e=class e extends n{constructor(){super(),this.routePrefix=void 0,this.pageType="api",this.pageContent=g,this.demo=void 0,this.demoAssets=void 0}};e.\u0275fac=function(s){return new(s||e)},e.\u0275cmp=a({type:e,selectors:[["ng-doc-page-api-smart-ngrx-interfaces-smart-entity-definition"]],standalone:!0,features:[l([{provide:n,useExisting:e}]),d,c],decls:1,vars:0,template:function(s,f){s&1&&i(0,"ng-doc-page")},dependencies:[o],encapsulation:2,changeDetection:0});let t=e;return t})(),p=[{path:"",component:h,title:"SmartEntityDefinition"}],b=p;export{h as DynamicComponent,b as default};
