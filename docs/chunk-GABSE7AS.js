import{a as h}from"./chunk-U6LPWHCR.js";import{a as g}from"./chunk-J5WSNC3N.js";import"./chunk-T2TPJYPD.js";import"./chunk-GSP52HBJ.js";import{a}from"./chunk-D5VJN27U.js";import{X as w}from"./chunk-WOBS4B3T.js";import"./chunk-XH3XHKSK.js";import{Ba as c,Fa as i,Wa as l,sb as d}from"./chunk-AVEIMZJF.js";import{a as n,b as r,h as S}from"./chunk-TWZW5B45.js";var u=S(w());var D={title:"Smart Signals (Selectors)",mdFile:"./index.md",order:6,category:h},e=D;var p=[];var y={},m=y;var v=`<h1 id="smart-signals-selectors" href="signals-demo-walkthrough/smart-signals" headinglink="true" class="ngde">Smart Signals (Selectors)<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="smart-signals-selectors"></ng-doc-heading-anchor></h1><p class="ngde">From a SignalStore perspective, once you've configured your global provider and your feature providers, and created the Effects Services to retrieve your data, the only Signal thing you'll need to concern yourself with are the selectors. In the case of SmartSignals, these are actually computed signals created by Smart Signals. And, even these aren't quite what you are used to because we've abstracted them as well. You'll still need to use standard Signals, using NgRX Signals or Angular Signals, for other state management tasks, such as storing form data like we do in the demo application to store the currently selected location.</p><p class="ngde">We won't go into much detail here because this is standard Signals code. But you can see the code for getting the current location in <a href="https://github.com/DaveMBush/SmartNgRX/blob/main/apps/demo-ngrx-signals/src/app/routes/tree-standard/store/current-location" class="ngde">current-location</a> folder.</p><p class="ngde">Since all of our selectors look the same except for the feature store they are getting the data from, we'll focus our time on the selectors for the <a href="https://github.com/DaveMBush/SmartNgRX/blob/main/apps/demo-ngrx-signals/src/app/routes/tree-standard" class="ngde">Tree (Standard)</a> page.</p><h2 id="top-selectors" href="signals-demo-walkthrough/smart-signals" headinglink="true" class="ngde">Top Selectors<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="top-selectors"></ng-doc-heading-anchor></h2><p class="ngde">The main selector in our top selector is <a href="https://github.com/DaveMBush/SmartNgRX/blob/main/apps/demo-ngrx-signals/src/app/routes/tree-standard/store/top/select-top-locations.selectors.ts" class="ngde">selectTopLocations</a> you'll see that it uses <code class="ngde">selectTopEntities</code> as the first parameter which is used to retrieve the top entity slice from the feature. The second parameter is the array of <code class="ngde">ChildDefinition</code>s which has just one item because the list of IDs we will use to retrieve the locations is the<code class="ngde">locations</code> field.</p><p class="ngde">Two things you'll want to pay special attention to. We are passing in pointers to the signals, not the signals. The signals get executed inside <code class="ngde ng-doc-code-with-link"><a href="smart-signals-api/functions/smart-signals-api/createSmartSignal" class="ng-doc-code-anchor ngde">createSmartSignal</a>()</code>. Also, you'll want to pass in the child signal that was created using another smart signal that resolves its children if there are any.</p><p class="ngde">In this case, passing the childSelector <code class="ngde">selectLocations</code> would not work, we want to pass in <code class="ngde">selectLocationsDepartments</code> instead.</p><h2 id="current-location-signal" href="signals-demo-walkthrough/smart-signals" headinglink="true" class="ngde">Current Location Signal<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="current-location-signal"></ng-doc-heading-anchor></h2><p class="ngde">The <a href="https://github.com/DaveMBush/SmartNgRX/blob/main/apps/demo-ngrx-signals/src/app/routes/tree-standard/store/current-location/select-current-location.signal.ts" class="ngde">selectCurrentLocationSignal</a> simply pulls out the currently selected location ID from the state.</p><h2 id="location-selectors" href="signals-demo-walkthrough/smart-signals" headinglink="true" class="ngde">Location Selectors<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="location-selectors"></ng-doc-heading-anchor></h2><p class="ngde">The <a href="https://github.com/DaveMBush/SmartNgRX/tree/main/apps/demo-ngrx-signals/src/app/routes/tree-standard/store/locations/selectors" class="ngde">Location Selectors</a> holds selectors that will give us access to the locations.</p><p class="ngde">Once again, we see our <code class="ngde ng-doc-code-with-link"><a href="smart-signals-api/functions/smart-signals-api/createSmartSignal" class="ng-doc-code-anchor ngde">createSmartSignal</a>()</code> being used to retrieve the locations and the children of the locations. In this case, the departments. It takes our <code class="ngde">selectLocationEntities</code> as the first parameter and the array of <code class="ngde">ChildDefinition</code>s as the second parameter.</p><h2 id="department-selectors" href="signals-demo-walkthrough/smart-signals" headinglink="true" class="ngde">Department Selectors<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="department-selectors"></ng-doc-heading-anchor></h2><p class="ngde">And so we continue down the stack and everything starts to look the same. The <a href="https://github.com/DaveMBush/SmartNgRX/tree/main/apps/demo-ngrx-signals/src/app/routes/tree-standard/store/department" class="ngde">Department Selectors</a> folder has the <code class="ngde">selectDepartments()</code> selector that is used to retrieve the department entities and the <code class="ngde">selectDepartmentsChildren()</code> selector that is used to define how to access the department children.</p><h2 id="department-children-selectors" href="signals-demo-walkthrough/smart-signals" headinglink="true" class="ngde">Department Children Selectors<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="department-children-selectors"></ng-doc-heading-anchor></h2><p class="ngde">And finally we come to the bottom of the tree where the only thing left to do is to select the <a href="https://github.com/DaveMBush/SmartNgRX/tree/main/apps/demo-ngrx-signals/src/app/routes/tree-standard/store/department-children" class="ngde">department children</a>.</p><h2 id="conclusion" href="signals-demo-walkthrough/smart-signals" headinglink="true" class="ngde">Conclusion<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="conclusion"></ng-doc-heading-anchor></h2><p class="ngde">Notice how coming from the top, we combine selectors until we've retrieved all the data we need to create the tree. Next, we'll show how we only retrieve the data we need as it is needed. This is one of the main features of SmartSignals. We don't retrieve everything all at once.</p>`,o=class t extends a{constructor(){super();this.pageType="guide";this.pageContent=v;this.editSourceFileUrl="https://github.com/DaveMBush/SmartNgRX/edit/main/apps/documentation/src/app/signals-demo-walkthrough/smart-signals/index.md?message=docs(): describe your changes here...";this.viewSourceFileUrl="https://github.com/DaveMBush/SmartNgRX/blob/release/apps/documentation/src/app/signals-demo-walkthrough/smart-signals/index.md";this.page=e;this.demoAssets=m}static{this.\u0275fac=function(s){return new(s||t)}}static{this.\u0275cmp=c({type:t,selectors:[["ng-doc-page-t2frvp65"]],features:[d([{provide:a,useExisting:t},p,e.providers??[]]),i],decls:1,vars:0,template:function(s,k){s&1&&l(0,"ng-doc-page")},dependencies:[g],encapsulation:2,changeDetection:0})}},N=[r(n({},(0,u.isRoute)(e.route)?e.route:{}),{path:"",component:o,title:"Smart Signals (Selectors)"})],U=N;export{o as PageComponent,U as default};
