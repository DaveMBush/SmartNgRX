import{a as h}from"./chunk-NCOWMHCX.js";import{a as l}from"./chunk-AV2SJNYW.js";import"./chunk-UCBLRR2Z.js";import{a}from"./chunk-NSJQV5PD.js";import{Ba as c,Ca as g,Hb as N,K as r,da as p,na as d}from"./chunk-3TT6RIHA.js";import{a as i,b as o,f as R}from"./chunk-RS6LHQUM.js";var f=R(N());var x={title:"Registration",mdFile:"./index.md",order:5,category:h},t=x;var m=[];var w={},u=w;var D=`<h1 id="registration" class="ngde">Registration<a title="Link to heading" class="ng-doc-header-link ngde" href="/using-smart-ng-rx/registration#registration"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde">Now that we have all the pieces in place, we can register our definitions with Smart NgRX so that they can be used by the library.</p><p class="ngde">We register our definitions by feature. By making even your common NgRX entities feature specific, all your NgRX code looks the same and is easy to move to another feature as needed.</p><p class="ngde">The following is how we would register our User entity with Smart NgRX:</p><pre class="ngde hljs"><code class="hljs language-typescript code-lines ngde" lang="typescript" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-meta ngde">@NgModule</span>({
</span><span class="line ngde">  <span class="hljs-comment ngde">// ...</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">providers</span>: [<span class="hljs-title function_ ngde"><a href="/api/smart-ngrx/functions/provideSmartFeatureEntities" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provideSmartFeatureEntities</a></span>(<span class="hljs-string ngde">'shared'</span>, [usersDefinition])],
</span><span class="line ngde">  <span class="hljs-comment ngde">// ...</span>
</span><span class="line ngde">})
</span><span class="line ngde"><span class="hljs-keyword ngde">export</span> <span class="hljs-keyword ngde">class</span> <span class="hljs-title class_ ngde">SharedModule</span> {}
</span></code></pre><p class="ngde">If there are other entities you want to register with this feature, you would add them to the array of entity definitions.</p>`,v=(()=>{let e=class e extends a{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=D,this.page=t,this.demoAssets=u}};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=r({type:e,selectors:[["ng-doc-page-using-smart-ng-rx-registration"]],standalone:!0,features:[c([{provide:a,useExisting:e},m,t.providers??[]]),p,g],decls:1,vars:0,template:function(n,S){n&1&&d(0,"ng-doc-page")},dependencies:[l],encapsulation:2,changeDetection:0});let s=e;return s})(),P=[o(i({},(0,f.isRoute)(t.route)?t.route:{}),{path:"",component:v,title:"Registration"})],T=P;export{v as DynamicComponent,T as default};
