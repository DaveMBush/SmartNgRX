[{"breadcrumbs":["Internal API","Internal API","isProxy"],"pageType":"api","title":"isProxy","section":"","route":"internal-api/variables/internal-api/isProxy","content":"A constant we use to determine if an object is an ArrayProxy"},{"breadcrumbs":["Internal API","Internal API","psi"],"pageType":"api","title":"psi","section":"","route":"internal-api/variables/internal-api/psi","content":"A constant we use as a separator when we use feature + entity names as a key into a map."},{"breadcrumbs":["Internal API","Internal API","markAndDeleteEffect"],"pageType":"api","title":"markAndDeleteEffect","section":"","route":"internal-api/variables/internal-api/markAndDeleteEffect","content":"This effect is used to mark and delete the records that need to be refreshed or deleted."},{"breadcrumbs":["Internal API","Internal API","ParentSelector"],"pageType":"api","title":"ParentSelector","section":"","route":"internal-api/type-aliases/internal-api/ParentSelector","content":"Shorthand for the type of the parentSelector."},{"breadcrumbs":["Internal API","Internal API","storeEffect"],"pageType":"api","title":"storeEffect","section":"","route":"internal-api/variables/internal-api/storeEffect","content":"This is the Effect that is used to provide a store that is globally accessible to the application."},{"breadcrumbs":["Internal API","Internal API","EffectServiceToken"],"pageType":"api","title":"EffectServiceToken","section":"","route":"internal-api/type-aliases/internal-api/EffectServiceToken","content":"Shorthand type for the token used to inject the effect service"},{"breadcrumbs":["Internal API","Internal API","IdsProp"],"pageType":"api","title":"IdsProp","section":"","route":"internal-api/interfaces/internal-api/IdsProp","content":"Interface for Actions that take an array of ids"},{"breadcrumbs":["Internal API","Internal API","IdProp"],"pageType":"api","title":"IdProp","section":"","route":"internal-api/interfaces/internal-api/IdProp","content":"Interface for Actions that take an id property"},{"breadcrumbs":["Internal API","Internal API","IndexProp"],"pageType":"api","title":"IndexProp","section":"","route":"internal-api/interfaces/internal-api/IndexProp","content":"Interface for Actions that take an array of indexes"},{"breadcrumbs":["Internal API","Internal API","IndexesProp"],"pageType":"api","title":"IndexesProp","section":"","route":"internal-api/interfaces/internal-api/IndexesProp","content":"Interface for Actions that take an array of indexes"},{"breadcrumbs":["Internal API","Internal API","RowProp"],"pageType":"api","title":"RowProp","section":"","route":"internal-api/interfaces/internal-api/RowProp","content":"Interface for Actions that take a row property"},{"breadcrumbs":["Internal API","Internal API","RowsProp"],"pageType":"api","title":"RowsProp","section":"","route":"internal-api/interfaces/internal-api/RowsProp","content":"Interface for Actions that take an array of rows"},{"breadcrumbs":["Internal API","Internal API","SmartNgRXRowBaseSelector"],"pageType":"api","title":"SmartNgRXRowBaseSelector","section":"","route":"internal-api/type-aliases/internal-api/SmartNgRXRowBaseSelector","content":"This type allows us to deal with just the SmartNgRXRowBase part of an entity. This is used internally."},{"breadcrumbs":["Internal API","Internal API","SmartValidatedEntityDefinition"],"pageType":"api","title":"SmartValidatedEntityDefinition","section":"","route":"internal-api/type-aliases/internal-api/SmartValidatedEntityDefinition","content":"We need a type that makes the entityAdapter field in SmartEntityDefinition not optional once it has been provided by the code. This is that type."},{"breadcrumbs":["Internal API","Internal API","UpdateChanges"],"pageType":"api","title":"UpdateChanges","section":"","route":"internal-api/interfaces/internal-api/UpdateChanges","content":"Interface that defines the changes that need to be made to the store when updating an entity"},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Entity Mark and Delete"],"pageType":"guide","title":"Entity Mark and Delete","section":"Entity Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/entity-mark-and-delete","fragment":"entity-mark-and-delete","content":"For many cases, the global Mark and Delete configuration will be sufficient. But there are times when you need to override the global configuration for a specific entity. For example, you may want to use the general markDirtyTime but for some entities you want to load them and keep them in memory. Lookup tables are a place where you might consider this."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Entity Mark and Delete"],"pageType":"guide","title":"Entity Mark and Delete","section":"Entity Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/entity-mark-and-delete","fragment":"entity-mark-and-delete","content":"To override the global configuration, you can pass in a MarkAndDeleteInit object as part of the provideSmartFeatureEntities call when you register an entity. This will override the global configuration for the entity."},{"breadcrumbs":["Public API","Public API","RowProxyDelete"],"pageType":"api","title":"RowProxyDelete","section":"","route":"public-api/interfaces/public-api/RowProxyDelete","content":"Provides an interface we can use to access the delete method on a row once it has been wrapped with a RowProxy"},{"breadcrumbs":["Public API","Public API","RowProxyDelete"],"pageType":"api","title":"RowProxyDelete","section":"Methods","route":"public-api/interfaces/public-api/RowProxyDelete","fragment":"methods","content":"This deletes the row from the store and the server"},{"breadcrumbs":["Public API","Public API","clearState"],"pageType":"api","title":"clearState","section":"","route":"public-api/functions/public-api/clearState","content":"Used to clear the state of the store during testing"},{"breadcrumbs":["Public API","Public API","createStore"],"pageType":"api","title":"createStore","section":"","route":"public-api/functions/public-api/createStore","content":"Used during unit testing, this creates an empty store and puts it in the store() function so our code can get at it later."},{"breadcrumbs":["Internal API","Internal API","RowProxyDelete"],"pageType":"api","title":"RowProxyDelete","section":"","route":"internal-api/interfaces/internal-api/RowProxyDelete","content":"Provides an interface we can use to access the delete method on a row once it has been wrapped with a RowProxy"},{"breadcrumbs":["Internal API","Internal API","RowProxyDelete"],"pageType":"api","title":"RowProxyDelete","section":"Methods","route":"internal-api/interfaces/internal-api/RowProxyDelete","fragment":"methods","content":"This deletes the row from the store and the server"},{"breadcrumbs":["Internal API","Internal API","clearState"],"pageType":"api","title":"clearState","section":"","route":"internal-api/functions/internal-api/clearState","content":"Used to clear the state of the store during testing"},{"breadcrumbs":["Internal API","Internal API","createStore"],"pageType":"api","title":"createStore","section":"","route":"internal-api/functions/internal-api/createStore","content":"Used during unit testing, this creates an empty store and puts it in the store() function so our code can get at it later."},{"breadcrumbs":["Using Smart NgRX","Effects Service"],"pageType":"guide","title":"Effects Service","section":"Effects Service","route":"using-smart-ng-rx/effects-service","fragment":"effects-service","content":"The Effects Service is the service that an effect calls to perform CRUD operations against the server. You can put any code you want in this service, as long as it supports the interface and achieves the stated purpose. This allows you to retrieve data from the server in whatever way you need."},{"breadcrumbs":["Using Smart NgRX","Effects Service"],"pageType":"guide","title":"Effects Service","section":"Effects Service","route":"using-smart-ng-rx/effects-service","fragment":"effects-service","content":"To create an effect service, you'll need to inherit from the EffectService abstract class and implement the abstract methods. The EffectService abstract class is a generic class that takes the type of the entity as the generic type. This allows us to ensure that the methods you implement are returning the correct type."},{"breadcrumbs":["Using Smart NgRX","Effects Service"],"pageType":"guide","title":"Effects Service","section":"Effects Service","route":"using-smart-ng-rx/effects-service","fragment":"effects-service","content":"Because this will be used by an effect, and the effect needs some way of knowing what service to call, we need to have some way of passing the service down into the effect. The best way to do this is by passing in an InjectionToken"},{"breadcrumbs":["Demo Walkthrough","Deleting Rows"],"pageType":"guide","title":"Deleting Rows","section":"Deleting Rows","route":"demo-walkthrough/deleting-rows","fragment":"deleting-rows","content":"Last, of course, is the ability to delete rows. Delete is implemented for Departments and DepartmentChildren and is triggered by the \"Delete\" button in the tree.component.html template. This calls the deleteNode method in the tree.component.ts which calls down into the deleteNode() method of the TreeComponentService which calls the delete() method on the node."},{"breadcrumbs":["Demo Walkthrough","Deleting Rows"],"pageType":"guide","title":"Deleting Rows","section":"Deleting Rows","route":"demo-walkthrough/deleting-rows","fragment":"deleting-rows","content":"That's all you have to do to delete a node. All the real work is handled by SmartNgRX and your EffectService."},{"breadcrumbs":["Demo Walkthrough","Deleting Rows"],"pageType":"guide","title":"Deleting Rows","section":"Deleting Rows","route":"demo-walkthrough/deleting-rows","fragment":"deleting-rows","content":"In order to access the delete() method of the RowProxy we declare the row as implementing the RowProxyDelete interface in our CommonSourceNode interface. If you use SmartNgRX, the row you are working with implements the RowProxyDelete interface."},{"breadcrumbs":["Using Smart NgRX","Injection Token"],"pageType":"guide","title":"Injection Token","section":"Injection Token","route":"using-smart-ng-rx/injection-token","fragment":"injection-token","content":"For each service, you'll need to create an Injection Token."},{"breadcrumbs":["Using Smart NgRX","Injection Token"],"pageType":"guide","title":"Injection Token","section":"Injection Token","route":"using-smart-ng-rx/injection-token","fragment":"injection-token","content":"Continuing with the example of a UserEffectsService, we'll create an Injection Token for it."},{"breadcrumbs":["Using Smart NgRX","Injection Token"],"pageType":"guide","title":"Injection Token","section":"Injection Token","route":"using-smart-ng-rx/injection-token","fragment":"injection-token","content":"Which we can use to register the service in our module:"},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Global Mark and Delete"],"pageType":"guide","title":"Global Mark and Delete","section":"Global Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/global-mark-and-delete","fragment":"global-mark-and-delete","content":"The MarkAndDeleteInit property can be set as part of global registration using the provideSmartNgRX call."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Global Mark and Delete"],"pageType":"guide","title":"Global Mark and Delete","section":"Global Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/global-mark-and-delete","fragment":"global-mark-and-delete","content":"If you don't pass anything in, the default values will be used. But each of the properties can be set to override the defaults."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Global Mark and Delete"],"pageType":"guide","title":"Global Mark and Delete","section":"Global Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/global-mark-and-delete","fragment":"global-mark-and-delete","content":"Keep in mind the rules. For example, if you don't specify a value for markDirtyTime, but you specify a value for removeTime that is less than 15 minutes, the removeTime will be set to 30 minutes."},{"breadcrumbs":["Internal API","Internal API","markAndDeleteEntity"],"pageType":"api","title":"markAndDeleteEntity","section":"","route":"internal-api/functions/internal-api/markAndDeleteEntity","content":"used by mark-and-delete.effect.ts to mark a row dirty"},{"breadcrumbs":["Using Smart NgRX","ChildDefinition"],"pageType":"guide","title":"ChildDefinition","section":"ChildDefinition","route":"using-smart-ng-rx/child-definition","fragment":"childdefinition","content":"Now that we've setup our state management, the last step is being able to get the data out of the store and into our components where we can see them. This is where Smart Selectors come in."},{"breadcrumbs":["Using Smart NgRX","ChildDefinition"],"pageType":"guide","title":"ChildDefinition","section":"ChildDefinition","route":"using-smart-ng-rx/child-definition","fragment":"childdefinition","content":"But before we can create a selector, we need to understand the ChildDefinition interface. It has the following components, as outlined in the API documentation:"},{"breadcrumbs":["Using Smart NgRX","ChildDefinition"],"pageType":"guide","title":"ChildDefinition","section":"ChildDefinition","route":"using-smart-ng-rx/child-definition","fragment":"childdefinition","content":"childFeature - The name of the feature the child entity was registered with. We need to supply this and the childFieldName so that the code can lookup information about the entity we've already supplied from provideSmartFeatureEntities.childEntity - The name of the child entity.childSelector - the selector we use to retrieve the information for the child. The childSelector is an EntityState selector. This allows us to lookup an ID in the entity quickly.parentField - the name of the field in the parent entity that contains the IDs of the children.parentFeature - the feature the parent entity was registered with.parentEntity - the name of the parent entity."},{"breadcrumbs":["Using Smart NgRX","ChildDefinition"],"pageType":"guide","title":"ChildDefinition","section":"ChildDefinition","route":"using-smart-ng-rx/child-definition","fragment":"childdefinition","content":"We need the parentFeature and parentEntity so we can lookup the parent entity in the store when we need to add or delete an item. Since our parent item has the collection of IDs for the children, when we add or delete a child, we will need to add or remove the ID from the parent's collection of children."},{"breadcrumbs":["Using Smart NgRX","Smart Selector"],"pageType":"guide","title":"Smart Selector","section":"Smart Selector","route":"using-smart-ng-rx/smart-selector","fragment":"smart-selector","content":"And now, we can use the ChildDefinition interface to create a selector that will retrieve the child entity from the parent entity. We can use this selector in our components to retrieve the child entity from the store."},{"breadcrumbs":["Using Smart NgRX","Smart Selector"],"pageType":"guide","title":"Smart Selector","section":"Smart Selector","route":"using-smart-ng-rx/smart-selector","fragment":"smart-selector","content":"Note that the createSmartSelector function takes an array of ChildDefinition objects. This allows us to create a selector that will retrieve multiple child entities from the parent entity. That is, one row may point to multiple children. By passing the array you can account for each of them with one call."},{"breadcrumbs":["Using Smart NgRX","Smart Selector"],"pageType":"guide","title":"Smart Selector","section":"Smart Selector","route":"using-smart-ng-rx/smart-selector","fragment":"smart-selector","content":"In the case where your User row might have some child field named, roles your createSmartSelector call might look like this:"},{"breadcrumbs":["Using Smart NgRX","Smart Selector"],"pageType":"guide","title":"Smart Selector","section":"Smart Selector","route":"using-smart-ng-rx/smart-selector","fragment":"smart-selector","content":"The first parameter to createSmartSelector expects a selector that returns the parent entity. If you want to use some other selector, you'll need to convert it to a selector that returns an Entity first. See Using With Existing Selectors for more information."},{"breadcrumbs":["Demo Walkthrough","Updating Fields"],"pageType":"guide","title":"Updating Fields","section":"Updating Fields","route":"demo-walkthrough/updating-fields","fragment":"updating-fields","content":"We trigger editing of the node labels by clicking on the edit icon which triggers our editNode() method in the tree.component.ts file."},{"breadcrumbs":["Demo Walkthrough","Updating Fields"],"pageType":"guide","title":"Updating Fields","section":"Updating Fields","route":"demo-walkthrough/updating-fields","fragment":"updating-fields","content":"Notice that we save which node we are editing so that if a repaint occurs, we don't stop editing. We also save off the current content so that if we cancel out of the edit, we can set things back to the way they were."},{"breadcrumbs":["Demo Walkthrough","Updating Fields"],"pageType":"guide","title":"Updating Fields","section":"Updating Fields","route":"demo-walkthrough/updating-fields","fragment":"updating-fields","content":"This then loads our edit component that we've created where we can make the changes. If we press ESC while editing, it fires our cancelEdit() method which sets everything back to the way it was."},{"breadcrumbs":["Demo Walkthrough","Updating Fields"],"pageType":"guide","title":"Updating Fields","section":"Updating Fields","route":"demo-walkthrough/updating-fields","fragment":"updating-fields","content":"When we press ENTER, it triggers our saveNode() method. This undoes the edit state of our presentation and then stores the editingContent field into the node's name field. Updating the node's name field optimistically updates the field and eventually triggers the Effects Service to update the server."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Introduction"],"pageType":"guide","title":"Introduction","section":"Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/intro","fragment":"mark-and-delete","content":"By default, the Mark and Delete mechanism in SmartNgRX will mark a row as dirty 15 minutes after it has been loaded. If the row is still being used somewhere on the screen, the system will re-request the row from the server. If the row is not being used, 15 minutes later, the row will be removed from the store. Said another way, if a row is loaded and then not used for 30 minutes, it will be removed from the store."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Introduction"],"pageType":"guide","title":"Introduction","section":"Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/intro","fragment":"mark-and-delete","content":"Up until now we haven't even mentioned Mark and Delete because it is the default. If you don't pass any parameters for Mark and Delete, this is what you get \"for free\"."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Introduction"],"pageType":"guide","title":"Introduction","section":"Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/intro","fragment":"mark-and-delete","content":"But, you can customize the Mark and Delete behavior. Maybe you want to mark a row as dirty after 5 minutes instead of 15. Maybe you want rows to be deleted after an hour instead of 30 minutes. Maybe you don't want to re-retrieve rows from the server if they are still being used on the screen. Maybe you want to keep rows around forever."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","Introduction"],"pageType":"guide","title":"Introduction","section":"Mark and Delete","route":"using-smart-ng-rx/mark-and-delete/intro","fragment":"mark-and-delete","content":"All this can be configured."},{"breadcrumbs":["Public API","Public API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"","route":"public-api/interfaces/public-api/PartialArrayDefinition","content":"Defines the structure of a partial array used to create a virtual array."},{"breadcrumbs":["Public API","Public API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"Properties","route":"public-api/interfaces/public-api/PartialArrayDefinition","fragment":"properties","content":"the ids to put into the virtual array"},{"breadcrumbs":["Public API","Public API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"Properties","route":"public-api/interfaces/public-api/PartialArrayDefinition","fragment":"properties","content":"the total number of ids in the virtual array"},{"breadcrumbs":["Public API","Public API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"Properties","route":"public-api/interfaces/public-api/PartialArrayDefinition","fragment":"properties","content":"starting index for the ids to be filled into the virtual array"},{"breadcrumbs":["Internal API","Internal API","ParentInfo"],"pageType":"api","title":"ParentInfo","section":"","route":"internal-api/interfaces/internal-api/ParentInfo","content":"Used to define the array of parents for a child this is used to help remove an id from the parent's child field."},{"breadcrumbs":["Internal API","Internal API","ParentInfo"],"pageType":"api","title":"ParentInfo","section":"Properties","route":"internal-api/interfaces/internal-api/ParentInfo","fragment":"properties","content":"The name of the entity for this parent."},{"breadcrumbs":["Internal API","Internal API","ParentInfo"],"pageType":"api","title":"ParentInfo","section":"Properties","route":"internal-api/interfaces/internal-api/ParentInfo","fragment":"properties","content":"The name of the feature this parent is in."},{"breadcrumbs":["Internal API","Internal API","ParentInfo"],"pageType":"api","title":"ParentInfo","section":"Properties","route":"internal-api/interfaces/internal-api/ParentInfo","fragment":"properties","content":"List of parent row IDs that have the child."},{"breadcrumbs":["Internal API","Internal API","forceRefetchOfVirtualIndexes"],"pageType":"api","title":"forceRefetchOfVirtualIndexes","section":"","route":"internal-api/functions/internal-api/forceRefetchOfVirtualIndexes","content":"If the row has a dirty flag set, this tells the virtualArray that the indexes need to be refetched."},{"breadcrumbs":["Internal API","Internal API","forceRefetchOfVirtualIndexes"],"pageType":"api","title":"forceRefetchOfVirtualIndexes","section":"Parameters","route":"internal-api/functions/internal-api/forceRefetchOfVirtualIndexes","fragment":"parameters","content":"@param row the row to check"},{"breadcrumbs":["Internal API","Internal API","isArrayProxy"],"pageType":"api","title":"isArrayProxy","section":"","route":"internal-api/functions/internal-api/isArrayProxy","content":"Determines if the specified object is an ArrayProxy"},{"breadcrumbs":["Internal API","Internal API","isArrayProxy"],"pageType":"api","title":"isArrayProxy","section":"Parameters","route":"internal-api/functions/internal-api/isArrayProxy","fragment":"parameters","content":"@param arr the object to check"},{"breadcrumbs":["Internal API","Internal API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"","route":"internal-api/interfaces/internal-api/PartialArrayDefinition","content":"Defines the structure of a partial array used to create a virtual array."},{"breadcrumbs":["Internal API","Internal API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/PartialArrayDefinition","fragment":"properties","content":"the ids to put into the virtual array"},{"breadcrumbs":["Internal API","Internal API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/PartialArrayDefinition","fragment":"properties","content":"the total number of ids in the virtual array"},{"breadcrumbs":["Internal API","Internal API","PartialArrayDefinition"],"pageType":"api","title":"PartialArrayDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/PartialArrayDefinition","fragment":"properties","content":"starting index for the ids to be filled into the virtual array"},{"breadcrumbs":["Internal API","Internal API","markFeatureParentsDirty"],"pageType":"api","title":"markFeatureParentsDirty","section":"","route":"internal-api/functions/internal-api/markFeatureParentsDirty","content":"Goes through each of the feature/entity parents and marks the parent row(s) as dirty"},{"breadcrumbs":["Internal API","Internal API","markFeatureParentsDirty"],"pageType":"api","title":"markFeatureParentsDirty","section":"Parameters","route":"internal-api/functions/internal-api/markFeatureParentsDirty","fragment":"parameters","content":"@param action the action that has the parentInfo in it"},{"breadcrumbs":["Internal API","Internal API","markAndDeleteFeaturesInterval"],"pageType":"api","title":"markAndDeleteFeaturesInterval","section":"","route":"internal-api/functions/internal-api/markAndDeleteFeaturesInterval","content":"Used internally by mark-and-delete.effect.ts to start an interval that runs to affect markAndDelete functionality"},{"breadcrumbs":["Internal API","Internal API","markAndDeleteFeaturesInterval"],"pageType":"api","title":"markAndDeleteFeaturesInterval","section":"Returns","route":"internal-api/functions/internal-api/markAndDeleteFeaturesInterval","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","markAndDeleteFeaturesInterval"],"pageType":"api","title":"markAndDeleteFeaturesInterval","section":"Returns","route":"internal-api/functions/internal-api/markAndDeleteFeaturesInterval","fragment":"returns","content":"Observable - just an observable for the effect to observe"},{"breadcrumbs":["Using Smart NgRX","Entity Registration"],"pageType":"guide","title":"Entity Registration","section":"Entity Registration","route":"using-smart-ng-rx/entity-registration","fragment":"entity-registration","content":"Now that we have all the pieces in place, we can register our definitions with Smart NgRX so that they can be used by the library."},{"breadcrumbs":["Using Smart NgRX","Entity Registration"],"pageType":"guide","title":"Entity Registration","section":"Entity Registration","route":"using-smart-ng-rx/entity-registration","fragment":"entity-registration","content":"We register our definitions by feature. By making even your common NgRX entities feature specific, all your NgRX code looks the same and is easy to move to another feature as needed."},{"breadcrumbs":["Using Smart NgRX","Entity Registration"],"pageType":"guide","title":"Entity Registration","section":"Entity Registration","route":"using-smart-ng-rx/entity-registration","fragment":"entity-registration","content":"The following is how we would register our User entity as part of the shared feature with Smart NgRX:"},{"breadcrumbs":["Using Smart NgRX","Entity Registration"],"pageType":"guide","title":"Entity Registration","section":"Entity Registration","route":"using-smart-ng-rx/entity-registration","fragment":"entity-registration","content":"Remember, we defined usersDefinition earlier in the Entity Definitions section."},{"breadcrumbs":["Using Smart NgRX","Entity Registration"],"pageType":"guide","title":"Entity Registration","section":"Entity Registration","route":"using-smart-ng-rx/entity-registration","fragment":"entity-registration","content":"If there are other entities you want to register with this feature, you would add them to the array of entity definitions."},{"breadcrumbs":["Using Smart NgRX","Global Registration"],"pageType":"guide","title":"Global Registration","section":"Global Registration","route":"using-smart-ng-rx/global-registration","fragment":"global-registration","content":"Now that we have all the pieces in place, we can register our definitions with Smart NgRX so that they can be used by the library."},{"breadcrumbs":["Using Smart NgRX","Global Registration"],"pageType":"guide","title":"Global Registration","section":"Global Registration","route":"using-smart-ng-rx/global-registration","fragment":"global-registration","content":"Before we do this, though, we need to register global, top level definitions using provideSmartNgRX."},{"breadcrumbs":["Using Smart NgRX","Global Registration"],"pageType":"guide","title":"Global Registration","section":"Global Registration","route":"using-smart-ng-rx/global-registration","fragment":"global-registration","content":"We recommend adding this to your app.module.ts file directly, or indirectly."},{"breadcrumbs":["Using Smart NgRX","Global Registration"],"pageType":"guide","title":"Global Registration","section":"Global Registration","route":"using-smart-ng-rx/global-registration","fragment":"global-registration","content":"If you are using a stand alone component for your app.component.ts file, then you'll want to include this in your app.config.ts file that main.ts references."},{"breadcrumbs":["Using Smart NgRX","Global Registration"],"pageType":"guide","title":"Global Registration","section":"Global Registration","route":"using-smart-ng-rx/global-registration","fragment":"global-registration","content":"If you've jumped ahead and looked at the definition of provideSmartNgRX, you'll see that it takes an optional MarkAndDeleteInit object as a parameter. This allows us to configure how Mark and Delete works globally. We'll cover this in more detail in the Mark and Delete section."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Delete a Row"],"pageType":"guide","title":"Delete a Row","section":"Deleting a Row","route":"using-smart-ng-rx/crud-support/deleting","fragment":"deleting-a-row","content":"Every row that is returned by SmartNgRX is wrapped in the RowProxy class, which provides access to a delete() method. Calling delete() on a row will optimistically remove the row from the store, including the child arrays in every parent that references it. Then the delete() method in your Effect Service will get called. If the delete() method fails, the deletion will be rolled back."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Delete a Row"],"pageType":"guide","title":"Delete a Row","section":"Deleting a Row","route":"using-smart-ng-rx/crud-support/deleting","fragment":"deleting-a-row","content":"Sample code from the demo app:"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Delete a Row"],"pageType":"guide","title":"Delete a Row","section":"Deleting a Row","route":"using-smart-ng-rx/crud-support/deleting","fragment":"deleting-a-row","content":"Note: node.node is typed as RowProxyDelete, which defines the optional delete method. Because the delete method will, by definition, be available, we can safely use the non-null assertion operator ! to call it."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Delete a Row"],"pageType":"guide","title":"Delete a Row","section":"Deleting a Row","route":"using-smart-ng-rx/crud-support/deleting","fragment":"deleting-a-row","content":"Everything else happens for you under the covers."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Delete a Row"],"pageType":"guide","title":"Delete a Row","section":"Deleting a Row","route":"using-smart-ng-rx/crud-support/deleting","fragment":"deleting-a-row","content":"And this ultimately calls your EffectService class."},{"breadcrumbs":["Public API","Public API","forNext"],"pageType":"api","title":"forNext","section":"","route":"public-api/functions/public-api/forNext","content":"Allows us to iterate over an array using for/next instead of using an iterator (forEach for example) which can be 10x slower. This provides the same benefit as forEach but without the performance hit."},{"breadcrumbs":["Public API","Public API","forNext"],"pageType":"api","title":"forNext","section":"Parameters","route":"public-api/functions/public-api/forNext","fragment":"parameters","content":"@param array the array we want to iterate over"},{"breadcrumbs":["Public API","Public API","forNext"],"pageType":"api","title":"forNext","section":"Parameters","route":"public-api/functions/public-api/forNext","fragment":"parameters","content":"@param callback the callback function to call for each item in the array."},{"breadcrumbs":["Internal API","Internal API","ActionGroup"],"pageType":"api","title":"ActionGroup","section":"","route":"internal-api/interfaces/internal-api/ActionGroup","content":"Interface that describes a group of actions for a feature"},{"breadcrumbs":["Internal API","Internal API","ActionGroup"],"pageType":"api","title":"ActionGroup","section":"Properties","route":"internal-api/interfaces/internal-api/ActionGroup","fragment":"properties","content":"Action to remove rows represented by the IDs from the store."},{"breadcrumbs":["Internal API","Internal API","ActionGroup"],"pageType":"api","title":"ActionGroup","section":"Properties","route":"internal-api/interfaces/internal-api/ActionGroup","fragment":"properties","content":"Action to put rows into the store."},{"breadcrumbs":["Internal API","Internal API","ActionGroup"],"pageType":"api","title":"ActionGroup","section":"Properties","route":"internal-api/interfaces/internal-api/ActionGroup","fragment":"properties","content":"Action to update state with multiple changes at a time."},{"breadcrumbs":["Internal API","Internal API","ActionGroup"],"pageType":"api","title":"ActionGroup","section":"Properties","route":"internal-api/interfaces/internal-api/ActionGroup","fragment":"properties","content":"Action to trigger upserting a new/existing row"},{"breadcrumbs":["Internal API","Internal API","forNext"],"pageType":"api","title":"forNext","section":"","route":"internal-api/functions/internal-api/forNext","content":"Allows us to iterate over an array using for/next instead of using an iterator (forEach for example) which can be 10x slower. This provides the same benefit as forEach but without the performance hit."},{"breadcrumbs":["Internal API","Internal API","forNext"],"pageType":"api","title":"forNext","section":"Parameters","route":"internal-api/functions/internal-api/forNext","fragment":"parameters","content":"@param array the array we want to iterate over"},{"breadcrumbs":["Internal API","Internal API","forNext"],"pageType":"api","title":"forNext","section":"Parameters","route":"internal-api/functions/internal-api/forNext","fragment":"parameters","content":"@param callback the callback function to call for each item in the array."},{"breadcrumbs":["Demo Walkthrough","Introduction"],"pageType":"guide","title":"Introduction","section":"Introduction","route":"demo-walkthrough/introduction","fragment":"introduction","content":"The demo application is meant to be a set of examples of how SmartNgRX works and what it can do. It demonstrates the following concepts:"},{"breadcrumbs":["Demo Walkthrough","Introduction"],"pageType":"guide","title":"Introduction","section":"Introduction","route":"demo-walkthrough/introduction","fragment":"introduction","content":"Using the Angular Material Tree component and the CDK Virtual Scroll component, it demonstrates how to only load the data that is needed to display the part of the tree you can see.How to use the SmartNgRX library to manage the state of the application. (CRUD operations).How to implement web socket server to client communication.The various ways to handle refreshing and garbage collecting NgRX data (or not)."},{"breadcrumbs":["Demo Walkthrough","Introduction"],"pageType":"guide","title":"Introduction","section":"Introduction","route":"demo-walkthrough/introduction","fragment":"introduction","content":"It was primarily built as a way to test the various features as they were built and we will add to it as more features are added or we find a need to demonstrate more features. One that quickly comes to mind is demonstrating the ability to have multiple parents of a row. This should work, but we've not yet tested it extensively."},{"breadcrumbs":["Demo Walkthrough","Introduction"],"pageType":"guide","title":"Introduction","section":"Tabs","route":"demo-walkthrough/introduction","fragment":"tabs","content":"Other than the main tab that describes each of the demo tabs, there are four tabs that each demonstrate a different way of managing state using SmartNgRX."},{"breadcrumbs":["Demo Walkthrough","Introduction"],"pageType":"guide","title":"Introduction","section":"Tabs","route":"demo-walkthrough/introduction","fragment":"tabs","content":"Tree (Standard): This tab demonstrates the default Mark and Delete strategy that SmartNgRX uses.markDirtyTime: Marks a row as dirty every 15 minutes.markDirtyFetchesNew: Uses the default of true to fetch new data when a row is marked dirty.removeTime: Removes a row from memory if it is still dirty 15 minutes after being marked dirty.runInterval: Uses the default polling interval of 1 minute to mark rows dirty or remove them from memory.Tree (No Refresh): This tab demonstrates the No Refresh strategy that SmartNgRX can use. It also overrides the times to 2 minutes and 4 minutes. Instead of refreshing the data every 2 minutes, it does nothing. Later on, it removes the row if it hasn't been rendered 2 minutes after the last time it would have been marked dirty. While it doesn't refresh when it is marked dirty, it does act as though it did.markDirtyTime: Marks a row as dirty every 2 minutes.markDirtyFetchesNew: Sets this value to false. This is what causes the \"No Refresh\".removeTime: Removes a row from memory if it is still dirty 2 minutes after being marked dirty.Tree (No Remove): This demo does not remove rows from memory once they've been loaded, but it does mark them dirty so they can be refreshed. You might use this feature if your application does not display a lot of data and can support the extra memory preasure. It can also make your application feel faster so you might strategically apply it to select entities in your appliction.markDirtyTime: Marks a row dirty every 2 minutes.removeTime: This is set to 0 so rows are never removed from memory.Tree (No Dirty): This demo sets the markDirtyTime to -1 so that nothing ever gets marked dirty. This means that data will never be refreshed and it will never be removed from memory. You would typically use this feture for lookup tables that don't change often so there is no reason to refresh them.markDirtyTime: This is set to -1 so that nothing ever gets marked dirty or gets removed from memory."},{"breadcrumbs":["Using Smart NgRX","Child Fields"],"pageType":"guide","title":"Child Fields","section":"Child Fields","route":"using-smart-ng-rx/child-fields","fragment":"child-fields","content":"We've discussed the concept of a child field multiple times now, but we haven't gone into a lot of detail about what they are or how they work."},{"breadcrumbs":["Using Smart NgRX","Child Fields"],"pageType":"guide","title":"Child Fields","section":"Child Fields","route":"using-smart-ng-rx/child-fields","fragment":"child-fields","content":"A child field is a field that is defined on a component that points to other rows in another entity. It does this either by using a list of ids that we then use to fetch the rows from the entity. If we don't yet have the rows in the store, Smart NgRX will automatically fetch them for you."},{"breadcrumbs":["Using Smart NgRX","Child Fields"],"pageType":"guide","title":"Child Fields","section":"Child Fields","route":"using-smart-ng-rx/child-fields","fragment":"child-fields","content":"There are two types of child fields. The first type is just a list of ids. An array of strings. For most situations this is sufficient. But if you have a long list of children, you might want to load the IDs into the array as you need them. For this you need a Child field of type PartialArrayDefinition. PartialArrayDefinition holds a list of indexes, the length of elements that will ultimately be in the array and the start position in the ultimate array that the indexes that are returned to SmartNgRX will be placed at."},{"breadcrumbs":["Using Smart NgRX","Child Fields"],"pageType":"guide","title":"Child Fields","section":"Child Fields","route":"using-smart-ng-rx/child-fields","fragment":"child-fields","content":"SmartNgRX is smart enough to know that if you are using an Array, you have all the IDs you will ever need. If you return a PartialArrayDefinition from your EffectService, SmartNgRX will know that you are using a virtual array and will automatically fetch the rows from the server as you need them."},{"breadcrumbs":["Using Smart NgRX","Child Fields"],"pageType":"guide","title":"Child Fields","section":"Child Fields","route":"using-smart-ng-rx/child-fields","fragment":"child-fields","content":"When you retrieve a row, you can either provide a PartialArrayDefinition that has the first N IDs in the array already provided in the indexes property, or you can provide an empty array and just provide the ultimate length of the array. Which you choose will depend on how soon you'll need those IDs and how expensive it will be to return them as part of the request for the row."},{"breadcrumbs":["Using Smart NgRX","Child Fields"],"pageType":"guide","title":"Child Fields","section":"Child Fields","route":"using-smart-ng-rx/child-fields","fragment":"child-fields","content":"This information will be important later when we discuss Retrieving Rows."},{"breadcrumbs":["Using Smart NgRX","Using With Existing Selectors"],"pageType":"guide","title":"Using With Existing Selectors","section":"Using With Existing Selectors","route":"using-smart-ng-rx/using-with-existing-selectors","fragment":"using-with-existing-selectors","content":"You may have noticed that createSmartSelector only accepts a parent selector that returns an entity type. But what if you have existing selectors you need to integrate with SmartNgRX that return a different type?"},{"breadcrumbs":["Using Smart NgRX","Using With Existing Selectors"],"pageType":"guide","title":"Using With Existing Selectors","section":"Using With Existing Selectors","route":"using-smart-ng-rx/using-with-existing-selectors","fragment":"using-with-existing-selectors","content":"For this, you'll need an adapter function that converts the output of your existing selector to the entity type. Here's an example:"},{"breadcrumbs":["Using Smart NgRX","Using With Existing Selectors"],"pageType":"guide","title":"Using With Existing Selectors","section":"Using With Existing Selectors","route":"using-smart-ng-rx/using-with-existing-selectors","fragment":"using-with-existing-selectors","content":"There are other ways you might achieve your goals, but this is a simple and effective way of creating a reusable adapter function that you can use to convert any selector that returns an array of objects to an entity state."},{"breadcrumbs":["Using Smart NgRX","Using With Existing Selectors"],"pageType":"guide","title":"Using With Existing Selectors","section":"Using With Existing Selectors","route":"using-smart-ng-rx/using-with-existing-selectors","fragment":"using-with-existing-selectors","content":"This assumes the rows you are passing in are flat other than the child arrays which should ONLY be string arrays. If you have nested objects or arrays, you can still use this function but only the row itself and child array items as expected by SmartNgRX will be something you can use as though it were a SmartNgRX entity."},{"breadcrumbs":["Using Smart NgRX","Using With Existing Selectors"],"pageType":"guide","title":"Using With Existing Selectors","section":"Using With Existing Selectors","route":"using-smart-ng-rx/using-with-existing-selectors","fragment":"using-with-existing-selectors","content":"If your current data is nested, you might consider using a library like Normalizr (unmaintained) or one of the alternatives to flatten your data."},{"breadcrumbs":["Using Smart NgRX","Using With Existing Selectors"],"pageType":"guide","title":"Using With Existing Selectors","section":"Using With Existing Selectors","route":"using-smart-ng-rx/using-with-existing-selectors","fragment":"using-with-existing-selectors","content":"You may need to adjust the function to suit your specific needs which is why we have not included this adapter in the library itself."},{"breadcrumbs":["Public API","Public API","store"],"pageType":"api","title":"store","section":"","route":"public-api/functions/public-api/store","content":"Internal function used to provide and retrieve a global store that is needed by code that does not have DI."},{"breadcrumbs":["Public API","Public API","store"],"pageType":"api","title":"store","section":"Returns","route":"public-api/functions/public-api/store","fragment":"returns","content":"-"},{"breadcrumbs":["Public API","Public API","store"],"pageType":"api","title":"store","section":"Returns","route":"public-api/functions/public-api/store","fragment":"returns","content":"= the global store value."},{"breadcrumbs":["Public API","Public API","store"],"pageType":"api","title":"store","section":"Parameters","route":"public-api/functions/public-api/store","fragment":"parameters","content":"@param storeParam This is an optional parameter. If it is there, we set the store. Otherwise, we use what is already set."},{"breadcrumbs":["Public API","Public API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"","route":"public-api/functions/public-api/handleSocketNotification","content":"The main function responsible for handling socket notifications"},{"breadcrumbs":["Public API","Public API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"Parameters","route":"public-api/functions/public-api/handleSocketNotification","fragment":"parameters","content":"@param table the table that the notification is for"},{"breadcrumbs":["Public API","Public API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"Parameters","route":"public-api/functions/public-api/handleSocketNotification","fragment":"parameters","content":"@param action the action that the notification is for (create, delete, update)"},{"breadcrumbs":["Public API","Public API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"Parameters","route":"public-api/functions/public-api/handleSocketNotification","fragment":"parameters","content":"@param ids the ids of the entities that the notification is for"},{"breadcrumbs":["Public API","Public API","setState"],"pageType":"api","title":"setState","section":"","route":"public-api/functions/public-api/setState","content":"Sets the state of the store during unit testing. This grabs the current state and adds the new state to it. If the feature and entity already exist, it will overwrite that state while leaving the rest of the store alone."},{"breadcrumbs":["Public API","Public API","setState"],"pageType":"api","title":"setState","section":"Parameters","route":"public-api/functions/public-api/setState","fragment":"parameters","content":"@param feature the feature to set"},{"breadcrumbs":["Public API","Public API","setState"],"pageType":"api","title":"setState","section":"Parameters","route":"public-api/functions/public-api/setState","fragment":"parameters","content":"@param entity the entity name to set"},{"breadcrumbs":["Public API","Public API","setState"],"pageType":"api","title":"setState","section":"Parameters","route":"public-api/functions/public-api/setState","fragment":"parameters","content":"@param state the state to set"},{"breadcrumbs":["Public API","Public API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"","route":"public-api/interfaces/public-api/SmartNgRXRowBase","content":"This interface should be used by any interface that represents an entity in the store that uses the Smart NgRX library."},{"breadcrumbs":["Public API","Public API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"public-api/interfaces/public-api/SmartNgRXRowBase","fragment":"properties","content":"All rows need an id field that is a string"},{"breadcrumbs":["Public API","Public API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"public-api/interfaces/public-api/SmartNgRXRowBase","fragment":"properties","content":"Flag that indicates that the row is dirty. This is used internally by the mark and delete functionality."},{"breadcrumbs":["Public API","Public API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"public-api/interfaces/public-api/SmartNgRXRowBase","fragment":"properties","content":"This flag indicates that the row is currently being edited this is used internally."},{"breadcrumbs":["Public API","Public API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"public-api/interfaces/public-api/SmartNgRXRowBase","fragment":"properties","content":"Flag that indicates that the row is a placeholder. You might want to use this to indicate that the row is being loaded by, for example, displaying skeleton rows via CSS."},{"breadcrumbs":["Public API","Public API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"public-api/interfaces/public-api/SmartNgRXRowBase","fragment":"properties","content":"We use parentId to store the parentId of this row while we are adding it and to indicate that we are in adding mode. This is used internally."},{"breadcrumbs":["Internal API","Internal API","removeIdFromParents"],"pageType":"api","title":"removeIdFromParents","section":"","route":"internal-api/functions/internal-api/removeIdFromParents","content":"Helper method to remove the id of the row from the parent rows looking at it"},{"breadcrumbs":["Internal API","Internal API","removeIdFromParents"],"pageType":"api","title":"removeIdFromParents","section":"Parameters","route":"internal-api/functions/internal-api/removeIdFromParents","fragment":"parameters","content":"@param childDefinition the ChildDefinition that defines the parent/child relationship for the row being deleted"},{"breadcrumbs":["Internal API","Internal API","removeIdFromParents"],"pageType":"api","title":"removeIdFromParents","section":"Parameters","route":"internal-api/functions/internal-api/removeIdFromParents","fragment":"parameters","content":"@param id the id of the row being deleted"},{"breadcrumbs":["Internal API","Internal API","removeIdFromParents"],"pageType":"api","title":"removeIdFromParents","section":"Parameters","route":"internal-api/functions/internal-api/removeIdFromParents","fragment":"parameters","content":"@param parentInfo holds the parent feature, entity, and ids that are affected by the delete"},{"breadcrumbs":["Internal API","Internal API","replaceIdInParents"],"pageType":"api","title":"replaceIdInParents","section":"","route":"internal-api/functions/internal-api/replaceIdInParents","content":"Helper method to remove the id of the row from the parent rows looking at it"},{"breadcrumbs":["Internal API","Internal API","replaceIdInParents"],"pageType":"api","title":"replaceIdInParents","section":"Parameters","route":"internal-api/functions/internal-api/replaceIdInParents","fragment":"parameters","content":"@param childDefinition the ChildDefinition that defines the parent/child relationship for the row being deleted"},{"breadcrumbs":["Internal API","Internal API","replaceIdInParents"],"pageType":"api","title":"replaceIdInParents","section":"Parameters","route":"internal-api/functions/internal-api/replaceIdInParents","fragment":"parameters","content":"@param id the id of the row being deleted"},{"breadcrumbs":["Internal API","Internal API","replaceIdInParents"],"pageType":"api","title":"replaceIdInParents","section":"Parameters","route":"internal-api/functions/internal-api/replaceIdInParents","fragment":"parameters","content":"@param newId the new id to replace the old id with"},{"breadcrumbs":["Internal API","Internal API","itemIsMarkedForDeletion"],"pageType":"api","title":"itemIsMarkedForDeletion","section":"","route":"internal-api/functions/internal-api/itemIsMarkedForDeletion","content":"checks to see if the item is marked as deleted so we know to not merge it into the array. Used by mergeVirtualArrays"},{"breadcrumbs":["Internal API","Internal API","itemIsMarkedForDeletion"],"pageType":"api","title":"itemIsMarkedForDeletion","section":"Returns","route":"internal-api/functions/internal-api/itemIsMarkedForDeletion","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","itemIsMarkedForDeletion"],"pageType":"api","title":"itemIsMarkedForDeletion","section":"Returns","route":"internal-api/functions/internal-api/itemIsMarkedForDeletion","fragment":"returns","content":"true if the item is deleted, false otherwise"},{"breadcrumbs":["Internal API","Internal API","itemIsMarkedForDeletion"],"pageType":"api","title":"itemIsMarkedForDeletion","section":"Parameters","route":"internal-api/functions/internal-api/itemIsMarkedForDeletion","fragment":"parameters","content":"@param item the item to check"},{"breadcrumbs":["Internal API","Internal API","isVirtualArrayContents"],"pageType":"api","title":"isVirtualArrayContents","section":"","route":"internal-api/functions/internal-api/isVirtualArrayContents","content":"Type guard to check if an item is a VirtualArrayContents"},{"breadcrumbs":["Internal API","Internal API","isVirtualArrayContents"],"pageType":"api","title":"isVirtualArrayContents","section":"Returns","route":"internal-api/functions/internal-api/isVirtualArrayContents","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","isVirtualArrayContents"],"pageType":"api","title":"isVirtualArrayContents","section":"Returns","route":"internal-api/functions/internal-api/isVirtualArrayContents","fragment":"returns","content":"True if the item is a VirtualArrayContents, false otherwise"},{"breadcrumbs":["Internal API","Internal API","isVirtualArrayContents"],"pageType":"api","title":"isVirtualArrayContents","section":"Parameters","route":"internal-api/functions/internal-api/isVirtualArrayContents","fragment":"parameters","content":"@param item The item to check"},{"breadcrumbs":["Internal API","Internal API","isNullOrUndefined"],"pageType":"api","title":"isNullOrUndefined","section":"","route":"internal-api/functions/internal-api/isNullOrUndefined","content":"determines if the value passed in is null or undefined this is safer than just checking for truthy or falsy because 0, '' are also falsy values."},{"breadcrumbs":["Internal API","Internal API","isNullOrUndefined"],"pageType":"api","title":"isNullOrUndefined","section":"Returns","route":"internal-api/functions/internal-api/isNullOrUndefined","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","isNullOrUndefined"],"pageType":"api","title":"isNullOrUndefined","section":"Returns","route":"internal-api/functions/internal-api/isNullOrUndefined","fragment":"returns","content":"true if the value is null or undefined"},{"breadcrumbs":["Internal API","Internal API","isNullOrUndefined"],"pageType":"api","title":"isNullOrUndefined","section":"Parameters","route":"internal-api/functions/internal-api/isNullOrUndefined","fragment":"parameters","content":"@param value the value to check"},{"breadcrumbs":["Internal API","Internal API","zoneless"],"pageType":"api","title":"zoneless","section":"","route":"internal-api/functions/internal-api/zoneless","content":"retrieves the zoneless version of the function"},{"breadcrumbs":["Internal API","Internal API","zoneless"],"pageType":"api","title":"zoneless","section":"Returns","route":"internal-api/functions/internal-api/zoneless","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","zoneless"],"pageType":"api","title":"zoneless","section":"Returns","route":"internal-api/functions/internal-api/zoneless","fragment":"returns","content":"the zoneless version of the function"},{"breadcrumbs":["Internal API","Internal API","zoneless"],"pageType":"api","title":"zoneless","section":"Parameters","route":"internal-api/functions/internal-api/zoneless","fragment":"parameters","content":"@param func The name of the symbol we need the zoneless version of"},{"breadcrumbs":["Internal API","Internal API","resolveRemoveTime"],"pageType":"api","title":"resolveRemoveTime","section":"","route":"internal-api/functions/internal-api/resolveRemoveTime","content":"Used internally to resolve the remove time to ensure it is always greater than the mark dirty time."},{"breadcrumbs":["Internal API","Internal API","resolveRemoveTime"],"pageType":"api","title":"resolveRemoveTime","section":"Returns","route":"internal-api/functions/internal-api/resolveRemoveTime","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","resolveRemoveTime"],"pageType":"api","title":"resolveRemoveTime","section":"Returns","route":"internal-api/functions/internal-api/resolveRemoveTime","fragment":"returns","content":"The correct remove time"},{"breadcrumbs":["Internal API","Internal API","resolveRemoveTime"],"pageType":"api","title":"resolveRemoveTime","section":"Parameters","route":"internal-api/functions/internal-api/resolveRemoveTime","fragment":"parameters","content":"@param init The mark and delete init object"},{"breadcrumbs":["Internal API","Internal API","rowProxyGet"],"pageType":"api","title":"rowProxyGet","section":"","route":"internal-api/functions/internal-api/rowProxyGet","content":"This provides the get method of the Proxy in RowProxy"},{"breadcrumbs":["Internal API","Internal API","rowProxyGet"],"pageType":"api","title":"rowProxyGet","section":"Returns","route":"internal-api/functions/internal-api/rowProxyGet","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","rowProxyGet"],"pageType":"api","title":"rowProxyGet","section":"Returns","route":"internal-api/functions/internal-api/rowProxyGet","fragment":"returns","content":"the value of the property"},{"breadcrumbs":["Internal API","Internal API","rowProxyGet"],"pageType":"api","title":"rowProxyGet","section":"Parameters","route":"internal-api/functions/internal-api/rowProxyGet","fragment":"parameters","content":"@param service the ActionService that handles the actions for the row"},{"breadcrumbs":["Internal API","Internal API","rowProxySet"],"pageType":"api","title":"rowProxySet","section":"","route":"internal-api/functions/internal-api/rowProxySet","content":"This provides the set method of the Proxy in RowProxy"},{"breadcrumbs":["Internal API","Internal API","rowProxySet"],"pageType":"api","title":"rowProxySet","section":"Returns","route":"internal-api/functions/internal-api/rowProxySet","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","rowProxySet"],"pageType":"api","title":"rowProxySet","section":"Returns","route":"internal-api/functions/internal-api/rowProxySet","fragment":"returns","content":"true if the property was set, false otherwise"},{"breadcrumbs":["Internal API","Internal API","rowProxySet"],"pageType":"api","title":"rowProxySet","section":"Parameters","route":"internal-api/functions/internal-api/rowProxySet","fragment":"parameters","content":"@param services the services associated with the row and parent entity"},{"breadcrumbs":["Internal API","Internal API","getServices"],"pageType":"api","title":"getServices","section":"","route":"internal-api/functions/internal-api/getServices","content":"retrieves child and parent actionServices from the registry"},{"breadcrumbs":["Internal API","Internal API","getServices"],"pageType":"api","title":"getServices","section":"Returns","route":"internal-api/functions/internal-api/getServices","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","getServices"],"pageType":"api","title":"getServices","section":"Returns","route":"internal-api/functions/internal-api/getServices","fragment":"returns","content":"the actionServices for the child and the parent"},{"breadcrumbs":["Internal API","Internal API","getServices"],"pageType":"api","title":"getServices","section":"Parameters","route":"internal-api/functions/internal-api/getServices","fragment":"parameters","content":"@param childDefinition the ChildDefinition to retrieve the services for"},{"breadcrumbs":["Internal API","Internal API","store"],"pageType":"api","title":"store","section":"","route":"internal-api/functions/internal-api/store","content":"Internal function used to provide and retrieve a global store that is needed by code that does not have DI."},{"breadcrumbs":["Internal API","Internal API","store"],"pageType":"api","title":"store","section":"Returns","route":"internal-api/functions/internal-api/store","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","store"],"pageType":"api","title":"store","section":"Returns","route":"internal-api/functions/internal-api/store","fragment":"returns","content":"= the global store value."},{"breadcrumbs":["Internal API","Internal API","store"],"pageType":"api","title":"store","section":"Parameters","route":"internal-api/functions/internal-api/store","fragment":"parameters","content":"@param storeParam This is an optional parameter. If it is there, we set the store. Otherwise, we use what is already set."},{"breadcrumbs":["Internal API","Internal API","deleteEntity"],"pageType":"api","title":"deleteEntity","section":"","route":"internal-api/functions/internal-api/deleteEntity","content":"Delete the feature/entity/ids from the store"},{"breadcrumbs":["Internal API","Internal API","deleteEntity"],"pageType":"api","title":"deleteEntity","section":"Parameters","route":"internal-api/functions/internal-api/deleteEntity","fragment":"parameters","content":"@param feature The feature the entity is in."},{"breadcrumbs":["Internal API","Internal API","deleteEntity"],"pageType":"api","title":"deleteEntity","section":"Parameters","route":"internal-api/functions/internal-api/deleteEntity","fragment":"parameters","content":"@param entity The entity to delete."},{"breadcrumbs":["Internal API","Internal API","deleteEntity"],"pageType":"api","title":"deleteEntity","section":"Parameters","route":"internal-api/functions/internal-api/deleteEntity","fragment":"parameters","content":"@param ids The ids of the rows that need to be deleted."},{"breadcrumbs":["Internal API","Internal API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"","route":"internal-api/functions/internal-api/handleSocketNotification","content":"The main function responsible for handling socket notifications"},{"breadcrumbs":["Internal API","Internal API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"Parameters","route":"internal-api/functions/internal-api/handleSocketNotification","fragment":"parameters","content":"@param table the table that the notification is for"},{"breadcrumbs":["Internal API","Internal API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"Parameters","route":"internal-api/functions/internal-api/handleSocketNotification","fragment":"parameters","content":"@param action the action that the notification is for (create, delete, update)"},{"breadcrumbs":["Internal API","Internal API","handleSocketNotification"],"pageType":"api","title":"handleSocketNotification","section":"Parameters","route":"internal-api/functions/internal-api/handleSocketNotification","fragment":"parameters","content":"@param ids the ids of the entities that the notification is for"},{"breadcrumbs":["Internal API","Internal API","updateEntity"],"pageType":"api","title":"updateEntity","section":"","route":"internal-api/functions/internal-api/updateEntity","content":"Use this function to update the rows represented by the ids for an entity in a feature in response to a websocket event indicating the row has been updated."},{"breadcrumbs":["Internal API","Internal API","updateEntity"],"pageType":"api","title":"updateEntity","section":"Parameters","route":"internal-api/functions/internal-api/updateEntity","fragment":"parameters","content":"@param feature The feature the entity is in."},{"breadcrumbs":["Internal API","Internal API","updateEntity"],"pageType":"api","title":"updateEntity","section":"Parameters","route":"internal-api/functions/internal-api/updateEntity","fragment":"parameters","content":"@param entity The entity to update."},{"breadcrumbs":["Internal API","Internal API","updateEntity"],"pageType":"api","title":"updateEntity","section":"Parameters","route":"internal-api/functions/internal-api/updateEntity","fragment":"parameters","content":"@param ids The ids of the rows that need to be refreshed."},{"breadcrumbs":["Internal API","Internal API","EntityAttributes"],"pageType":"api","title":"EntityAttributes","section":"","route":"internal-api/interfaces/internal-api/EntityAttributes","content":"This is an internal interface that holds all the attributes we will need in provideEntities() so that we can just do a lookup for them later when we need them."},{"breadcrumbs":["Internal API","Internal API","EntityAttributes"],"pageType":"api","title":"EntityAttributes","section":"Properties","route":"internal-api/interfaces/internal-api/EntityAttributes","fragment":"properties","content":"??"},{"breadcrumbs":["Internal API","Internal API","EntityAttributes"],"pageType":"api","title":"EntityAttributes","section":"Properties","route":"internal-api/interfaces/internal-api/EntityAttributes","fragment":"properties","content":"Definition of how we want to handle refresh and garbage collection"},{"breadcrumbs":["Internal API","Internal API","EntityAttributes"],"pageType":"api","title":"EntityAttributes","section":"Methods","route":"internal-api/interfaces/internal-api/EntityAttributes","fragment":"methods","content":"Function that defines the default row for the entity"},{"breadcrumbs":["Internal API","Internal API","EntityAttributes"],"pageType":"api","title":"EntityAttributes","section":"Methods","route":"internal-api/interfaces/internal-api/EntityAttributes","fragment":"methods","content":"@param id the unique ID of the row"},{"breadcrumbs":["Internal API","Internal API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"","route":"internal-api/interfaces/internal-api/SmartNgRXRowBase","content":"This interface should be used by any interface that represents an entity in the store that uses the Smart NgRX library."},{"breadcrumbs":["Internal API","Internal API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"internal-api/interfaces/internal-api/SmartNgRXRowBase","fragment":"properties","content":"All rows need an id field that is a string"},{"breadcrumbs":["Internal API","Internal API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"internal-api/interfaces/internal-api/SmartNgRXRowBase","fragment":"properties","content":"Flag that indicates that the row is dirty. This is used internally by the mark and delete functionality."},{"breadcrumbs":["Internal API","Internal API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"internal-api/interfaces/internal-api/SmartNgRXRowBase","fragment":"properties","content":"This flag indicates that the row is currently being edited this is used internally."},{"breadcrumbs":["Internal API","Internal API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"internal-api/interfaces/internal-api/SmartNgRXRowBase","fragment":"properties","content":"Flag that indicates that the row is a placeholder. You might want to use this to indicate that the row is being loaded by, for example, displaying skeleton rows via CSS."},{"breadcrumbs":["Internal API","Internal API","SmartNgRXRowBase"],"pageType":"api","title":"SmartNgRXRowBase","section":"Properties","route":"internal-api/interfaces/internal-api/SmartNgRXRowBase","fragment":"properties","content":"We use parentId to store the parentId of this row while we are adding it and to indicate that we are in adding mode. This is used internally."},{"breadcrumbs":["Internal API","Internal API","bufferIds"],"pageType":"api","title":"bufferIds","section":"","route":"internal-api/functions/internal-api/bufferIds","content":"Buffers IDs and removes duplicates within the buffer window"},{"breadcrumbs":["Internal API","Internal API","bufferIds"],"pageType":"api","title":"bufferIds","section":"Returns","route":"internal-api/functions/internal-api/bufferIds","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","bufferIds"],"pageType":"api","title":"bufferIds","section":"Returns","route":"internal-api/functions/internal-api/bufferIds","fragment":"returns","content":"An observable of unique ID arrays"},{"breadcrumbs":["Internal API","Internal API","bufferIds"],"pageType":"api","title":"bufferIds","section":"Parameters","route":"internal-api/functions/internal-api/bufferIds","fragment":"parameters","content":"@param bufferTimeMs The time window for buffering (default: 1ms)"},{"breadcrumbs":["Internal API","Internal API","markParentsDirty"],"pageType":"api","title":"markParentsDirty","section":"","route":"internal-api/functions/internal-api/markParentsDirty","content":"Common function to mark the parent row as dirty"},{"breadcrumbs":["Internal API","Internal API","markParentsDirty"],"pageType":"api","title":"markParentsDirty","section":"Parameters","route":"internal-api/functions/internal-api/markParentsDirty","fragment":"parameters","content":"@param parentFeature the feature the parent is part of"},{"breadcrumbs":["Internal API","Internal API","markParentsDirty"],"pageType":"api","title":"markParentsDirty","section":"Parameters","route":"internal-api/functions/internal-api/markParentsDirty","fragment":"parameters","content":"@param parentEntity the entity the parent is part of"},{"breadcrumbs":["Internal API","Internal API","markParentsDirty"],"pageType":"api","title":"markParentsDirty","section":"Parameters","route":"internal-api/functions/internal-api/markParentsDirty","fragment":"parameters","content":"@param parentIds the ids of the parents to mark dirty"},{"breadcrumbs":["Internal API","Internal API","setState"],"pageType":"api","title":"setState","section":"","route":"internal-api/functions/internal-api/setState","content":"Sets the state of the store during unit testing. This grabs the current state and adds the new state to it. If the feature and entity already exist, it will overwrite that state while leaving the rest of the store alone."},{"breadcrumbs":["Internal API","Internal API","setState"],"pageType":"api","title":"setState","section":"Parameters","route":"internal-api/functions/internal-api/setState","fragment":"parameters","content":"@param feature the feature to set"},{"breadcrumbs":["Internal API","Internal API","setState"],"pageType":"api","title":"setState","section":"Parameters","route":"internal-api/functions/internal-api/setState","fragment":"parameters","content":"@param entity the entity name to set"},{"breadcrumbs":["Internal API","Internal API","setState"],"pageType":"api","title":"setState","section":"Parameters","route":"internal-api/functions/internal-api/setState","fragment":"parameters","content":"@param state the state to set"},{"breadcrumbs":["Internal API","Internal API","manageMaps"],"pageType":"api","title":"manageMaps","section":"","route":"internal-api/functions/internal-api/manageMaps","content":"Helper function that updates the maps used in update-effect.function.ts so we can implement optimistic updates and can rollback on error when needed."},{"breadcrumbs":["Internal API","Internal API","manageMaps"],"pageType":"api","title":"manageMaps","section":"Parameters","route":"internal-api/functions/internal-api/manageMaps","fragment":"parameters","content":"@param lastRow the map of the last row sent to the server"},{"breadcrumbs":["Internal API","Internal API","manageMaps"],"pageType":"api","title":"manageMaps","section":"Parameters","route":"internal-api/functions/internal-api/manageMaps","fragment":"parameters","content":"@param lastRowTimeout the map of the last time a row was sent to the server"},{"breadcrumbs":["Internal API","Internal API","manageMaps"],"pageType":"api","title":"manageMaps","section":"Parameters","route":"internal-api/functions/internal-api/manageMaps","fragment":"parameters","content":"@param action the action that was dispatched"},{"breadcrumbs":["Demo Walkthrough","Adding Rows"],"pageType":"guide","title":"Adding Rows","section":"Adding Rows","route":"demo-walkthrough/adding-rows","fragment":"adding-rows","content":"You may have noticed while we were looking at the code that allows for editing, that there were some variables that mentioned add so let's take a look at that next."},{"breadcrumbs":["Demo Walkthrough","Adding Rows"],"pageType":"guide","title":"Adding Rows","section":"Adding Rows","route":"demo-walkthrough/adding-rows","fragment":"adding-rows","content":"In the demo app, we only allow you to add children to Department rows. We could add rows to any SmartNgRX row, but we've kept the demo simple."},{"breadcrumbs":["Demo Walkthrough","Adding Rows"],"pageType":"guide","title":"Adding Rows","section":"Adding Rows","route":"demo-walkthrough/adding-rows","fragment":"adding-rows","content":"We kick off the add process in our template file by calling addChild() specifying the current node and the type of child we want to add. Your code may only need to pass the current node. This will always be the parent of the new row."},{"breadcrumbs":["Demo Walkthrough","Adding Rows"],"pageType":"guide","title":"Adding Rows","section":"Adding Rows","route":"demo-walkthrough/adding-rows","fragment":"adding-rows","content":"Since this is a new row, we set the editingContent field to a default string that the end user can edit. More work is done in our TreeComponentService.addChild() method that determines if the node needs to be expanded and adds the row to our state (but does not send it to the server). The remainder of the code in the tree.component.ts file is to keep track of what we are doing in the view so that repaints don't disrupt the user's experience."},{"breadcrumbs":["Demo Walkthrough","Adding Rows"],"pageType":"guide","title":"Adding Rows","section":"Adding Rows","route":"demo-walkthrough/adding-rows","fragment":"adding-rows","content":"All the child arrays in SmartNgRX are of type SmartArray. We've typed the array as a SmartArray so we can access the addToStore(), getIdAtIndex(), and removeFromStore() methods."},{"breadcrumbs":["Demo Walkthrough","Adding Rows"],"pageType":"guide","title":"Adding Rows","section":"Adding Rows","route":"demo-walkthrough/adding-rows","fragment":"adding-rows","content":"Similar to the edit process, ESC calls cancelEdit() and ENTER calls saveNode(). cancelEdit() just sets things back to the way they were including removing the new node from the store."},{"breadcrumbs":["Demo Walkthrough","Adding Rows"],"pageType":"guide","title":"Adding Rows","section":"Adding Rows","route":"demo-walkthrough/adding-rows","fragment":"adding-rows","content":"saveNode() is also similar. But now you know why we have fields mentioning adding. Under the hood, SmartNgRX knows this is a row that needs to be added and ends up calling your Effects Service method to make that happen."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Create (Add) a Row"],"pageType":"guide","title":"Create (Add) a Row","section":"Create (Add) a Row","route":"using-smart-ng-rx/crud-support/create","fragment":"create-add-a-row","content":"By now, you should be familiar with the structure of SmartNgRX rows. A row can have zero or more children. The children are represented by an ArrayProxy object. To add a child row, you need to first call the ArrayProxy's addToStore method, which you can access from the SmartArray interface, passing it a dummy row you want to add, including a unique ID. This will add the row to the store and the ID to the array."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Create (Add) a Row"],"pageType":"guide","title":"Create (Add) a Row","section":"Create (Add) a Row","route":"using-smart-ng-rx/crud-support/create","fragment":"create-add-a-row","content":"Sample code from the demo app:"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Create (Add) a Row"],"pageType":"guide","title":"Create (Add) a Row","section":"Create (Add) a Row","route":"using-smart-ng-rx/crud-support/create","fragment":"create-add-a-row","content":"At this point, the row is in the store, and you can edit it like you would edit an already existing row. The only difference is that the row is not yet on the server."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Create (Add) a Row"],"pageType":"guide","title":"Create (Add) a Row","section":"Create (Add) a Row","route":"using-smart-ng-rx/crud-support/create","fragment":"create-add-a-row","content":"To save the row to the server, you update the row in the same way you would update any other row. The system is smart enough to know that the row is new and will ultimately call the add method in the corresponding EffectService."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Create (Add) a Row"],"pageType":"guide","title":"Create (Add) a Row","section":"Create (Add) a Row","route":"using-smart-ng-rx/crud-support/create","fragment":"create-add-a-row","content":"To remove a row that has not been saved to the server yet, you would call the ArrayProxy's removeFromStore method. This will remove the row from the store and the ID from the array."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Create (Add) a Row"],"pageType":"guide","title":"Create (Add) a Row","section":"Storing to the Server","route":"using-smart-ng-rx/crud-support/create","fragment":"storing-to-the-server","content":"Once again, SmartNgRX ends up calling your EffectService class to store the data to the server."},{"breadcrumbs":["Public API","Public API","actionFactory"],"pageType":"api","title":"actionFactory","section":"","route":"public-api/functions/public-api/actionFactory","content":"This creates all the Actions for a given source. You would only need to call this if you needed to directly dispatch one of these actions from your own code. They are used internally and are only exposed for convenience."},{"breadcrumbs":["Public API","Public API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Returns","route":"public-api/functions/public-api/actionFactory","fragment":"returns","content":"-"},{"breadcrumbs":["Public API","Public API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Returns","route":"public-api/functions/public-api/actionFactory","fragment":"returns","content":"The ActionGroup for the source provided"},{"breadcrumbs":["Public API","Public API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Parameters","route":"public-api/functions/public-api/actionFactory","fragment":"parameters","content":"@param feature the feature this action is for"},{"breadcrumbs":["Public API","Public API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Parameters","route":"public-api/functions/public-api/actionFactory","fragment":"parameters","content":"@param entity the entity within the feature this action is for"},{"breadcrumbs":["Public API","Public API","castTo"],"pageType":"api","title":"castTo","section":"","route":"public-api/functions/public-api/castTo","content":"Casts a value to a given type. This is instead of using:"},{"breadcrumbs":["Public API","Public API","castTo"],"pageType":"api","title":"castTo","section":"Returns","route":"public-api/functions/public-api/castTo","fragment":"returns","content":"-"},{"breadcrumbs":["Public API","Public API","castTo"],"pageType":"api","title":"castTo","section":"Returns","route":"public-api/functions/public-api/castTo","fragment":"returns","content":"the value cast as T"},{"breadcrumbs":["Public API","Public API","castTo"],"pageType":"api","title":"castTo","section":"Parameters","route":"public-api/functions/public-api/castTo","fragment":"parameters","content":"@param value the value to cast"},{"breadcrumbs":["Public API","Public API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"","route":"public-api/functions/public-api/provideSmartNgRX","content":"This provides and all the common SmartNgRX providers."},{"breadcrumbs":["Public API","Public API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Returns","route":"public-api/functions/public-api/provideSmartNgRX","fragment":"returns","content":"-"},{"breadcrumbs":["Public API","Public API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Returns","route":"public-api/functions/public-api/provideSmartNgRX","fragment":"returns","content":"EnvironmentProviders that will get used to provide the common providers to the root of the application."},{"breadcrumbs":["Public API","Public API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Returns","route":"public-api/functions/public-api/provideSmartNgRX","fragment":"returns","content":"This must be called, even if you have no options to provide, for SmartNgRX to work."},{"breadcrumbs":["Public API","Public API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Parameters","route":"public-api/functions/public-api/provideSmartNgRX","fragment":"parameters","content":"@param config the configuration for the mark and delete functionality"},{"breadcrumbs":["Internal API","Internal API","actionFactory"],"pageType":"api","title":"actionFactory","section":"","route":"internal-api/functions/internal-api/actionFactory","content":"This creates all the Actions for a given source. You would only need to call this if you needed to directly dispatch one of these actions from your own code. They are used internally and are only exposed for convenience."},{"breadcrumbs":["Internal API","Internal API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Returns","route":"internal-api/functions/internal-api/actionFactory","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Returns","route":"internal-api/functions/internal-api/actionFactory","fragment":"returns","content":"The ActionGroup for the source provided"},{"breadcrumbs":["Internal API","Internal API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Parameters","route":"internal-api/functions/internal-api/actionFactory","fragment":"parameters","content":"@param feature the feature this action is for"},{"breadcrumbs":["Internal API","Internal API","actionFactory"],"pageType":"api","title":"actionFactory","section":"Parameters","route":"internal-api/functions/internal-api/actionFactory","fragment":"parameters","content":"@param entity the entity within the feature this action is for"},{"breadcrumbs":["Internal API","Internal API","castTo"],"pageType":"api","title":"castTo","section":"","route":"internal-api/functions/internal-api/castTo","content":"Casts a value to a given type. This is instead of using:"},{"breadcrumbs":["Internal API","Internal API","castTo"],"pageType":"api","title":"castTo","section":"Returns","route":"internal-api/functions/internal-api/castTo","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","castTo"],"pageType":"api","title":"castTo","section":"Returns","route":"internal-api/functions/internal-api/castTo","fragment":"returns","content":"the value cast as T"},{"breadcrumbs":["Internal API","Internal API","castTo"],"pageType":"api","title":"castTo","section":"Parameters","route":"internal-api/functions/internal-api/castTo","fragment":"parameters","content":"@param value the value to cast"},{"breadcrumbs":["Internal API","Internal API","effectsFactory"],"pageType":"api","title":"effectsFactory","section":"","route":"internal-api/functions/internal-api/effectsFactory","content":"The effects factory creates a new set of effects for the Action source provided and calls the service represented by the InjectionToken provided."},{"breadcrumbs":["Internal API","Internal API","effectsFactory"],"pageType":"api","title":"effectsFactory","section":"Returns","route":"internal-api/functions/internal-api/effectsFactory","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","effectsFactory"],"pageType":"api","title":"effectsFactory","section":"Returns","route":"internal-api/functions/internal-api/effectsFactory","fragment":"returns","content":"The NgRX effects for the source provided"},{"breadcrumbs":["Internal API","Internal API","effectsFactory"],"pageType":"api","title":"effectsFactory","section":"Parameters","route":"internal-api/functions/internal-api/effectsFactory","fragment":"parameters","content":"@param feature the feature name this effect is being run for"},{"breadcrumbs":["Internal API","Internal API","effectsFactory"],"pageType":"api","title":"effectsFactory","section":"Parameters","route":"internal-api/functions/internal-api/effectsFactory","fragment":"parameters","content":"@param effectsServiceToken The token for the service that the resulting effect will call."},{"breadcrumbs":["Internal API","Internal API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"","route":"internal-api/functions/internal-api/provideSmartNgRX","content":"This provides and all the common SmartNgRX providers."},{"breadcrumbs":["Internal API","Internal API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Returns","route":"internal-api/functions/internal-api/provideSmartNgRX","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Returns","route":"internal-api/functions/internal-api/provideSmartNgRX","fragment":"returns","content":"EnvironmentProviders that will get used to provide the common providers to the root of the application."},{"breadcrumbs":["Internal API","Internal API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Returns","route":"internal-api/functions/internal-api/provideSmartNgRX","fragment":"returns","content":"This must be called, even if you have no options to provide, for SmartNgRX to work."},{"breadcrumbs":["Internal API","Internal API","provideSmartNgRX"],"pageType":"api","title":"provideSmartNgRX","section":"Parameters","route":"internal-api/functions/internal-api/provideSmartNgRX","fragment":"parameters","content":"@param config the configuration for the mark and delete functionality"},{"breadcrumbs":["Internal API","Internal API","provideWatchInitialRowEffect"],"pageType":"api","title":"provideWatchInitialRowEffect","section":"","route":"internal-api/functions/internal-api/provideWatchInitialRowEffect","content":"Adds the watchInitialRow effect to the effect if the entity is an initial row"},{"breadcrumbs":["Internal API","Internal API","provideWatchInitialRowEffect"],"pageType":"api","title":"provideWatchInitialRowEffect","section":"Parameters","route":"internal-api/functions/internal-api/provideWatchInitialRowEffect","fragment":"parameters","content":"@param entityDefinition The entity definition to check"},{"breadcrumbs":["Internal API","Internal API","provideWatchInitialRowEffect"],"pageType":"api","title":"provideWatchInitialRowEffect","section":"Parameters","route":"internal-api/functions/internal-api/provideWatchInitialRowEffect","fragment":"parameters","content":"@param effects The effects to add the watchInitialRow effect to"},{"breadcrumbs":["Internal API","Internal API","provideWatchInitialRowEffect"],"pageType":"api","title":"provideWatchInitialRowEffect","section":"Parameters","route":"internal-api/functions/internal-api/provideWatchInitialRowEffect","fragment":"parameters","content":"@param featureName The feature name"},{"breadcrumbs":["Internal API","Internal API","provideWatchInitialRowEffect"],"pageType":"api","title":"provideWatchInitialRowEffect","section":"Parameters","route":"internal-api/functions/internal-api/provideWatchInitialRowEffect","fragment":"parameters","content":"@param entityName The entity name"},{"breadcrumbs":["Internal API","Internal API","reducerFactory"],"pageType":"api","title":"reducerFactory","section":"","route":"internal-api/functions/internal-api/reducerFactory","content":"This creates a reducer for the give source. It is used internally and documented here for future contributions. Application code should never need to use this function."},{"breadcrumbs":["Internal API","Internal API","reducerFactory"],"pageType":"api","title":"reducerFactory","section":"Returns","route":"internal-api/functions/internal-api/reducerFactory","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","reducerFactory"],"pageType":"api","title":"reducerFactory","section":"Returns","route":"internal-api/functions/internal-api/reducerFactory","fragment":"returns","content":"a new reducer for the source provided"},{"breadcrumbs":["Internal API","Internal API","reducerFactory"],"pageType":"api","title":"reducerFactory","section":"Parameters","route":"internal-api/functions/internal-api/reducerFactory","fragment":"parameters","content":"@param feature The feature name for this reducer"},{"breadcrumbs":["Internal API","Internal API","reducerFactory"],"pageType":"api","title":"reducerFactory","section":"Parameters","route":"internal-api/functions/internal-api/reducerFactory","fragment":"parameters","content":"@param entity The entity name (source) for this reducer"},{"breadcrumbs":["Internal API","Internal API","arrayProxyClassGet"],"pageType":"api","title":"arrayProxyClassGet","section":"","route":"internal-api/functions/internal-api/arrayProxyClassGet","content":"Implementation of the get method for the ArrayProxy class."},{"breadcrumbs":["Internal API","Internal API","arrayProxyClassGet"],"pageType":"api","title":"arrayProxyClassGet","section":"Returns","route":"internal-api/functions/internal-api/arrayProxyClassGet","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","arrayProxyClassGet"],"pageType":"api","title":"arrayProxyClassGet","section":"Returns","route":"internal-api/functions/internal-api/arrayProxyClassGet","fragment":"returns","content":"The value of the property."},{"breadcrumbs":["Internal API","Internal API","arrayProxyClassGet"],"pageType":"api","title":"arrayProxyClassGet","section":"Parameters","route":"internal-api/functions/internal-api/arrayProxyClassGet","fragment":"parameters","content":"@param target The target of the get method which is the ArrayProxy class itself."},{"breadcrumbs":["Internal API","Internal API","arrayProxyClassGet"],"pageType":"api","title":"arrayProxyClassGet","section":"Parameters","route":"internal-api/functions/internal-api/arrayProxyClassGet","fragment":"parameters","content":"@param prop prop The property to get from the target."},{"breadcrumbs":["Internal API","Internal API","convertChildrenToArrayProxy"],"pageType":"api","title":"convertChildrenToArrayProxy","section":"","route":"internal-api/functions/internal-api/convertChildrenToArrayProxy","content":"wraps the array in a proxy so we can return a row for the ID"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToArrayProxy"],"pageType":"api","title":"convertChildrenToArrayProxy","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToArrayProxy","fragment":"parameters","content":"@param parentEntity the entity that holds the parent rows"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToArrayProxy"],"pageType":"api","title":"convertChildrenToArrayProxy","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToArrayProxy","fragment":"parameters","content":"@param parentFieldName the field name that holds the child ids"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToArrayProxy"],"pageType":"api","title":"convertChildrenToArrayProxy","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToArrayProxy","fragment":"parameters","content":"@param child the child entity"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToArrayProxy"],"pageType":"api","title":"convertChildrenToArrayProxy","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToArrayProxy","fragment":"parameters","content":"@param childDefinition the child definition (used by the ArrayProxy)"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToVirtualArray"],"pageType":"api","title":"convertChildrenToVirtualArray","section":"","route":"internal-api/functions/internal-api/convertChildrenToVirtualArray","content":"Converts the child field to a virtual array"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToVirtualArray"],"pageType":"api","title":"convertChildrenToVirtualArray","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToVirtualArray","fragment":"parameters","content":"@param parentFieldName the name of the field in the row to convert"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToVirtualArray"],"pageType":"api","title":"convertChildrenToVirtualArray","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToVirtualArray","fragment":"parameters","content":"@param parentEntity the entity data we are dealing with"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToVirtualArray"],"pageType":"api","title":"convertChildrenToVirtualArray","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToVirtualArray","fragment":"parameters","content":"@param parentFeature the feature this entity belongs to"},{"breadcrumbs":["Internal API","Internal API","convertChildrenToVirtualArray"],"pageType":"api","title":"convertChildrenToVirtualArray","section":"Parameters","route":"internal-api/functions/internal-api/convertChildrenToVirtualArray","fragment":"parameters","content":"@param parentEntityName the name of the entity"},{"breadcrumbs":["Internal API","Internal API","ensureDataLoaded"],"pageType":"api","title":"ensureDataLoaded","section":"","route":"internal-api/functions/internal-api/ensureDataLoaded","content":"Internal function that ensures that the ID is loaded into the store for the entity by dispatching the action if it isn't."},{"breadcrumbs":["Internal API","Internal API","ensureDataLoaded"],"pageType":"api","title":"ensureDataLoaded","section":"Parameters","route":"internal-api/functions/internal-api/ensureDataLoaded","fragment":"parameters","content":"@param entityState The entity to check for the id"},{"breadcrumbs":["Internal API","Internal API","ensureDataLoaded"],"pageType":"api","title":"ensureDataLoaded","section":"Parameters","route":"internal-api/functions/internal-api/ensureDataLoaded","fragment":"parameters","content":"@param id The id to check for"},{"breadcrumbs":["Internal API","Internal API","ensureDataLoaded"],"pageType":"api","title":"ensureDataLoaded","section":"Parameters","route":"internal-api/functions/internal-api/ensureDataLoaded","fragment":"parameters","content":"@param feature The feature this row belongs to"},{"breadcrumbs":["Internal API","Internal API","ensureDataLoaded"],"pageType":"api","title":"ensureDataLoaded","section":"Parameters","route":"internal-api/functions/internal-api/ensureDataLoaded","fragment":"parameters","content":"@param entity The entity in the feature this row belongs to"},{"breadcrumbs":["Internal API","Internal API","ChildDefinition"],"pageType":"api","title":"ChildDefinition","section":"","route":"internal-api/interfaces/internal-api/ChildDefinition","content":"The definition of how to access the child data from a parent entity."},{"breadcrumbs":["Internal API","Internal API","ChildDefinition"],"pageType":"api","title":"ChildDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/ChildDefinition","fragment":"properties","content":"The fieldName we used to register the entity in the provider."},{"breadcrumbs":["Internal API","Internal API","ChildDefinition"],"pageType":"api","title":"ChildDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/ChildDefinition","fragment":"properties","content":"The name of the feature that contains the child data."},{"breadcrumbs":["Internal API","Internal API","ChildDefinition"],"pageType":"api","title":"ChildDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/ChildDefinition","fragment":"properties","content":"The selector to retrieve the child data from the store."},{"breadcrumbs":["Internal API","Internal API","ChildDefinition"],"pageType":"api","title":"ChildDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/ChildDefinition","fragment":"properties","content":"The name of the parent entity The parentFeature and parentEntity allow us to get access to the parent adapter and other things we need to add and delete items from the parent entity"},{"breadcrumbs":["Internal API","Internal API","ChildDefinition"],"pageType":"api","title":"ChildDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/ChildDefinition","fragment":"properties","content":"The feature the parent entity is in"},{"breadcrumbs":["Internal API","Internal API","ChildDefinition"],"pageType":"api","title":"ChildDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/ChildDefinition","fragment":"properties","content":"The name of the field in the parent that contains the child IDs"},{"breadcrumbs":["Internal API","Internal API","bufferIndexes"],"pageType":"api","title":"bufferIndexes","section":"","route":"internal-api/functions/internal-api/bufferIndexes","content":"This is an internal function that is used by the Effects to buffer the loadByIndexes actions coming into an effect so that we can dispatch indexes independently but send all the indexes to the server in a single request."},{"breadcrumbs":["Internal API","Internal API","bufferIndexes"],"pageType":"api","title":"bufferIndexes","section":"","route":"internal-api/functions/internal-api/bufferIndexes","content":"NOTE: bufferAction assumes an array of indexes is passed to the action it is buffering."},{"breadcrumbs":["Internal API","Internal API","bufferIndexes"],"pageType":"api","title":"bufferIndexes","section":"Returns","route":"internal-api/functions/internal-api/bufferIndexes","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","bufferIndexes"],"pageType":"api","title":"bufferIndexes","section":"Returns","route":"internal-api/functions/internal-api/bufferIndexes","fragment":"returns","content":"The buffered indexes."},{"breadcrumbs":["Internal API","Internal API","bufferIndexes"],"pageType":"api","title":"bufferIndexes","section":"Parameters","route":"internal-api/functions/internal-api/bufferIndexes","fragment":"parameters","content":"@param bufferTimeMs The time to buffer the ids before sending them to the server. The default is 1ms which only allow the buffer to last until the thread frees up and is probably all we will ever need."},{"breadcrumbs":["Internal API","Internal API","registerFeatureEffect"],"pageType":"api","title":"registerFeatureEffect","section":"","route":"internal-api/functions/internal-api/registerFeatureEffect","content":"Registers a feature with the feature registry."},{"breadcrumbs":["Internal API","Internal API","registerFeatureEffect"],"pageType":"api","title":"registerFeatureEffect","section":"Returns","route":"internal-api/functions/internal-api/registerFeatureEffect","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","registerFeatureEffect"],"pageType":"api","title":"registerFeatureEffect","section":"Returns","route":"internal-api/functions/internal-api/registerFeatureEffect","fragment":"returns","content":"An effect that will register the feature"},{"breadcrumbs":["Internal API","Internal API","registerFeatureEffect"],"pageType":"api","title":"registerFeatureEffect","section":"Parameters","route":"internal-api/functions/internal-api/registerFeatureEffect","fragment":"parameters","content":"@param feature The feature to register"},{"breadcrumbs":["Internal API","Internal API","registerFeatureEffect"],"pageType":"api","title":"registerFeatureEffect","section":"Parameters","route":"internal-api/functions/internal-api/registerFeatureEffect","fragment":"parameters","content":"@param effectsServiceToken The token to use to get the effect service"},{"breadcrumbs":["Internal API","Internal API","watchInitialRowEffect"],"pageType":"api","title":"watchInitialRowEffect","section":"","route":"internal-api/functions/internal-api/watchInitialRowEffect","content":"This watches the row specified as a top level row so that it can refresh it when it is marked dirty."},{"breadcrumbs":["Internal API","Internal API","watchInitialRowEffect"],"pageType":"api","title":"watchInitialRowEffect","section":"Returns","route":"internal-api/functions/internal-api/watchInitialRowEffect","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","watchInitialRowEffect"],"pageType":"api","title":"watchInitialRowEffect","section":"Returns","route":"internal-api/functions/internal-api/watchInitialRowEffect","fragment":"returns","content":"the effects for this feature/effect"},{"breadcrumbs":["Internal API","Internal API","watchInitialRowEffect"],"pageType":"api","title":"watchInitialRowEffect","section":"Parameters","route":"internal-api/functions/internal-api/watchInitialRowEffect","fragment":"parameters","content":"@param feature the name of the feature this is related to"},{"breadcrumbs":["Internal API","Internal API","watchInitialRowEffect"],"pageType":"api","title":"watchInitialRowEffect","section":"Parameters","route":"internal-api/functions/internal-api/watchInitialRowEffect","fragment":"parameters","content":"@param entity the name of the entity this is related to"},{"breadcrumbs":["Internal API","Internal API","processMarkAndDelete"],"pageType":"api","title":"processMarkAndDelete","section":"","route":"internal-api/functions/internal-api/processMarkAndDelete","content":"Goes through all the rows that have been registered and marks them as dirty or garbage collects them as needed."},{"breadcrumbs":["Internal API","Internal API","processMarkAndDelete"],"pageType":"api","title":"processMarkAndDelete","section":"Parameters","route":"internal-api/functions/internal-api/processMarkAndDelete","fragment":"parameters","content":"@param featureKey the key we are looking at"},{"breadcrumbs":["Internal API","Internal API","processMarkAndDelete"],"pageType":"api","title":"processMarkAndDelete","section":"Parameters","route":"internal-api/functions/internal-api/processMarkAndDelete","fragment":"parameters","content":"@param entity the entity we are looking at"},{"breadcrumbs":["Internal API","Internal API","processMarkAndDelete"],"pageType":"api","title":"processMarkAndDelete","section":"Parameters","route":"internal-api/functions/internal-api/processMarkAndDelete","fragment":"parameters","content":"@param garbageCollectRowIds items that need to be garbage collected"},{"breadcrumbs":["Internal API","Internal API","processMarkAndDelete"],"pageType":"api","title":"processMarkAndDelete","section":"Parameters","route":"internal-api/functions/internal-api/processMarkAndDelete","fragment":"parameters","content":"@param markDirtyRowIds items that need to be marked dirty"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Virtual IDs"],"pageType":"guide","title":"Virtual IDs","section":"Introduction","route":"using-smart-ng-rx/crud-support/partial-arrays","fragment":"introduction","content":"As we already discussed in our section on Child Fields, a child field is a field that is defined on a component that points to other rows in another entity. It does this either by using a list of ids that we then use to fetch the rows from the entity. If we don't yet have the rows in the store, Smart NgRX will automatically fetch them for you."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Virtual IDs"],"pageType":"guide","title":"Virtual IDs","section":"Introduction","route":"using-smart-ng-rx/crud-support/partial-arrays","fragment":"introduction","content":"One type of child field is the PartialArrayDefinition. This is used when you have a long list of children, but you don't want to fetch all the IDs at once. Instead, you can return a PartialArrayDefinition from your EffectService. This tells SmartNgRX that you are using a virtual array and will provide the IDs in chunks as you request them."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Virtual IDs"],"pageType":"guide","title":"Virtual IDs","section":"Introduction","route":"using-smart-ng-rx/crud-support/partial-arrays","fragment":"introduction","content":"But, how do you retrieve the additional IDs when you need them?"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Virtual IDs"],"pageType":"guide","title":"Virtual IDs","section":"Introduction","route":"using-smart-ng-rx/crud-support/partial-arrays","fragment":"introduction","content":"For this, there is a method in the EffectService called loadByIndexes. This method takes a parentId, a childField, a startIndex and a length. This gives you the information you need to retrieve the next chunk of IDs."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Virtual IDs"],"pageType":"guide","title":"Virtual IDs","section":"Introduction","route":"using-smart-ng-rx/crud-support/partial-arrays","fragment":"introduction","content":"The method should then return an observable of a PartialArrayDefinition. This PartialArrayDefinition will contain the indexes field which is an array of the IDs that were requested and the length property is the total length of the array that will eventually be in the child field."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Virtual IDs"],"pageType":"guide","title":"Virtual IDs","section":"Sample Code","route":"using-smart-ng-rx/crud-support/partial-arrays","fragment":"sample-code","content":"I realize that doesn't show you much because most of the work is done in the database. So, here's the Prisma, server side code, that does most of the work."},{"breadcrumbs":["Public API","Public API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"","route":"public-api/functions/public-api/createSmartSelector","content":"Wraps the specified child array(s) with a Proxy that will request the items from the server as they are accessed (virtual data) rather than loading everything from the array up front."},{"breadcrumbs":["Public API","Public API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"","route":"public-api/functions/public-api/createSmartSelector","content":"In order to access the array without triggering a request, as is needed for a tree control that uses virtual data, the proxy adds support for a rawArray property that returns the original array before it was proxied."},{"breadcrumbs":["Public API","Public API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Returns","route":"public-api/functions/public-api/createSmartSelector","fragment":"returns","content":"-"},{"breadcrumbs":["Public API","Public API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Returns","route":"public-api/functions/public-api/createSmartSelector","fragment":"returns","content":"Memozied selector that returns the selected data."},{"breadcrumbs":["Public API","Public API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Parameters","route":"public-api/functions/public-api/createSmartSelector","fragment":"parameters","content":"@param parentSelector The selector to retrieve the parent data from the store."},{"breadcrumbs":["Public API","Public API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Parameters","route":"public-api/functions/public-api/createSmartSelector","fragment":"parameters","content":"@param children The array of ChildDefinition objects that define the child data to retrieve."},{"breadcrumbs":["Internal API","Internal API","defaultRows"],"pageType":"api","title":"defaultRows","section":"","route":"internal-api/functions/internal-api/defaultRows","content":"Filters out the rows we already have and provides a default row for the ones we don't have."},{"breadcrumbs":["Internal API","Internal API","defaultRows"],"pageType":"api","title":"defaultRows","section":"Returns","route":"internal-api/functions/internal-api/defaultRows","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","defaultRows"],"pageType":"api","title":"defaultRows","section":"Returns","route":"internal-api/functions/internal-api/defaultRows","fragment":"returns","content":"The default rows for the ids that are missing"},{"breadcrumbs":["Internal API","Internal API","defaultRows"],"pageType":"api","title":"defaultRows","section":"Parameters","route":"internal-api/functions/internal-api/defaultRows","fragment":"parameters","content":"@param ids The ids to check"},{"breadcrumbs":["Internal API","Internal API","defaultRows"],"pageType":"api","title":"defaultRows","section":"Parameters","route":"internal-api/functions/internal-api/defaultRows","fragment":"parameters","content":"@param entities The Dictionary of rows"},{"breadcrumbs":["Internal API","Internal API","defaultRows"],"pageType":"api","title":"defaultRows","section":"Parameters","route":"internal-api/functions/internal-api/defaultRows","fragment":"parameters","content":"@param defaultRow The defaultRow function to use to create a new row for the ids that are missing."},{"breadcrumbs":["Internal API","Internal API","entityDefinitionCache"],"pageType":"api","title":"entityDefinitionCache","section":"","route":"internal-api/functions/internal-api/entityDefinitionCache","content":"This registers the adapter for the entity definition."},{"breadcrumbs":["Internal API","Internal API","entityDefinitionCache"],"pageType":"api","title":"entityDefinitionCache","section":"Returns","route":"internal-api/functions/internal-api/entityDefinitionCache","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","entityDefinitionCache"],"pageType":"api","title":"entityDefinitionCache","section":"Returns","route":"internal-api/functions/internal-api/entityDefinitionCache","fragment":"returns","content":"the entity definition"},{"breadcrumbs":["Internal API","Internal API","entityDefinitionCache"],"pageType":"api","title":"entityDefinitionCache","section":"Parameters","route":"internal-api/functions/internal-api/entityDefinitionCache","fragment":"parameters","content":"@param featureName the feature the entity belongs to"},{"breadcrumbs":["Internal API","Internal API","entityDefinitionCache"],"pageType":"api","title":"entityDefinitionCache","section":"Parameters","route":"internal-api/functions/internal-api/entityDefinitionCache","fragment":"parameters","content":"@param entityName the entity name to register the adapter for"},{"breadcrumbs":["Internal API","Internal API","entityDefinitionCache"],"pageType":"api","title":"entityDefinitionCache","section":"Parameters","route":"internal-api/functions/internal-api/entityDefinitionCache","fragment":"parameters","content":"@param entityDefinition the SmartEntityDefinition to register the adapter for"},{"breadcrumbs":["Internal API","Internal API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"","route":"internal-api/functions/internal-api/createSmartSelector","content":"Wraps the specified child array(s) with a Proxy that will request the items from the server as they are accessed (virtual data) rather than loading everything from the array up front."},{"breadcrumbs":["Internal API","Internal API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"","route":"internal-api/functions/internal-api/createSmartSelector","content":"In order to access the array without triggering a request, as is needed for a tree control that uses virtual data, the proxy adds support for a rawArray property that returns the original array before it was proxied."},{"breadcrumbs":["Internal API","Internal API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Returns","route":"internal-api/functions/internal-api/createSmartSelector","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Returns","route":"internal-api/functions/internal-api/createSmartSelector","fragment":"returns","content":"Memozied selector that returns the selected data."},{"breadcrumbs":["Internal API","Internal API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Parameters","route":"internal-api/functions/internal-api/createSmartSelector","fragment":"parameters","content":"@param parentSelector The selector to retrieve the parent data from the store."},{"breadcrumbs":["Internal API","Internal API","createSmartSelector"],"pageType":"api","title":"createSmartSelector","section":"Parameters","route":"internal-api/functions/internal-api/createSmartSelector","fragment":"parameters","content":"@param children The array of ChildDefinition objects that define the child data to retrieve."},{"breadcrumbs":["Internal API","Internal API","getArrayItem"],"pageType":"api","title":"getArrayItem","section":"","route":"internal-api/functions/internal-api/getArrayItem","content":"Internal function used by createInnerSmartSelector use to load the data if it doesn't exist in the store and return a placeholder row if it doesn't exist."},{"breadcrumbs":["Internal API","Internal API","getArrayItem"],"pageType":"api","title":"getArrayItem","section":"Returns","route":"internal-api/functions/internal-api/getArrayItem","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","getArrayItem"],"pageType":"api","title":"getArrayItem","section":"Returns","route":"internal-api/functions/internal-api/getArrayItem","fragment":"returns","content":"real or placeholder row"},{"breadcrumbs":["Internal API","Internal API","getArrayItem"],"pageType":"api","title":"getArrayItem","section":"Parameters","route":"internal-api/functions/internal-api/getArrayItem","fragment":"parameters","content":"@param entityState The EntityState to check for the id"},{"breadcrumbs":["Internal API","Internal API","getArrayItem"],"pageType":"api","title":"getArrayItem","section":"Parameters","route":"internal-api/functions/internal-api/getArrayItem","fragment":"parameters","content":"@param id The id to check"},{"breadcrumbs":["Internal API","Internal API","getArrayItem"],"pageType":"api","title":"getArrayItem","section":"Parameters","route":"internal-api/functions/internal-api/getArrayItem","fragment":"parameters","content":"@param childDefinition The ChildDefinition of the child object that lets us retrieve the feature and entity names"},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","content":"this is the interface used to initialize the mark and delete functionality at the global or feature level"},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"Properties","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","fragment":"properties","content":"If this is set to true, than any time a row is marked as dirty the system will retrieve a new value from the server. Otherwise, it will just reset the dirty timeout internally."},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"Properties","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","fragment":"properties","content":"The time in milliseconds to wait before marking a row as dirty. When a row is marked as dirty, and it is being used it will re-retrieve the row if markDirtyFetchesNew is true. If markDirtyFetchesNew is false, it will just reset the isDirty flag in the row. his is how we know the row is still in use, or not."},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"Properties","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","fragment":"properties","content":"If markDirtyTime is set to -1, then the row will never be marked as dirty, and removeTime will be ignored. If you manually mark a row as dirty (coming soon), the system will assume you want to refetch the row from the server, regardless of what you set here. This allows us to use the same mechanism to refresh data for automated refreshes and manual refreshes in response to websocket notification."},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"Properties","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","fragment":"properties","content":"If markAndDelete is not set, it will default to 15 minutes."},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"Properties","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","fragment":"properties","content":"The time in milliseconds to wait before removing a row from the store. removeTime must be greater than markDirtyTime. If it is not, it will automatically set to twice markDirtyTime."},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"Properties","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","fragment":"properties","content":"The time in milliseconds that determines how often the system looks at the rows to see if they need to be marked dirty or removed. If this is not set, it will default to one minute."},{"breadcrumbs":["Internal API","Internal API","MarkAndDeleteInit"],"pageType":"api","title":"MarkAndDeleteInit","section":"Properties","route":"internal-api/interfaces/internal-api/MarkAndDeleteInit","fragment":"properties","content":"runInterval is only recognized at the global level. If you want to change it, you must change it at the global level."},{"breadcrumbs":["Public API","Public API","assert"],"pageType":"api","title":"assert","section":"","route":"public-api/functions/public-api/assert","content":"This is an internal function documented here for reference by people doing development on this library."},{"breadcrumbs":["Public API","Public API","assert"],"pageType":"api","title":"assert","section":"","route":"public-api/functions/public-api/assert","content":"Asserts that a value is true. You should only use one condition at a time. If you are working with a value that should always be true, this is easier than putting if(condition) around what you are going to use the condition for."},{"breadcrumbs":["Public API","Public API","assert"],"pageType":"api","title":"assert","section":"Parameters","route":"public-api/functions/public-api/assert","fragment":"parameters","content":"@param condition condition to check"},{"breadcrumbs":["Public API","Public API","assert"],"pageType":"api","title":"assert","section":"Parameters","route":"public-api/functions/public-api/assert","fragment":"parameters","content":"@param context description of what we checked. If you put a GUID in the string it will make it easier to find the error in the source code."},{"breadcrumbs":["Public API","Public API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"","route":"public-api/functions/public-api/provideSmartFeatureEntities","content":"This provides all the NgRX parts for a given feature and entity"},{"breadcrumbs":["Public API","Public API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"","route":"public-api/functions/public-api/provideSmartFeatureEntities","content":"Note: the generic parameters are implied so they are not documented here."},{"breadcrumbs":["Public API","Public API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Returns","route":"public-api/functions/public-api/provideSmartFeatureEntities","fragment":"returns","content":"-"},{"breadcrumbs":["Public API","Public API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Returns","route":"public-api/functions/public-api/provideSmartFeatureEntities","fragment":"returns","content":"EnvironmentProviders that will get used to provide the NgRX reducer and effect for this slice."},{"breadcrumbs":["Public API","Public API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Parameters","route":"public-api/functions/public-api/provideSmartFeatureEntities","fragment":"parameters","content":"@param featureName This is the name you would use for forFeature() in standard NgRX code."},{"breadcrumbs":["Public API","Public API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Parameters","route":"public-api/functions/public-api/provideSmartFeatureEntities","fragment":"parameters","content":"@param entityDefinitions An array of entity definitions."},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"","route":"public-api/interfaces/public-api/SmartArray","content":"Interface that allows us to access the rawArray field and the addToStore and removeFromStore methods on a SmartArray"},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"public-api/interfaces/public-api/SmartArray","fragment":"methods","content":"Adds a new row to the store"},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"public-api/interfaces/public-api/SmartArray","fragment":"methods","content":"@param newRow The new row to add"},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"public-api/interfaces/public-api/SmartArray","fragment":"methods","content":"@param thisRow The parent row"},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"public-api/interfaces/public-api/SmartArray","fragment":"methods","content":"The array of IDs proxied by the ArrayProxy"},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"public-api/interfaces/public-api/SmartArray","fragment":"methods","content":"Removes a row from the store"},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"public-api/interfaces/public-api/SmartArray","fragment":"methods","content":"@param row"},{"breadcrumbs":["Public API","Public API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"public-api/interfaces/public-api/SmartArray","fragment":"methods","content":"@param parent"},{"breadcrumbs":["Internal API","Internal API","replaceIdInFeatureParents"],"pageType":"api","title":"replaceIdInFeatureParents","section":"","route":"internal-api/functions/internal-api/replaceIdInFeatureParents","content":"Used by delete to remove the id from the parent's child field and return the list of parentIds that were affected."},{"breadcrumbs":["Internal API","Internal API","replaceIdInFeatureParents"],"pageType":"api","title":"replaceIdInFeatureParents","section":"Returns","route":"internal-api/functions/internal-api/replaceIdInFeatureParents","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","replaceIdInFeatureParents"],"pageType":"api","title":"replaceIdInFeatureParents","section":"Returns","route":"internal-api/functions/internal-api/replaceIdInFeatureParents","fragment":"returns","content":"the parent ids that are affected by the delete"},{"breadcrumbs":["Internal API","Internal API","replaceIdInFeatureParents"],"pageType":"api","title":"replaceIdInFeatureParents","section":"Parameters","route":"internal-api/functions/internal-api/replaceIdInFeatureParents","fragment":"parameters","content":"@param entities the entities to look in"},{"breadcrumbs":["Internal API","Internal API","replaceIdInFeatureParents"],"pageType":"api","title":"replaceIdInFeatureParents","section":"Parameters","route":"internal-api/functions/internal-api/replaceIdInFeatureParents","fragment":"parameters","content":"@param childDefinition the ChildDefinition"},{"breadcrumbs":["Internal API","Internal API","replaceIdInFeatureParents"],"pageType":"api","title":"replaceIdInFeatureParents","section":"Parameters","route":"internal-api/functions/internal-api/replaceIdInFeatureParents","fragment":"parameters","content":"@param parentService the parent service that we will call to report items from parent"},{"breadcrumbs":["Internal API","Internal API","replaceIdInFeatureParents"],"pageType":"api","title":"replaceIdInFeatureParents","section":"Parameters","route":"internal-api/functions/internal-api/replaceIdInFeatureParents","fragment":"parameters","content":"@param ids the oldId and the newId to replace it with"},{"breadcrumbs":["Internal API","Internal API","assert"],"pageType":"api","title":"assert","section":"","route":"internal-api/functions/internal-api/assert","content":"This is an internal function documented here for reference by people doing development on this library."},{"breadcrumbs":["Internal API","Internal API","assert"],"pageType":"api","title":"assert","section":"","route":"internal-api/functions/internal-api/assert","content":"Asserts that a value is true. You should only use one condition at a time. If you are working with a value that should always be true, this is easier than putting if(condition) around what you are going to use the condition for."},{"breadcrumbs":["Internal API","Internal API","assert"],"pageType":"api","title":"assert","section":"Parameters","route":"internal-api/functions/internal-api/assert","fragment":"parameters","content":"@param condition condition to check"},{"breadcrumbs":["Internal API","Internal API","assert"],"pageType":"api","title":"assert","section":"Parameters","route":"internal-api/functions/internal-api/assert","fragment":"parameters","content":"@param context description of what we checked. If you put a GUID in the string it will make it easier to find the error in the source code."},{"breadcrumbs":["Internal API","Internal API","mergeRowsWithEntities"],"pageType":"api","title":"mergeRowsWithEntities","section":"","route":"internal-api/functions/internal-api/mergeRowsWithEntities","content":"Merges rows with existing entities to preserve virtual array data"},{"breadcrumbs":["Internal API","Internal API","mergeRowsWithEntities"],"pageType":"api","title":"mergeRowsWithEntities","section":"Returns","route":"internal-api/functions/internal-api/mergeRowsWithEntities","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","mergeRowsWithEntities"],"pageType":"api","title":"mergeRowsWithEntities","section":"Returns","route":"internal-api/functions/internal-api/mergeRowsWithEntities","fragment":"returns","content":"merged rows"},{"breadcrumbs":["Internal API","Internal API","mergeRowsWithEntities"],"pageType":"api","title":"mergeRowsWithEntities","section":"Parameters","route":"internal-api/functions/internal-api/mergeRowsWithEntities","fragment":"parameters","content":"@param feature the name of the feature the rows represent"},{"breadcrumbs":["Internal API","Internal API","mergeRowsWithEntities"],"pageType":"api","title":"mergeRowsWithEntities","section":"Parameters","route":"internal-api/functions/internal-api/mergeRowsWithEntities","fragment":"parameters","content":"@param entity the name of the entity the rows represent"},{"breadcrumbs":["Internal API","Internal API","mergeRowsWithEntities"],"pageType":"api","title":"mergeRowsWithEntities","section":"Parameters","route":"internal-api/functions/internal-api/mergeRowsWithEntities","fragment":"parameters","content":"@param rows rows to merge"},{"breadcrumbs":["Internal API","Internal API","mergeRowsWithEntities"],"pageType":"api","title":"mergeRowsWithEntities","section":"Parameters","route":"internal-api/functions/internal-api/mergeRowsWithEntities","fragment":"parameters","content":"@param entities existing entities to merge with"},{"breadcrumbs":["Internal API","Internal API","mergeNewRowWithExisting"],"pageType":"api","title":"mergeNewRowWithExisting","section":"","route":"internal-api/functions/internal-api/mergeNewRowWithExisting","content":"Merges the new row with the existing row keeping the virtual array data in place if it is in the existing row."},{"breadcrumbs":["Internal API","Internal API","mergeNewRowWithExisting"],"pageType":"api","title":"mergeNewRowWithExisting","section":"Returns","route":"internal-api/functions/internal-api/mergeNewRowWithExisting","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","mergeNewRowWithExisting"],"pageType":"api","title":"mergeNewRowWithExisting","section":"Returns","route":"internal-api/functions/internal-api/mergeNewRowWithExisting","fragment":"returns","content":"merged row"},{"breadcrumbs":["Internal API","Internal API","mergeNewRowWithExisting"],"pageType":"api","title":"mergeNewRowWithExisting","section":"Parameters","route":"internal-api/functions/internal-api/mergeNewRowWithExisting","fragment":"parameters","content":"@param feature the name of the feature the row represent"},{"breadcrumbs":["Internal API","Internal API","mergeNewRowWithExisting"],"pageType":"api","title":"mergeNewRowWithExisting","section":"Parameters","route":"internal-api/functions/internal-api/mergeNewRowWithExisting","fragment":"parameters","content":"@param entity the name of the entity the row represent"},{"breadcrumbs":["Internal API","Internal API","mergeNewRowWithExisting"],"pageType":"api","title":"mergeNewRowWithExisting","section":"Parameters","route":"internal-api/functions/internal-api/mergeNewRowWithExisting","fragment":"parameters","content":"@param newRow new row to merge"},{"breadcrumbs":["Internal API","Internal API","mergeNewRowWithExisting"],"pageType":"api","title":"mergeNewRowWithExisting","section":"Parameters","route":"internal-api/functions/internal-api/mergeNewRowWithExisting","fragment":"parameters","content":"@param existingRow existing row to merge with"},{"breadcrumbs":["Internal API","Internal API","mergeVirtualArrays"],"pageType":"api","title":"mergeVirtualArrays","section":"","route":"internal-api/functions/internal-api/mergeVirtualArrays","content":"Merges the new array into the existing array"},{"breadcrumbs":["Internal API","Internal API","mergeVirtualArrays"],"pageType":"api","title":"mergeVirtualArrays","section":"Returns","route":"internal-api/functions/internal-api/mergeVirtualArrays","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","mergeVirtualArrays"],"pageType":"api","title":"mergeVirtualArrays","section":"Returns","route":"internal-api/functions/internal-api/mergeVirtualArrays","fragment":"returns","content":"the merged array"},{"breadcrumbs":["Internal API","Internal API","mergeVirtualArrays"],"pageType":"api","title":"mergeVirtualArrays","section":"Parameters","route":"internal-api/functions/internal-api/mergeVirtualArrays","fragment":"parameters","content":"@param feature the name of the feature the arrays are pointing to"},{"breadcrumbs":["Internal API","Internal API","mergeVirtualArrays"],"pageType":"api","title":"mergeVirtualArrays","section":"Parameters","route":"internal-api/functions/internal-api/mergeVirtualArrays","fragment":"parameters","content":"@param entity the name of the entity the arrays are pointing to"},{"breadcrumbs":["Internal API","Internal API","mergeVirtualArrays"],"pageType":"api","title":"mergeVirtualArrays","section":"Parameters","route":"internal-api/functions/internal-api/mergeVirtualArrays","fragment":"parameters","content":"@param newArray the new array"},{"breadcrumbs":["Internal API","Internal API","mergeVirtualArrays"],"pageType":"api","title":"mergeVirtualArrays","section":"Parameters","route":"internal-api/functions/internal-api/mergeVirtualArrays","fragment":"parameters","content":"@param existingArray the existing array"},{"breadcrumbs":["Internal API","Internal API","delayedRegisterEntity"],"pageType":"api","title":"delayedRegisterEntity","section":"","route":"internal-api/functions/internal-api/delayedRegisterEntity","content":"We can't, necessarily, register an entity as part of the provideSmartFeatureEntities() function because it gets called while the Routes are being registered. This means that the getGlobalMarkAndDeleteInit() function will return an empty object when it should return a full MarkAndDeleteInit object."},{"breadcrumbs":["Internal API","Internal API","delayedRegisterEntity"],"pageType":"api","title":"delayedRegisterEntity","section":"","route":"internal-api/functions/internal-api/delayedRegisterEntity","content":"This function exists to wait until the MarkAndDeleteInit object is fully populated before registering the entity."},{"breadcrumbs":["Internal API","Internal API","delayedRegisterEntity"],"pageType":"api","title":"delayedRegisterEntity","section":"Returns","route":"internal-api/functions/internal-api/delayedRegisterEntity","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","delayedRegisterEntity"],"pageType":"api","title":"delayedRegisterEntity","section":"Returns","route":"internal-api/functions/internal-api/delayedRegisterEntity","fragment":"returns","content":"true if the entity can't be registered yet and false if it has this is so it works with the takeWhile() in the calling code."},{"breadcrumbs":["Internal API","Internal API","delayedRegisterEntity"],"pageType":"api","title":"delayedRegisterEntity","section":"Parameters","route":"internal-api/functions/internal-api/delayedRegisterEntity","fragment":"parameters","content":"@param featureName the feature to register"},{"breadcrumbs":["Internal API","Internal API","delayedRegisterEntity"],"pageType":"api","title":"delayedRegisterEntity","section":"Parameters","route":"internal-api/functions/internal-api/delayedRegisterEntity","fragment":"parameters","content":"@param entityName the entity in the feature to register"},{"breadcrumbs":["Internal API","Internal API","delayedRegisterEntity"],"pageType":"api","title":"delayedRegisterEntity","section":"Parameters","route":"internal-api/functions/internal-api/delayedRegisterEntity","fragment":"parameters","content":"@param entityDefinition the entity definition that was originally passed to provideSmartFeatureEntities()"},{"breadcrumbs":["Internal API","Internal API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"","route":"internal-api/functions/internal-api/provideSmartFeatureEntities","content":"This provides all the NgRX parts for a given feature and entity"},{"breadcrumbs":["Internal API","Internal API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"","route":"internal-api/functions/internal-api/provideSmartFeatureEntities","content":"Note: the generic parameters are implied so they are not documented here."},{"breadcrumbs":["Internal API","Internal API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Returns","route":"internal-api/functions/internal-api/provideSmartFeatureEntities","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Returns","route":"internal-api/functions/internal-api/provideSmartFeatureEntities","fragment":"returns","content":"EnvironmentProviders that will get used to provide the NgRX reducer and effect for this slice."},{"breadcrumbs":["Internal API","Internal API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Parameters","route":"internal-api/functions/internal-api/provideSmartFeatureEntities","fragment":"parameters","content":"@param featureName This is the name you would use for forFeature() in standard NgRX code."},{"breadcrumbs":["Internal API","Internal API","provideSmartFeatureEntities"],"pageType":"api","title":"provideSmartFeatureEntities","section":"Parameters","route":"internal-api/functions/internal-api/provideSmartFeatureEntities","fragment":"parameters","content":"@param entityDefinitions An array of entity definitions."},{"breadcrumbs":["Internal API","Internal API","rowProxy"],"pageType":"api","title":"rowProxy","section":"","route":"internal-api/functions/internal-api/rowProxy","content":"Wraps a row in a proxy that will take care of editing the row and firing off the appropriate actions (via the services) to update the store and the server."},{"breadcrumbs":["Internal API","Internal API","rowProxy"],"pageType":"api","title":"rowProxy","section":"","route":"internal-api/functions/internal-api/rowProxy","content":"Note: this function will attempt to make the keys in the row writeable so if you are relying on NgRX to ensure these are not mutated, you will need to find some other way to do that."},{"breadcrumbs":["Internal API","Internal API","rowProxy"],"pageType":"api","title":"rowProxy","section":"Returns","route":"internal-api/functions/internal-api/rowProxy","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","rowProxy"],"pageType":"api","title":"rowProxy","section":"Returns","route":"internal-api/functions/internal-api/rowProxy","fragment":"returns","content":"a proxy that will handle updating the row but is typed as T and RowProxyDelete"},{"breadcrumbs":["Internal API","Internal API","rowProxy"],"pageType":"api","title":"rowProxy","section":"Parameters","route":"internal-api/functions/internal-api/rowProxy","fragment":"parameters","content":"@param row the row to wrap"},{"breadcrumbs":["Internal API","Internal API","rowProxy"],"pageType":"api","title":"rowProxy","section":"Parameters","route":"internal-api/functions/internal-api/rowProxy","fragment":"parameters","content":"@param service the ActionService that will handle updating the row"},{"breadcrumbs":["Internal API","Internal API","rowProxy"],"pageType":"api","title":"rowProxy","section":"Parameters","route":"internal-api/functions/internal-api/rowProxy","fragment":"parameters","content":"@param parentService the ActionService that will handle updating the parent row"},{"breadcrumbs":["Internal API","Internal API","createInnerSmartSelector"],"pageType":"api","title":"createInnerSmartSelector","section":"","route":"internal-api/functions/internal-api/createInnerSmartSelector","content":"This is an internal function used by createSmartSelector. It is documented here for completeness. Use createSmartSelector instead."},{"breadcrumbs":["Internal API","Internal API","createInnerSmartSelector"],"pageType":"api","title":"createInnerSmartSelector","section":"","route":"internal-api/functions/internal-api/createInnerSmartSelector","content":"createInnerSmartSelector wraps the specified child array with a Proxy that will request the items from the server as they are accessed (virtual data) rather than loading everything from the array up front."},{"breadcrumbs":["Internal API","Internal API","createInnerSmartSelector"],"pageType":"api","title":"createInnerSmartSelector","section":"","route":"internal-api/functions/internal-api/createInnerSmartSelector","content":"In order to access the array without triggering a request, as is needed for a tree control that uses virtual data, the proxy adds support for a rawArray property that returns the original array before it was proxied."},{"breadcrumbs":["Internal API","Internal API","createInnerSmartSelector"],"pageType":"api","title":"createInnerSmartSelector","section":"Returns","route":"internal-api/functions/internal-api/createInnerSmartSelector","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","createInnerSmartSelector"],"pageType":"api","title":"createInnerSmartSelector","section":"Returns","route":"internal-api/functions/internal-api/createInnerSmartSelector","fragment":"returns","content":"an entity with the specified childArray proxies so that when an element is accessed, the childAction will be dispatched to request data from the server."},{"breadcrumbs":["Internal API","Internal API","createInnerSmartSelector"],"pageType":"api","title":"createInnerSmartSelector","section":"Parameters","route":"internal-api/functions/internal-api/createInnerSmartSelector","fragment":"parameters","content":"@param parentSelector The ParentSelector to retrieve the parent data from the store."},{"breadcrumbs":["Internal API","Internal API","createInnerSmartSelector"],"pageType":"api","title":"createInnerSmartSelector","section":"Parameters","route":"internal-api/functions/internal-api/createInnerSmartSelector","fragment":"parameters","content":"@param childDefinition ChildDefinition that defines what the child should look like"},{"breadcrumbs":["Internal API","Internal API","realOrMocked"],"pageType":"api","title":"realOrMocked","section":"","route":"internal-api/functions/internal-api/realOrMocked","content":"Internal function used by createInnerSmartSelector use to load the data if it doesn't exist in the store and return a placeholder row if it doesn't"},{"breadcrumbs":["Internal API","Internal API","realOrMocked"],"pageType":"api","title":"realOrMocked","section":"Returns","route":"internal-api/functions/internal-api/realOrMocked","fragment":"returns","content":"-"},{"breadcrumbs":["Internal API","Internal API","realOrMocked"],"pageType":"api","title":"realOrMocked","section":"Returns","route":"internal-api/functions/internal-api/realOrMocked","fragment":"returns","content":"the row from the store or the default object"},{"breadcrumbs":["Internal API","Internal API","realOrMocked"],"pageType":"api","title":"realOrMocked","section":"Parameters","route":"internal-api/functions/internal-api/realOrMocked","fragment":"parameters","content":"@param entityState the EntityState used to lookup the id"},{"breadcrumbs":["Internal API","Internal API","realOrMocked"],"pageType":"api","title":"realOrMocked","section":"Parameters","route":"internal-api/functions/internal-api/realOrMocked","fragment":"parameters","content":"@param id the id to lookup"},{"breadcrumbs":["Internal API","Internal API","realOrMocked"],"pageType":"api","title":"realOrMocked","section":"Parameters","route":"internal-api/functions/internal-api/realOrMocked","fragment":"parameters","content":"@param defaultObject the default object to return if the id doesn't exist"},{"breadcrumbs":["Internal API","Internal API","realOrMocked"],"pageType":"api","title":"realOrMocked","section":"Parameters","route":"internal-api/functions/internal-api/realOrMocked","fragment":"parameters","content":"@param childDefinition the ChildDefinition of the child object that lets us retrieve the feature and entity names"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"","route":"internal-api/interfaces/internal-api/SmartArray","content":"Interface that allows us to access the rawArray field and the addToStore and removeFromStore methods on a SmartArray"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"internal-api/interfaces/internal-api/SmartArray","fragment":"methods","content":"Adds a new row to the store"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"internal-api/interfaces/internal-api/SmartArray","fragment":"methods","content":"@param newRow The new row to add"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"internal-api/interfaces/internal-api/SmartArray","fragment":"methods","content":"@param thisRow The parent row"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"internal-api/interfaces/internal-api/SmartArray","fragment":"methods","content":"The array of IDs proxied by the ArrayProxy"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"internal-api/interfaces/internal-api/SmartArray","fragment":"methods","content":"Removes a row from the store"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"internal-api/interfaces/internal-api/SmartArray","fragment":"methods","content":"@param row"},{"breadcrumbs":["Internal API","Internal API","SmartArray"],"pageType":"api","title":"SmartArray","section":"Methods","route":"internal-api/interfaces/internal-api/SmartArray","fragment":"methods","content":"@param parent"},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Setup Client Side","route":"demo-walkthrough/setup-client-side","fragment":"setup-client-side","content":"Now that you've had a look at the data we are working with, let's take a look at how to get that data into our client code."},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Global Registration","route":"demo-walkthrough/setup-client-side","fragment":"global-registration","content":"As you may remember from our Global Registration documentation, the first thing we need to do is to provide a global registration in our app.module.ts file directly or indirectly. Because we use standalone components for our App component, we put this code in our app.config.ts file."},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Global Registration","route":"demo-walkthrough/setup-client-side","fragment":"global-registration","content":"Simply add the provideSmartNgRX function to the providers array like we've done in apps/demo/src/app/app.config.ts"},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Entity Registration","route":"demo-walkthrough/setup-client-side","fragment":"entity-registration","content":"The next step we covered in our documentation was Entity Registration which registers the features and entities that we want to use in our appliction."},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Entity Registration","route":"demo-walkthrough/setup-client-side","fragment":"entity-registration","content":"As we mentioned in the Introduction, each of the tabs in our application follow a separate strategy. We also store state for the currently selected location using a standard NgRX slice. Not everything is suitable for SmartNgRX."},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Entity Registration","route":"demo-walkthrough/setup-client-side","fragment":"entity-registration","content":"You can view the registration code for each of the tabs in the following locations. I'm providing links to the providers section and under each of those links, links to the entity definitions they reference"},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Entity Registration","route":"demo-walkthrough/setup-client-side","fragment":"entity-registration","content":"Tree (Standard)standardTopDefinitionstandardLocationsDefinitionstandardDepartmentsDefinitionstandardDepartmentChildrenDefinitionTree (No Refresh)noRefreshTopDefinitionnoRefreshLocationsDefinitionnoRefreshDepartmentsDefinitionnoRefreshDepartmentChildrenDefinitionTree (No Remove)noRemoveTopDefinitionnoRemoveLocationsDefinitionnoRemoveDepartmentsDefinitionnoRemoveDepartmentChildrenDefinitionTree (No Dirty)noDirtyTopDefinitionnoDirtyLocationsDefinitionnoDirtyDepartmentsDefinitionnoDirtyDepartmentChildrenDefinition"},{"breadcrumbs":["Demo Walkthrough","Setup Client Side"],"pageType":"guide","title":"Setup Client Side","section":"Entity Registration","route":"demo-walkthrough/setup-client-side","fragment":"entity-registration","content":"One thing you'll notice is that each of the routes points to the same tables in the end. This is so we can illustrate the various ways SmartNgRX can be used. In your application, you'd have one definition per table."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"Any row that has been exposed to your main application via a smart selector will automatically be available for update. All you have to do is assign a row. All the necessary dispatches to the reducer and effects will be handled for you."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"You will need to implement the update method in your effects service for the row the entity lives in."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"As an example, here is how we've updated the update method in the DepartmentEffectsService in the demo:"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"Note: explanation of this code will follow the code snippet."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"Everything is handled for you including optimistic updates of the store and rollbacks as required."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"This needs a bit of explanation. The effect that calls this service keeps track of the row that was updated. Instead of using switchMap() around our call to this service, we use concatMap(). By doing this, if a call fails, we can rollback each call so that when the next call comes in, the row is in the state is was prior to the update that just failed."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"Also, notice that we always return an array of rows even though there should only ever be one row in the array. This allows us to reuse code that we used previously to get the list of rows from the server. You'll see that in our implementation on the server, we reuse the getByIds code to get the row we just updated."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"All of this has implications for how you update by assigning a value to a field in a row."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"Let's say you have an edit field that you want to have update the row. You might be tempted to bind it directly to the field in the row. This would work, but even with debounce, you'd end up updating the row more frequently than you'd want to. Instead, you should consider binding the edit field to a local variable and then, when you are ready to update the row, assign the value of the local variable to the row. We've designed the code so that either way will work. But the latter will be more performant."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Updates"],"pageType":"guide","title":"Updates","section":"Updates","route":"using-smart-ng-rx/crud-support/updates","fragment":"updates","content":"We've also ensured that updating multiple fields will update the row only once as long as those multiple assignments happen within the same event loop. This is because we use a debounceTime(1) to ensure that the update only happens once. And if you update multiple rows within the same event loop, it will keep track of each row and call the effect service's update method once for each row."},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Processing WebSocket Messages","route":"demo-walkthrough/processing-websocket-messages","fragment":"processing-websocket-messages","content":"The demo makes use of socket.io to send messages from the server and process them on the client. You may choose whatever framework you want, or none at all."},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Server Side","route":"demo-walkthrough/processing-websocket-messages","fragment":"server-side","content":"On the server side, we send messages to the client when a row changes. Some examples you can look at include:"},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Server Side","route":"demo-walkthrough/processing-websocket-messages","fragment":"server-side","content":"Sending a message when a row has been updated.Sending a message when a row has been addedSending a message when a row has been deleted"},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Some things to note","route":"demo-walkthrough/processing-websocket-messages","fragment":"some-things-to-note","content":"When we send a notification for an add, we send an update notification for the parent row. This is because we want the parent's child field array to be updated with the current lists of child IDs."},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Some things to note","route":"demo-walkthrough/processing-websocket-messages","fragment":"some-things-to-note","content":"When we send a notification for delete, we send a delete notification because SmartNgRX is the best place to determine all the locations that need to be updated."},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Client Side","route":"demo-walkthrough/processing-websocket-messages","fragment":"client-side","content":"On the client side, we listen for the messages in one location and pass the information down to SmartNgRX to process."},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Client Side","route":"demo-walkthrough/processing-websocket-messages","fragment":"client-side","content":"The main listener code is in socket.service.ts"},{"breadcrumbs":["Demo Walkthrough","Processing WebSocket Messages"],"pageType":"guide","title":"Processing WebSocket Messages","section":"Client Side","route":"demo-walkthrough/processing-websocket-messages","fragment":"client-side","content":"The one thing to note here is that because the server is sending notifications about the tables it knows about, we need to translate the docs, lists, folders, and sprintFolders tables to departmentChildren so the client can process them correctly. But the main processing of the notification is all done by SmartNgRX in handleSocketNotification()"},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Database Structure","route":"demo-walkthrough/database-structure","fragment":"database-structure","content":"The backend database uses SqlLite3, a lightweight database that is easy to use and set up. The database is stored in a file called database.db in the root of the project and is created and populated with data when you pnpm install the project for the first time."},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Database Structure","route":"demo-walkthrough/database-structure","fragment":"database-structure","content":"We use Prisma to interact with the database, including creating tables, inserting data, and querying data. Prisma is a modern database toolkit that makes it easy to interact with databases in a type-safe way. It is used to generate the database schema and typescript types from the database schema."},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Database Structure","route":"demo-walkthrough/database-structure","fragment":"database-structure","content":"The database schema and subsequent changes are managed using Prisma Migrate. Prisma Migrate is a database schema migration tool that allows you to make changes to the database schema and apply those changes to the database."},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Database Structure","route":"demo-walkthrough/database-structure","fragment":"database-structure","content":"You can find the Prisma schema in the prisma/schema.prisma` file. This file defines the database schema and is used by Prisma to generate the database schema and typescript types."},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Tables","route":"demo-walkthrough/database-structure","fragment":"tables","content":"Currently all of our tables are structured the same with the exception of a field that points to the parent table's id. This is used to create a tree structure in the database."},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Tables","route":"demo-walkthrough/database-structure","fragment":"tables","content":"The fields all tables have are:"},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Tables","route":"demo-walkthrough/database-structure","fragment":"tables","content":"id: a unique identifier for the record as a guid.name: the name of the record.version: the version of the record as an integer that increments every time something gets updated.created: the timestamp for when the record was created, we use this to order the records in the UI."},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Tables","route":"demo-walkthrough/database-structure","fragment":"tables","content":"The database has the following tables:"},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Tables","route":"demo-walkthrough/database-structure","fragment":"tables","content":"locations: this is the top level table.departments: this table as a locationId field that points back to the locations table.docs: this table has a departmentId field that points back to the departments table.folders: this table has a departmentId field that points back to the departments table.lists: this table has a departmentId field that points back to the departments table.sprintFolders: this table has a departmentId field that points back to the departments table."},{"breadcrumbs":["Demo Walkthrough","Database Structure"],"pageType":"guide","title":"Database Structure","section":"Tables","route":"demo-walkthrough/database-structure","fragment":"tables","content":"You'll notice that the docs, folders, lists, and sprintFolders tables all have a departmentId field that points back to the departments table. This allows these to all be children of the departments table."},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"","route":"public-api/interfaces/public-api/SmartEntityDefinition","content":"This is the interface that is used to define the entity for the provideSmartFeatureEntities provider function"},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"properties","content":"This is the service token related to the service the effect for this entity should call to do CRUD operations against the backend."},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"properties","content":"Supply your own entityAdapter if you are not using ID as the primary key."},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"properties","content":"The entity name that you'd usually use in the reducer object you'd use in StoreModule.forFeature(featureName, reducer) OR the name you'd use in provideState(featureName, reducer)"},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"properties","content":"We also use this name along with the feature as the Source field in actions but this should not matter to you because you'll either be using actions we've created or using your own actions for your specific purposes."},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"properties","content":"If this is true, the assumption is that this is the top level row that has an ID and child fields that hold the IDs of the children. There can be multiple top level rows and each should have at least one child field for it to be useful."},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"properties","content":"When this is true, the loadById action will be fired with one element of value '1' the effectService will be called with this array where you can make a call to the backend to get the IDs for the child fields."},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"properties","content":"The MarkAndDeleteInit for this entity. This is optional and if not provided it will use the global MarkAndDeleteInit that is registered with the as part of `provideSmartNgRX()"},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Methods","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"methods","content":"The static function that returns a default row for the entity when it does not yet exist in the store."},{"breadcrumbs":["Public API","Public API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Methods","route":"public-api/interfaces/public-api/SmartEntityDefinition","fragment":"methods","content":"@param id The unique identifier for the row. You should use this to set the id of the id row in the default row. If the default row is being generated because it needs to be filled in for a virtual row and only has an index, the id that is passed in will be in the form of index${psi}${index}. You can use this information to create whatever ID is appropriate for the row."},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","content":"This is the interface that is used to define the entity for the provideSmartFeatureEntities provider function"},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"properties","content":"This is the service token related to the service the effect for this entity should call to do CRUD operations against the backend."},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"properties","content":"Supply your own entityAdapter if you are not using ID as the primary key."},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"properties","content":"The entity name that you'd usually use in the reducer object you'd use in StoreModule.forFeature(featureName, reducer) OR the name you'd use in provideState(featureName, reducer)"},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"properties","content":"We also use this name along with the feature as the Source field in actions but this should not matter to you because you'll either be using actions we've created or using your own actions for your specific purposes."},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"properties","content":"If this is true, the assumption is that this is the top level row that has an ID and child fields that hold the IDs of the children. There can be multiple top level rows and each should have at least one child field for it to be useful."},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"properties","content":"When this is true, the loadById action will be fired with one element of value '1' the effectService will be called with this array where you can make a call to the backend to get the IDs for the child fields."},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Properties","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"properties","content":"The MarkAndDeleteInit for this entity. This is optional and if not provided it will use the global MarkAndDeleteInit that is registered with the as part of `provideSmartNgRX()"},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Methods","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"methods","content":"The static function that returns a default row for the entity when it does not yet exist in the store."},{"breadcrumbs":["Internal API","Internal API","SmartEntityDefinition"],"pageType":"api","title":"SmartEntityDefinition","section":"Methods","route":"internal-api/interfaces/internal-api/SmartEntityDefinition","fragment":"methods","content":"@param id The unique identifier for the row. You should use this to set the id of the id row in the default row. If the default row is being generated because it needs to be filled in for a virtual row and only has an index, the id that is passed in will be in the form of index${psi}${index}. You can use this information to create whatever ID is appropriate for the row."},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"","route":"internal-api/classes/internal-api/Update","content":"Class responsible for updating rows in the store"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Constructor","route":"internal-api/classes/internal-api/Update","fragment":"constructor","content":"constructor"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Constructor","route":"internal-api/classes/internal-api/Update","fragment":"constructor","content":"@param feature the feature name"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Constructor","route":"internal-api/classes/internal-api/Update","fragment":"constructor","content":"@param entity the entity name"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Constructor","route":"internal-api/classes/internal-api/Update","fragment":"constructor","content":"@param entityAdapter the entity adapter"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Constructor","route":"internal-api/classes/internal-api/Update","fragment":"constructor","content":"@param loadByIdsSuccess the loadByIdsSuccess action function"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Methods","route":"internal-api/classes/internal-api/Update","fragment":"methods","content":"Initializes the updateSubject and the lastRow and lastRowTimeout maps"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Methods","route":"internal-api/classes/internal-api/Update","fragment":"methods","content":"updates the row in the store"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Methods","route":"internal-api/classes/internal-api/Update","fragment":"methods","content":"@param oldRow the row before the changes"},{"breadcrumbs":["Internal API","Internal API","Update"],"pageType":"api","title":"Update","section":"Methods","route":"internal-api/classes/internal-api/Update","fragment":"methods","content":"@param newRow the row after the changes"},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Tree Component","route":"demo-walkthrough/tree-component","fragment":"tree-component","content":"Now that we have the selectors defined, the next step is to pass them into our component(s) so they can be used."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Tree Component","route":"demo-walkthrough/tree-component","fragment":"tree-component","content":"Each of our routes have a smart component that looks basically the same. So, once again, we'll look at the Tree (Standard) page to illustrate how we use the selectors and how we only retrieve the data we need as it is needed."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Smart Component","route":"demo-walkthrough/tree-component","fragment":"smart-component","content":"At the route level, we create a smart component that retrieves the data from the selectors that we need."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Smart Component","route":"demo-walkthrough/tree-component","fragment":"smart-component","content":"The three selectors we need to pull our data from are, selectLocations(), selectCurrentLocationId(), and selectCurrentLocation(). The code is as you would expect and can be found in the tree.component.ts file."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Smart Component","route":"demo-walkthrough/tree-component","fragment":"smart-component","content":"You can look in the ngOnInit() method to see that we retrieve the data and set them to member variables."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Smart Component","route":"demo-walkthrough/tree-component","fragment":"smart-component","content":"Next, we pass the data into our main TreeComponent which is a dumb component that is responsible for displaying the data."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Smart Component","route":"demo-walkthrough/tree-component","fragment":"smart-component","content":"locations and locationId are used to populate the dropdown that allows us to pick the current location. The location is used to retrieve the data for the tree. Let's take a look at that next. The dropdown selector is relatively straightforward, so there is no real need to look at that in detail."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Dumb Component","route":"demo-walkthrough/tree-component","fragment":"dumb-component","content":"The common TreeComponent is used to display the tree. You should notice that it is using the cdk-virtual-scroll-viewport to provide virtual scrolling. This means that only the data that can be \"seen\" on the screen is rendered onto the screen. The tree uses the mat-tree component to display the data using the flat data method. This means that we need to convert our hierarchy of data into a flat list of data which we primarily do in TreeComponentService.applyRange() and TreeComponentService.transform()"},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Dumb Component","route":"demo-walkthrough/tree-component","fragment":"dumb-component","content":"applyRange() is responsible for kicking things off by determining which rows of information we need to display. It then calls transform() to convert the data from locations into a flat list of tree data."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Dumb Component","route":"demo-walkthrough/tree-component","fragment":"dumb-component","content":"Converting the nested data into a flat list is standard mat-tree code so, again, we won't spend a lot of time on this. However, what is interesting about this code is that we avoid triggering retrieval of the data by not access the array elements unless we need the data. If all we need is the ID, we use the getIdAtIndex() method to just retrieve that."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Dumb Component","route":"demo-walkthrough/tree-component","fragment":"dumb-component","content":"And this is the magic of SmartNgRX. Once you retrieve the data directly from the element, SmartNgRX ends up calling the Effects Service you registered and retrieves the data from the server."},{"breadcrumbs":["Demo Walkthrough","Tree Component"],"pageType":"guide","title":"Tree Component","section":"Dumb Component","route":"demo-walkthrough/tree-component","fragment":"dumb-component","content":"You'll also note that the transform() method is recursive to access the child elements of a node."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"MarkAndDeleteInit","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"markanddeleteinit","content":"The core interface for the Mark and Delete feature is the MarkAndDeleteInit interface. This interface is used to configure the Mark and Delete feature for a given entity."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"MarkAndDeleteInit","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"markanddeleteinit","content":"The MarkAndDeleteInit interface has the following properties:"},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"markDirtyTime","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"markdirtytime","content":"The time in milliseconds to wait before marking a row as dirty. When a row is marked as dirty, and it is being used it will re-retrieve the row if markDirtyFetchesNew is true. If markDirtyFetchesNew is false, it will just reset the isDirty flag in the row. This is how we know the row is still in use, or not."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"markDirtyTime","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"markdirtytime","content":"If markDirtyTime is set to -1, then the row will never be marked as dirty, and removeTime will be ignored. However, when the API we have for processing websocket messages marks the row as dirty, it will request new data from the server, regardless of what you set this value to. This allows us to use the same mechanism to refresh data for automated refreshes and manual refreshes in response to websocket notification."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"markDirtyTime","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"markdirtytime","content":"If markAndDelete is not set, it will default to 15 minutes."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"markDirtyFetchesNew","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"markdirtyfetchesnew","content":"As mentioned above, if this is set to true, than any time a row is marked as dirty, the system will retrieve a new value from the server. Otherwise, it will just reset the dirty timeout internally."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"markDirtyFetchesNew","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"markdirtyfetchesnew","content":"If markDirtyFetchesNew is not set, it will default to true."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"removeTime","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"removetime","content":"The time in milliseconds to wait before removing a row from the store. removeTime must be greater than markDirtyTime. If it is not, it will automatically set to twice markDirtyTime."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"removeTime","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"removetime","content":"If removeTime is not set, it will default to 30 minutes."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"runInterval","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"runinterval","content":"The time in milliseconds that determines how often the system looks at the rows to see if they need to be marked dirty or removed. If this is not set, it will default to one minute."},{"breadcrumbs":["Using Smart NgRX","Mark and Delete","MarkAndDeleteInit"],"pageType":"guide","title":"MarkAndDeleteInit","section":"runInterval","route":"using-smart-ng-rx/mark-and-delete/mark-and-delete-init","fragment":"runinterval","content":"runInterval is only recognized at the global level. If you want to change it, you must change it at the global level."},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"","route":"internal-api/classes/internal-api/RowProxy","content":"RowProxy wraps the row so we can intercept changes to it and fire off the appropriate actions to update the store and the server."},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"","route":"internal-api/classes/internal-api/RowProxy","content":"Since proxying the row directly will cause the setter to throw an error when the NgRX rules are turned on that disallow mutating the row directly, we need to wrap the row in our own class that uses the Proxy class to handle the updates. By casting the RowProxy to type T (above) the rest of our code still believes it is working with the original row."},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Constructor","route":"internal-api/classes/internal-api/RowProxy","fragment":"constructor","content":"This is the constructor for the RowProxy class."},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Constructor","route":"internal-api/classes/internal-api/RowProxy","fragment":"constructor","content":"@param row The row to create the custom proxy for"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Constructor","route":"internal-api/classes/internal-api/RowProxy","fragment":"constructor","content":"@param service The service that will handle updating the row"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Constructor","route":"internal-api/classes/internal-api/RowProxy","fragment":"constructor","content":"@param parentService The service that will handle updating the parent row"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Methods","route":"internal-api/classes/internal-api/RowProxy","fragment":"methods","content":"Initiates delete of this object from the server which will also optimistically update the store"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Methods","route":"internal-api/classes/internal-api/RowProxy","fragment":"methods","content":"This retrieves the backing row for this proxy"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Methods","route":"internal-api/classes/internal-api/RowProxy","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Methods","route":"internal-api/classes/internal-api/RowProxy","fragment":"methods","content":"the backing row for this proxy"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Methods","route":"internal-api/classes/internal-api/RowProxy","fragment":"methods","content":"When we stringify this object, it needs to stringify the real row and any changes we've made to it."},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Methods","route":"internal-api/classes/internal-api/RowProxy","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","RowProxy"],"pageType":"api","title":"RowProxy","section":"Methods","route":"internal-api/classes/internal-api/RowProxy","fragment":"methods","content":"the real row with any changes we've made to it"},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Effects Services","route":"demo-walkthrough/effects-service","fragment":"effects-services","content":"You may have noticed when looking at the entity definition code on the previous page that there is a property that we fill in named effectServiceToken. As mentioned in the Entity Definitions documentation, this is the token that we use to inject the effect service into the entity. The service that we use to interact with the server."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Effects Services","route":"demo-walkthrough/effects-service","fragment":"effects-services","content":"We use a token here because it is the cleanest way to pass an injectable in a function. It points to a class that inherits from the abstract class EffectsService. Our job is to implement each of the four methods defined in the abstract class. We use the same set of services for each of the four tabs because how we handle refreshing and garbage collection has no impact on how we interact with the server."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Top Effect Service","route":"demo-walkthrough/effects-service","fragment":"top-effect-service","content":"First, let's take a look at the top-effects.service.ts file."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Top Effect Service","route":"demo-walkthrough/effects-service","fragment":"top-effect-service","content":"What you'll notice here is that we only actually implement one of the methods, loadByIds(ids: string[]). This is because our top level entity will only ever retrieve data from the server. While we need to provide some implementation for the other methods to fulfill the contract with the abstract class, they don't have to access the server."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Locations Effect Service","route":"demo-walkthrough/effects-service","fragment":"locations-effect-service","content":"The locations-effects.service.ts is more like what you will typically create for most of your enities. It implements all four methods, loadByIds(ids: string[]), loadAll(), save(entity: Location), and delete(entity: Location) and all are relatively straightforward."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Departments Effect Service","route":"demo-walkthrough/effects-service","fragment":"departments-effect-service","content":"The departments-effects.service.ts is similar."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"DepartmentChildren Effect Service","route":"demo-walkthrough/effects-service","fragment":"departmentchildren-effect-service","content":"The department-children-effects.service.ts is probably the most complex because it has to map the ids we are retrieving to the ids and tables we want to retrieve the data from. So, for example, the loadByIds(ids: string[]) method filters the ids by the table they are in using the filterIds() function."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"DepartmentChildren Effect Service","route":"demo-walkthrough/effects-service","fragment":"departmentchildren-effect-service","content":"Once it has everything sorted, it creates a separate RxJS stream for each of the tables using the loadByIdsForType() function. In this case, we do perform some error handling because we are making multiple calls to the server and we don't want to fail everything if one thing fails. You might make a different design decision in your own application."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"DepartmentChildren Effect Service","route":"demo-walkthrough/effects-service","fragment":"departmentchildren-effect-service","content":"Once we have all the streams created, we use forkJoin to call them in parallel and then create a map that combines all the results. You may wonder how these display in created order. The answer is that this data gets loaded into an NgRX entity and the order they display is determined by the order of the IDs in the field that holds the array of IDs for this entity in the parent row. We don't need to deal with order here."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Retrieving the Department Children Data","route":"demo-walkthrough/effects-service","fragment":"retrieving-the-department-children-data","content":"As mentioned above, the loadByIds(ids: string[]) function is what creates a stream for each of the tables it needs to retrieve data from. It does this by using the CommonService class. This class is created indirectly by child classes that provide details for each of the tables. See DocsService, FoldersService, ListService, and SprintFoldersService that do nothing more than call super() with the HttpClient that is injected and the path on the server to call to get the data."},{"breadcrumbs":["Demo Walkthrough","Effects Services"],"pageType":"guide","title":"Effects Services","section":"Retrieving the Department Children Data","route":"demo-walkthrough/effects-service","fragment":"retrieving-the-department-children-data","content":"[!NOTE] Our code does not implement any error handling because the error handling needs to bubble up to the SmartNgRX Effect that calls the service in order for optimistic updates to work correctly. However, you might consider implementing retry logic or version detection for replication lag in your own application."},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"WebSockets","route":"using-smart-ng-rx/web-sockets","fragment":"websockets","content":"To use SmartNgRX with WebSockets, you'll need to establish your own WebSocket connection. The only information you'll need to pass up to the client are which type of action needs to be performed, the table name that is impacted, and the ids of the records that are impacted."},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Updates","route":"using-smart-ng-rx/web-sockets","fragment":"updates","content":"So, as an example, if you update the content of a row in the users table, you'll need to send a message to the client that might like this:"},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Updates","route":"using-smart-ng-rx/web-sockets","fragment":"updates","content":"Normally, there will only be one element in the array, but we've created the APIs to handle multiple IDs in case you need to update multiple records at once."},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Updates","route":"using-smart-ng-rx/web-sockets","fragment":"updates","content":"Then you would pass this information to SmartNgRX using this code:"},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Creates","route":"using-smart-ng-rx/web-sockets","fragment":"creates","content":"When you add a row to the users table, you might think that you'd send a message the might look like this:"},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Creates","route":"using-smart-ng-rx/web-sockets","fragment":"creates","content":"But, when you add a row, you'd typically add it as a child of another row, so what you really want to update is the parent row. So, you'd send a message that might look like this:"},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Creates","route":"using-smart-ng-rx/web-sockets","fragment":"creates","content":"Where, organizations is the table that is the parent of the users table. In this case, the ids array would contain the id of the organizations row that is affected, not the users row."},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Deletes","route":"using-smart-ng-rx/web-sockets","fragment":"deletes","content":"Given this, you might think that deleting a row would also use the update method, but in this case it is more difficult to determine all the places the row might be referenced from, but we already know all the places it is referenced from on the client side, so we can just send a message that looks like this:"},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Deletes","route":"using-smart-ng-rx/web-sockets","fragment":"deletes","content":"And then we pass it to SmartNgRX using this code:"},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Deletes","route":"using-smart-ng-rx/web-sockets","fragment":"deletes","content":"And SmartNgRX will take care of the rest."},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Translations","route":"using-smart-ng-rx/web-sockets","fragment":"translations","content":"In the demo code, we have rows that we modify that aren't directly parented by tables represented in the UI. That is, on the server, we have Docs, Folders, etc., but they are represented in the UI as departmentChildren. Since good programming practice says that the server should not know how the client uses the data, what the server sends up is going to have a value for table that is the same as the table name on the server, and the client will have a map that maps the server table name to the client table name. In the demo code, we've mapped the table like this:"},{"breadcrumbs":["Using Smart NgRX","WebSockets"],"pageType":"guide","title":"WebSockets","section":"Translations","route":"using-smart-ng-rx/web-sockets","fragment":"translations","content":"before we pass it on down to SmartNgRX."},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"","route":"internal-api/classes/internal-api/Add","content":"Class responsible for adding rows to the store"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Constructor","route":"internal-api/classes/internal-api/Add","fragment":"constructor","content":"constructor"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Constructor","route":"internal-api/classes/internal-api/Add","fragment":"constructor","content":"@param feature the feature name"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Constructor","route":"internal-api/classes/internal-api/Add","fragment":"constructor","content":"@param entity the entity name"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Constructor","route":"internal-api/classes/internal-api/Add","fragment":"constructor","content":"@param entityAdapter the entity adapter"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"adds a row to the store"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"@param row the row to add"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"@param parentService the service for the parent row"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"initialized the class"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"replaces the id in the parent rows with the new id this is used when we commit a new row to the server"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"@param id the id to replace"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"@param newId the new id to replace the old id with"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"schedules the garbage collection of the old row"},{"breadcrumbs":["Internal API","Internal API","Add"],"pageType":"api","title":"Add","section":"Methods","route":"internal-api/classes/internal-api/Add","fragment":"methods","content":"@param oldRow the old row to garbage collect"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"","route":"internal-api/classes/internal-api/VirtualArray","content":"Class that represents an array that is not fully loaded from the server but loads the data as it is needed."},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Constructor","route":"internal-api/classes/internal-api/VirtualArray","fragment":"constructor","content":"The constructor of the virtual array that takes the length of the array as a parameter."},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Constructor","route":"internal-api/classes/internal-api/VirtualArray","fragment":"constructor","content":"@param array array that contains the available IDs"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Constructor","route":"internal-api/classes/internal-api/VirtualArray","fragment":"constructor","content":"@param parentActionService the action service of the parent row"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Constructor","route":"internal-api/classes/internal-api/VirtualArray","fragment":"constructor","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Constructor","route":"internal-api/classes/internal-api/VirtualArray","fragment":"constructor","content":"@param childField the fieldName in the parent row that holds the children for this array"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"This is used internally by the Proxy get handler"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"@param childField the fieldName in the parent row that holds the children for this array"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"@param index the index to load"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"returns the id at the given index without fetching the id from the server. if the id does not exist, an ID based on the index is returned."},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"@param index the index to get the id at"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"the id at the given index"},{"breadcrumbs":["Internal API","Internal API","VirtualArray"],"pageType":"api","title":"VirtualArray","section":"Methods","route":"internal-api/classes/internal-api/VirtualArray","fragment":"methods","content":"Tells the virtual array to refetch the indexes the next time an element is requested."},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"","route":"internal-api/classes/internal-api/LoadByIds","content":"Manages the loading of rows by their Ids"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIds","fragment":"constructor","content":"The constructor for the LoadByIds class."},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIds","fragment":"constructor","content":"@param feature the name of the feature this class is for"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIds","fragment":"constructor","content":"@param entity the name of the entity this class is for"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIds","fragment":"constructor","content":"@param store the store to dispatch the actions to"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"Initializes the service with the actions and starts the dispatcher."},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"@param actions the actions to use"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"@param entities the entities to check for loading"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"@param defaultRow the default row to use"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"buffers the Id in the loadByIdsSubject."},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"@param ids the ids to load"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"Dispatches the loadByIds action after buffering the ids."},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"Calls the loadByIdsPreload action to load the rows into the store."},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"@param ids the ids to load"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"puts the rows in the store"},{"breadcrumbs":["Internal API","Internal API","LoadByIds"],"pageType":"api","title":"LoadByIds","section":"Methods","route":"internal-api/classes/internal-api/LoadByIds","fragment":"methods","content":"@param rows the rows to put in the store"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Introduction","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"introduction","content":"SmartNgRX expects every row within an entity that has children to have an array of IDs that point to the children. By using the createSmartSelector function, you will automatically get the children of the row you are retrieving when you access the array element. You will not need to dispatch any actions for this to happen. It will just work."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Introduction","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"introduction","content":"See the Smart Selectors section for more information."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Effects Service","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"effects-service","content":"What you will need to provide is the EffectService that will retrieve the rows from the server. You will need to implement the loadByIds method, which will be called with the list of IDs the code has determined it does not yet have or have been marked as dirty and it needs to render on the screen some place."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Effects Service","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"effects-service","content":"Keep in mind that any time you access an array element directly, you will trigger the retrieval process for that row. This is by design. If you want to retrieve the ID and not the row, you can use the array's rawArray property. You might use this if you are iterating through the array for the purposes of virtual scrolling as we've done in the example code."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Sample Code","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"sample-code","content":"Here is a sample implementation of a loadByIds method from the SmartNgRX Demo application:"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Sample Code","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"sample-code","content":"This code assumes that everything you need for the row is available from the server."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Sample Code","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"sample-code","content":"You might notice that we are using a POST instead of a GET to retrieve the data. If you prefer, you can use a GET. We've chosen to use a POST because we can send a list of IDs to the server and we want that list of IDs to be as large as needed and not limited by the URL size restrictions inherent in using GET."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Retrieving the top level store","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"retrieving-the-top-level-store","content":"The obvious question you might ask is, \"if everything has a parent, how can I retrieve the top level data?\" The answer is that you can set the isInitialRow field to true in the entity definition. This is a special marker that tells SmartNgRX that this row has no parent and should be retrieved when the entity is loaded."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Retrieving the top level store","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"retrieving-the-top-level-store","content":"You'll need to specify the loadByIds method to retrieve the top level data. This will be the ids of the child fields you'll need to retrieve when the child data is requested."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Retrieving the top level store","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"retrieving-the-top-level-store","content":"In the demo project, we've created a Top Entity that has no parent."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Retrieving the top level store","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"retrieving-the-top-level-store","content":"Here is a typical Top entity definition from the demo project:"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Retrieving the top level store","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"retrieving-the-top-level-store","content":"It will retrieve the locations ids. You can have your top level entity retrieve as many children as you need."},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Retrieving the top level store","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"retrieving-the-top-level-store","content":"To select the locations, our code looks like this:"},{"breadcrumbs":["Using Smart NgRX","CRUD Support","Retrieving Rows"],"pageType":"guide","title":"Retrieving Rows","section":"Retrieving the top level store","route":"using-smart-ng-rx/crud-support/retrieving","fragment":"retrieving-the-top-level-store","content":"By setting up the code in this way, you'll never have to dispatch an action to retrieve the top level data. This is all handled internally by SmartNgRX."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving Data","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-data","content":"Now that we understand the structure of the database, let's look at how we retrieve data from the database using our server code."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving Data","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-data","content":"We are using NestJS to create our server code in combination with Prisma to interact with the database. NestJS is a framework for building efficient, scalable Node.js server-side applications. It uses modern JavaScript and is built with TypeScript. Prisma is a modern database toolkit that makes it easy to interact with databases in a type-safe way."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving Data","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-data","content":"You can find the server code in apps/server/src/app directory."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving Data","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-data","content":"We won't go into the details of how to set up a NestJS server or how to use Prisma in this walkthrough. Instead, we'll focus on how we retrieve data from the database."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving Top Level Data","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-top-level-data","content":"Remember that our Locations table is our top level table. To load it in a way that SmartNgRX can use, we need to create a pseudo table. In our code, we name this pseudo table top. We'll come back to this later when we look at the client code. For now, we need to remember what we are dealing with so we know why we are doing things the way we are on the server."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving Top Level Data","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-top-level-data","content":"On the server, look at the code in apps/server/src/app/top/top.controller.ts. You'll see that we have one method in the controller that retrieves all the location ids from the locations table and returns them in a pseudo row."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Locations","route":"demo-walkthrough/retrieving-data","fragment":"locations","content":"Locations represents a straight forward way of retrieving child data. Look at the code in apps/server/src/app/locations/locations.controller.ts. Here, you will see the that we retrieve all the fields from a row as well as all the child ids for the departments that are associated with the location."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Departments","route":"demo-walkthrough/retrieving-data","fragment":"departments","content":"Retrieving the departments data is similar except that this uses the VirtualArrayContent structure we mention in the main documentation. So, when we retrieve a row, we also need to retrieve the virtual array content. You can view the code for this here: apps/server/src/app/departments/departments.controller.ts."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Departments","route":"demo-walkthrough/retrieving-data","fragment":"departments","content":"You'll notice that getByIds ends up calling getDepartmentChildrenIndexes(...) which then calls getBatchIndexes(...). This is where we retrieve the IDs for the first 500 rows of the child tables."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Departments","route":"demo-walkthrough/retrieving-data","fragment":"departments","content":"In this way, we allow the server to provide the first 500 rows of the child tables and then we can later retrieve the remaining rows as we ask for them."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"An Alternate Way to Retrieve Departments","route":"demo-walkthrough/retrieving-data","fragment":"an-alternate-way-to-retrieve-departments","content":"We could have done all this same work on the server in the EffectsService that retrieves the Departments, but we chose to do it in the controller because, in most case, doing the work on the server will have better performance. It will also provide greater flexibility as we embellish the server to cover more complex scenarios."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving The Remaining Tables","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-the-remaining-tables","content":"The remaining tables retrieve data similar to how we retrieved data for locations. You can view the code for these in their respective controller files."},{"breadcrumbs":["Demo Walkthrough","Retrieving Data"],"pageType":"guide","title":"Retrieving Data","section":"Retrieving The Remaining Tables","route":"demo-walkthrough/retrieving-data","fragment":"retrieving-the-remaining-tables","content":"[!NOTE] While the \"standard\" way of retrieving data from a server uses a GET method, we use a POST. This gives us greater flexibility in how we retrieve data. We can pass in as many parameters to the server as we need without being concerned about how long the resulting URL is."},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"","route":"internal-api/classes/internal-api/LoadByIndexes","content":"This class is used to manage loading the child ids by their location in the array."},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"constructor","content":"The constructor for the LoadByIndexes class."},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"constructor","content":"@param feature the name of the feature this class is for"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"constructor","content":"@param entity the name of the entity this class is for"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Constructor","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"constructor","content":"@param store the store to dispatch the actions to"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"Initializes the service with the actions and starts the dispatcher."},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param actions the actions to use"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param entities the entities to check for loading"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"que up loading the ids for the indexes"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param childField the child field to load"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param index the index to load"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"Dispatches the loadByIndexes action after buffering the indexes."},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"This updates the childField with the ids provided so we can use them in the VirtualArray. Make sure when you call this you are calling the service for the parent entity and not the child entity."},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param parentId the id of the parent row so we can update the proper childField"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param childField the child field to update"},{"breadcrumbs":["Internal API","Internal API","LoadByIndexes"],"pageType":"api","title":"LoadByIndexes","section":"Methods","route":"internal-api/classes/internal-api/LoadByIndexes","fragment":"methods","content":"@param array specifiers that define the new partial array"},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"Entity Definitions","route":"using-smart-ng-rx/entity-definitions","fragment":"entity-definitions","content":"As mentioned earlier, most of NgRX is hidden from you by SmartNgRX. The first API that allows us to do this is the provideSmartFeatureEntities function. This is a functional provider that allows us to register all the entities for a feature."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"Entity Definitions","route":"using-smart-ng-rx/entity-definitions","fragment":"entity-definitions","content":"We've found that the best way to use this provider is to create the entity definitions as objects in a separate file that we import into the location we want to register the entities. Each object would live with the entity code it represents. For example, if we have a User entity, we would create a users-definition.ts file that would contain the entity definition. We would then import that file into the module file where our provideSmartFeatureEntities function is located so we can register the entity."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"Entity Definitions","route":"using-smart-ng-rx/entity-definitions","fragment":"entity-definitions","content":"Let's take a look at an example. In this example, we'll create a users-definition.ts file that contains the entity definition for the User entity. We'll then import that file into the users.module.ts file so we can register the entity."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"Entity Definitions","route":"using-smart-ng-rx/entity-definitions","fragment":"entity-definitions","content":"As outlined in the SmartEntityDefinition interface, we need to provide the following information:"},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"entityName","route":"using-smart-ng-rx/entity-definitions","fragment":"entityname","content":"The field name that you'd usually use in the reducer object you'd use in StoreModule.forFeature(featureName, reducer) OR the name you'd use in provideState(featureName, reducer)."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"entityName","route":"using-smart-ng-rx/entity-definitions","fragment":"entityname","content":"We also use this name along with the feature as the Source field in actions but this should not matter to you because you'll either be using actions we've created or using your own actions for your specific purposes."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"entityName","route":"using-smart-ng-rx/entity-definitions","fragment":"entityname","content":"If you think of this as the name of the NgRX entity, you'll be fine."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"effectServiceToken","route":"using-smart-ng-rx/entity-definitions","fragment":"effectservicetoken","content":"The Injection Token for the Effect Service that will be used by the entity. This is the service that the effect will call to perform CRUD operations against the server."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"defaultRow","route":"using-smart-ng-rx/entity-definitions","fragment":"defaultrow","content":"A function that returns a default row for the entity. This is used by the reducer to create a new row when the addToStore method on the ArrayProxy is dispatched. The function takes an id parameter that is the id of the row that is being created. This is useful if you need to create a row that has a reference to the id of the row that is being created."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"Optional Fields","route":"using-smart-ng-rx/entity-definitions","fragment":"optional-fields","content":"You can also provide the following optional fields as your needs dictate:"},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"entityAdapter","route":"using-smart-ng-rx/entity-definitions","fragment":"entityadapter","content":"This field will let you supply your own EntityAdapter for the entity. This would be useful if your code uses a field other than id as the primary key for the entity. Nothing in SmartNgRX makes use of the sortComparer function so you can ignore that."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"markAndDelete","route":"using-smart-ng-rx/entity-definitions","fragment":"markanddelete","content":"This provides configuration information for the mark and delete feature that we will cover later."},{"breadcrumbs":["Using Smart NgRX","Entity Definitions"],"pageType":"guide","title":"Entity Definitions","section":"isInitialRow","route":"using-smart-ng-rx/entity-definitions","fragment":"isinitialrow","content":"Set this field to true if this is a top level row. Top level rows are used as a mechanism to retrieve data from the server without having a parent row, typically used to retrieve the top level of entities your application needs."},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"","route":"public-api/classes/public-api/EffectService","content":"This is the abstract class that all services the Effects use must implement."},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Sends a new row to the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Sends a new row to the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Deletes the row represented by the id from the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Deletes the row represented by the id from the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"@param startIndex the index to start loading from"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"@param length the number of rows to load"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"-"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"the virtual array contents"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"@param startIndex the index to start loading from"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"@param length the number of rows to load"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"-"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"the virtual array contents"},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Sends the updated row in the store to the server."},{"breadcrumbs":["Public API","Public API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"public-api/classes/public-api/EffectService","fragment":"methods","content":"Sends the updated row in the store to the server."},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"","route":"internal-api/classes/internal-api/EffectService","content":"This is the abstract class that all services the Effects use must implement."},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Sends a new row to the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Sends a new row to the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Deletes the row represented by the id from the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Deletes the row represented by the id from the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"@param startIndex the index to start loading from"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"@param length the number of rows to load"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"the virtual array contents"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Loads the rows represented by the array of ids passed in from the server"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"@param startIndex the index to start loading from"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"@param length the number of rows to load"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"the virtual array contents"},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Sends the updated row in the store to the server."},{"breadcrumbs":["Internal API","Internal API","EffectService"],"pageType":"api","title":"EffectService","section":"Methods","route":"internal-api/classes/internal-api/EffectService","fragment":"methods","content":"Sends the updated row in the store to the server."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Selectors","route":"demo-walkthrough/selectors","fragment":"selectors","content":"From an NgRX perspective, once you've configured your global provider and your feature providers, and created the Effects Services to retrieve your data, the only NgRX thing you'll need to concern yourself with are the selectors. And, even these aren't quite what you are used to because we've abstracted them as well. You'll never create an Effect, Action or Reducer for CRUD operations again. You'll still need to use standard NgRX for other state management tasks, such as storing form data like we do in the demo application to store the currently selected location."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Selectors","route":"demo-walkthrough/selectors","fragment":"selectors","content":"We won't go into much detail here because this is standard NgRX code. But you can see the current location actions, effects, and reducers in any of the current-location folders."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Selectors","route":"demo-walkthrough/selectors","fragment":"selectors","content":"One thing we will point out that might look strange to some of you is that we use an effect to listen for new data being set for the locations so we can determine a default action when new data comes in as a way to get around a problem we've had with the Angular Material mat-selector. It exists simply to delay setting the current location."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Selectors","route":"demo-walkthrough/selectors","fragment":"selectors","content":"Since all of our selectors look the same except for the feature store they are getting the data from, we'll focus our time on the selectors for the Tree (Standard) page."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Feature Selectors","route":"demo-walkthrough/selectors","fragment":"feature-selectors","content":"All our feature selectors for a route are located in the same file. This doesn't have to be the case, we've just decided to group them like this."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Feature Selectors","route":"demo-walkthrough/selectors","fragment":"feature-selectors","content":"tree-standard-state.selectors.ts is where you'll find the feature selectors for the Tree (Standard) page. Notice there are two. One for the state that uses standard NgRX and one for the state that uses SmartNgRX."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Top Selectors","route":"demo-walkthrough/selectors","fragment":"top-selectors","content":"The main selector in our top.selector.ts file is selectTopLocations() you'll see that it uses selectTopEntities() as the first parameter which is used to retrieve the top entity slice from the feature. The second parameter is the array of ChildDefinitions which has just one item because the list of IDs we will use to retrieve the locations is the locations field."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Top Selectors","route":"demo-walkthrough/selectors","fragment":"top-selectors","content":"While not technically a top selector item, the last selector in this file is selectLocation() which is used to retrieve the location IDs from the return value of selectTopLocations()."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Current Location Selectors","route":"demo-walkthrough/selectors","fragment":"current-location-selectors","content":"The current-location.selectors.ts simply pulls out the currently selected location ID from the state."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Location Selectors","route":"demo-walkthrough/selectors","fragment":"location-selectors","content":"The location.selectors.ts holds selectors that will give us access to the locations and the selected location."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Location Selectors","route":"demo-walkthrough/selectors","fragment":"location-selectors","content":"Once again, we see our createSmartSelector() being used to retrieve the locations and the children of the locations. In this case, the departments. It takes our selectLocationEntities() as the first parameter and the array of ChildDefinions as the second parameter."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Location Selectors","route":"demo-walkthrough/selectors","fragment":"location-selectors","content":"The other select we need here is the one that provides the currently selected location. This standard NgRX selector uses the selectLocationDepartments() and selectCurrentLocationId() we've already covered as parameter and then uses those to return the selected location, if it exists. Otherwise it returns a default location that has no departments."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Department Selectors","route":"demo-walkthrough/selectors","fragment":"department-selectors","content":"And so we continue down the stack and everything starts to look the same. The department.selectors.ts file has the selectDepartments() selector that is used to retrieve the department entities and the selectDepartmentsChildren() select that is used to define how to access the department children."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Department Children Selectors","route":"demo-walkthrough/selectors","fragment":"department-children-selectors","content":"And finally we come to the bottom of the tree where the only thing left to do is to select the department children."},{"breadcrumbs":["Demo Walkthrough","Selectors"],"pageType":"guide","title":"Selectors","section":"Conclusion","route":"demo-walkthrough/selectors","fragment":"conclusion","content":"Notice how coming from the top, we combine selectors until we've retrieved all the data we need to create the tree. Next, we'll show how we only retrieve the data we need as it is needed. This is one of the main features of SmartNgRX. We don't retrieve everything all at once."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Entities Under the Hood","route":"using-smart-ng-rx/intro","fragment":"entities-under-the-hood","content":"Smart NgRX uses NgRX Entities under the hood to manage the state of the application. This means that the state of the application is stored in a normalized way. This is a very powerful approach that allows us to easily manage the state of the application and to easily update the state of the application."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Entities Under the Hood","route":"using-smart-ng-rx/intro","fragment":"entities-under-the-hood","content":"The main benefit of using Entities is that we can do lookups for existing data quickly."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Entities Under the Hood","route":"using-smart-ng-rx/intro","fragment":"entities-under-the-hood","content":"Everything that Smart NgRX is doing uses standard NgRX patterns and practices with one minor exception. Smart NgRX is based on the command Action pattern rather than the event pattern. By doing this we are able to create the factories for Actions, Reducers and Effects that allow us to hide these details from you. Since you won't be actively dispatching any actions, which model we use should be immaterial to you."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Entities Under the Hood","route":"using-smart-ng-rx/intro","fragment":"entities-under-the-hood","content":"Now, because this is still NgRX, any NgRX dev tools you might be using, such as the Redux Dev Tools, will still work."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Only What you Need","route":"using-smart-ng-rx/intro","fragment":"only-what-you-need","content":"Another concept you'll need to understand is that Smart NgRX only loads the data that you need. This means that if you have a page that only needs to display a list of users, then Smart NgRX will only load the users. If you have a page that needs to display a list of users and a list of roles, then Smart NgRX will load the users and the roles."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Only What you Need","route":"using-smart-ng-rx/intro","fragment":"only-what-you-need","content":"It also only loads the data when you need it. Not only does this mean that it will only navigate the data when you are on the page that request the data, but if you've already loaded the data, it won't load it again, unless the data has been marked dirty."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Only What you Need","route":"using-smart-ng-rx/intro","fragment":"only-what-you-need","content":"But what, exactly, does it mean for an application to \"need\" the data? It means that something in your code has requested it. This could be because you've requested it directly, or because you've used a selector that has requested it. This is a very powerful concept that allows us to only load the data that is needed. But what this means is that you'll want to be careful about how you access your data."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Only What you Need","route":"using-smart-ng-rx/intro","fragment":"only-what-you-need","content":"For example, as our example app demonstrates, if you are using Virtual Scrolling, you'll want to be sure you only access the data that is being displayed. Don't request every row in a list. Instead, request only the rows that are being displayed. This will ensure that your application is as performant as possible."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Dirty Data","route":"using-smart-ng-rx/intro","fragment":"dirty-data","content":"There are multiple ways data might become \"dirty\". The first is by setting an expiration time on the data. SmartNgRX does this for you by registering the entity when we load it into the store. By setting the time, Smart NgRX will mark rows dirty when the expiration time is hit. The second is that you can mark the data dirty due to a websocket message event that indicates a row needs to be refreshed. Our API for handling websocket messages does this for you. Whenever data is marked dirty, Smart NgRX will automatically reload the data if it is currently being used or, later,when it is needed. That is, if your code is accessing the row, Smart NgRX will use the same mechanisms it originally used to get a fresh copy of the data. This all happens transparently for you under the hood."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"What this Means for Your Code","route":"using-smart-ng-rx/intro","fragment":"what-this-means-for-your-code","content":"Because of the way Smart NgRX works, you'll want to be sure to take advantage of Virtual Scrolling and @Defer(), to ensure that you are only loading the data that you need. This will ensure that your application has the best performance as possible. By doing this, you'll be able to get the benefits of Virtual Data as well as Virtual Scrolling."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"What this Means for Your Code","route":"using-smart-ng-rx/intro","fragment":"what-this-means-for-your-code","content":"It may also mean you'll want to re-think how you've structured your data. For example, imagine the situation where you have a set of fields in your row that you only display some of the time. In this case, you might want to consider moving those fields to a separate entity. This will ensure that you are only loading the data that you need."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"What this Means for Your Code","route":"using-smart-ng-rx/intro","fragment":"what-this-means-for-your-code","content":"But lets take this a bit further. Let's say each of those fields is conditionally displayed. In this case, it might make more sense to make the entity a list of fields that each relate back to the main entity. By doing this, you can retrieve and display only the fields that are being displayed."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"This reminds me of a story...","route":"using-smart-ng-rx/intro","fragment":"this-reminds-me-of-a-story","content":"I was once tasked with interviewing a couple of programmers at a college who I had been told were the best students in their class. Since the bulk of the work they would be doing involved creating tables in a database, I asked them to model some data in a database that intentionally had multiple fields that were similar but unique. I think it was phone numbers. Home phone and cell phone for example."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"This reminds me of a story...","route":"using-smart-ng-rx/intro","fragment":"this-reminds-me-of-a-story","content":"What I wanted to know from this exercise was, would they model these fields in a related table or would they just dump the two fields in the same table the other fields were in?"},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"This reminds me of a story...","route":"using-smart-ng-rx/intro","fragment":"this-reminds-me-of-a-story","content":"I don't think I need to tell you what they did. They put them in the same table instead of another related table."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Performance","route":"using-smart-ng-rx/intro","fragment":"performance","content":"You might be wondering how all this will impact performance. It is top of mind for us as well. We've added in various ways of retrieving data so that you can choose the best way to structure your data based on individual scenarios. There may be times when you want to load all the data up front. For example, lookup tables. There are other cases when you'll have a set of related entities that you want to load together rather than waiting for them to display. We've added in ways to do this as well. All while hiding the details from you and your team."},{"breadcrumbs":["Using Smart NgRX","Intro"],"pageType":"guide","title":"Intro","section":"Performance","route":"using-smart-ng-rx/intro","fragment":"performance","content":"Having said that, the performance of SmartNgRX is now far beyond what I originally envisioned."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"What is SmartNgRX?","route":"home","fragment":"what-is-smartngrx","content":"SmartNgRX is a library that hides most of NgRX from the developer for CRUD operations while still using NgRX under the hood and allowing you to use it with existing NgRX code. It not only supports CRUD but also implements optimistic UI for updates and deletes. Below is a list of features we have implemented so far (checked) along with some of our dreams (unchecked):"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"What is SmartNgRX?","route":"home","fragment":"what-is-smartngrx","content":" Eliminate NgRX boiler-plate code. Dynamically generate Actions, Reducers and Effects. Complete CRUD support. Provide optimistic UI natively Optionally remove unused entity rows from the store if they are no longer being used. Optionally allow data to refresh if it is currently being displayed. Allow this to work with other NgRX implementations or use only this implementation as desired or needed. Provide multiple ways to retrieve child rows. For small sets of nested data, provide the IDs of the child elements in an array of the parent. For larger sets of nested data, provide another mechanism that will allow for \"paging\" the rows. Allow this to work with code that has to account for write lag on the server (you can control this by using the Effects Service you have complete control over). Allow the server to notify this code via websockets (or any future server-side notification) that a row needs to be updated and have the code automatically refresh if the row is currently rendered someplace. Provide hooks that allow the client to tell the server what rows/entities it is interested in hearing about changes for. Use Signals, as an alternative, under the hood instead of Observables to allow for better performance and less memory usage."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"What is SmartNgRX?","route":"home","fragment":"what-is-smartngrx","content":"More details are in our documentation."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"Installation","route":"home","fragment":"installation","content":"To install this library, run:"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"This project merges two concepts I've been playing with for a while."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"At one of my previous jobs, I needed to work with data that could be essentially an infinite number of rows. This made retrieving the entire data set practically impossible and required that we not only use virtual scrolling to render the data but also use a concept of virtual data where we only retrieved the data that was needed to render the current view."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"Fast forward to a similar situation and a lot more experience. One of the issues with the previous implementation was that I had to retrieve the data every time it scrolled into view. As you can imagine, even with the fastest retrieval times, this didn't paint nearly as fast as anyone would have liked. This time, we had more control over the data. It was still a large data set. But it was not infinite."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"As we were in a meeting one day with everyone discussing various ways we could make the application perform better, I said, \"Let me tell you what I've been thinking about.\" I proceeded to lay out a concept based on my earlier work where we'd only load the rows as we needed them AND remove them once we had some assurance they were no longer being used."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"I was then told to go work on a POC for that concept and got far enough to know I was on to something but not far enough to solve all the issues we were going to run into."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"Meanwhile, new management came in that talked the original manager out of working on this at this time and I was told to work on other things. I'm not complaining. While I wish I could have continued working on this, this was the right decision for the company."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"Now, I couldn't let it go. I kept thinking about it. And another thought came to mind. If we always use essentially the same Actions, Effects and Reducers for each entity, could we just create factory methods that would generate them for us? And if we could do that, could we hide the bulk of what is NgRX from the developer?"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"At this point, I merged the two concepts. Using the main library of this project, you can register your NgRX entities in a providers section and then use \"SmartSelectors\" to join the data back together again. Only the join doesn't just join the data, it retrieves the data as it is accessed."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"History","route":"home","fragment":"history","content":"Have a look at our \"Ultimate Goals\" to see where we are headed and how much we've completed so far."},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"Documentation","route":"home","fragment":"documentation","content":"All the documentation can be found at SmartNgRX Documentation"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"Prerequisites","route":"home","fragment":"prerequisites","content":"NodeJS - ^18.10.0 || ^20.0.0pnpm - ^8"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"Steps","route":"home","fragment":"steps","content":"Checkout the projectRun pnpm iThe first time you run pnpm i, it will take a while to complete. This is because, as part of the installation process, we also seed the database with enough data to demonstrate virtual arrays.start the server with pnpm run start:serverstart the client with pnpm run startopen a browser to http://localhost:4200"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"Steps","route":"home","fragment":"steps","content":"[!NOTE] If you get an error about file watcher running out of file handles, you may need to increase the number of file handles available to the system. In Ubuntu and similar linux systems, including WSL, you can do this by running:"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"How to run the documentation project","route":"home","fragment":"how-to-run-the-documentation-project","content":"Checkout the project (if you haven't already)Run pnpm i (if you haven't already)start the documentation server with pnpm run start:documentationopen a browser to http://localhost:4201"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"Participating","route":"home","fragment":"participating","content":"Code of Conduct"},{"breadcrumbs":["Home"],"pageType":"guide","title":"Home","section":"Participating","route":"home","fragment":"participating","content":"Contributing"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"","route":"internal-api/classes/internal-api/ArrayProxy","content":"This is an internal class used by createSmartSelector to wrap the field that represents the child array with a class that manages all the magic of loading the data from the server as it is accessed."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"","route":"internal-api/classes/internal-api/ArrayProxy","content":"Note: The constructor of this class returns a Proxy to intercept property accesses. This is an intentional and necessary design choice to achieve the desired behavior of dynamically loading data."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Constructor","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"constructor","content":"The constructor for the ArrayProxy class."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Constructor","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"constructor","content":"@param childArray The ArrayProxy or string[] of ids to wrap"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Constructor","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"constructor","content":"@param child The child EntityState we use to find the item in the store"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Constructor","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"constructor","content":"@param childDefinition The ChildDefinition that allows us to get at features, entities and other things we need."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"Implements iterator so we can use methods that depend on iterable."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"@yields The next item in the iteration."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"The next item in the iteration."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"This method allows us to add an item to the array. Make sure it contains and ID field and any other defaults you might need"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"@param newRow the item to add to the array"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"@param thisRow the parent entity (this row) that contains the array"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"Allows us to go after the data in the store based on the index of the array."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"@param index the index into the rawArray that has the ID we will lookup in the entity."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"the item from the store or the default row if it is not in the store yet."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"returns the id at the given index, if the array is a virtual array, the id is returned without fetching from the server."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"@param index the index to get the id at"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"the id at the given index"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"grabs common actions and store used by other methods"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"the ActionService for the child and the parent"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"This initialized the class once it has been created. We do this so that we can test the class without having to worry about executable code in the constructor."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"This removes a row from the store that was previously added, but not saved to the server yet."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"@param row the row to remove from the array"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"@param parent the parent entity that contains the array"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"This primarily exist for testing so you can stringify the array and then parse it so that you get an array you can compare against instead of an object of type ArrayProxy that you can't do much with."},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","ArrayProxy"],"pageType":"api","title":"ArrayProxy","section":"Methods","route":"internal-api/classes/internal-api/ArrayProxy","fragment":"methods","content":"what this would return if it were a real array. Mostly for unit testing."},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"","route":"internal-api/classes/internal-api/ActionService","content":"Action Service is what we call to dispatch actions and do whatever logic is needed prior to the dispatch. This reduces the number of actions we need to create, makes the code easier to read, centralizes the access to the store, and keeps logic out of the reducer and effects without scattering the logic throughout the application."},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Constructor","route":"internal-api/classes/internal-api/ActionService","fragment":"constructor","content":"constructor for the ActionService"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Constructor","route":"internal-api/classes/internal-api/ActionService","fragment":"constructor","content":"@param feature the name of the feature this class is for"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Constructor","route":"internal-api/classes/internal-api/ActionService","fragment":"constructor","content":"@param entity the name of the entity this class is for"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Properties","route":"internal-api/classes/internal-api/ActionService","fragment":"properties","content":"entityAdapter is needed for delete so it is public"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"adds a row to the store"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param row the row to add"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param parentService the service for the parent row"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"Deletes the row represented by the Id from the store"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param id the id of the row to delete"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"this forces the row to be marked as dirty regardless of any other conditions. Primarily used for websockets"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param ids the ids to mark as dirty"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"Rows that can be removed are unregisterd from the garbage collection and then removed from the store if they are not being edited."},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param ids the ids to remove"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"Tries to initialize the ActionService."},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"true if successful, false if not"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"Calls the loadByIds action to load the rows into the store."},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param ids the ids to load"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"adds dummy rows to the store for ones we are retrieving"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param ids the ids we are retrieving"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"puts the rows in the store"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param rows the rows to put in the store"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"que up loading the ids for the indexes"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param parentId the id of the parent row"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param childField the child field to load"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param index the index to load"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"This updates the childField with the ids provided so we can use them in the VirtualArray. Make sure when you call this you are calling the service for the parent entity and not the child entity."},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param parentId the id of the parent row so we can update the proper childField"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param childField the child field to update"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param array specifiers that define the new partial array"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"marks the rows as dirty and takes into account settings indicating if this should cause a refresh or not"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param ids the ids to mark as dirty"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"marks the rows represented by the ids as not dirty"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param ids the ids to mark as not dirty"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"removes the rows represented by ids from the store unconditionally"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param ids the ids of the rows to remove from the store"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"removes the id from the child arrays of the parent rows"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param id the id to remove"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"-"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"the parent info for each parent"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"updates the row in the store"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param oldRow the row before the changes"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param newRow the row after the changes"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"updates many rows in the store"},{"breadcrumbs":["Internal API","Internal API","ActionService"],"pageType":"api","title":"ActionService","section":"Methods","route":"internal-api/classes/internal-api/ActionService","fragment":"methods","content":"@param changes the changes to make"}]