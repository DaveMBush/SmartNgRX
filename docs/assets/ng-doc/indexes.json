[
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "Introduction",
    "route": "/home",
    "fragment": "introduction",
    "content": "This project merges two concepts I've been playing with for a while. At one of my previous jobs, I needed to work with data that could be essentially an infinite number of rows. This made retrieving the entire data set practically impossible and required that we not only use virtual scrolling to render the data but also use a concept of virtual data where we only retrieved the data that was needed to render the current view. Fast forward to a similar situation and a lot more experience. One of the issues with the previous implementation was that I had to retrieve the data every time is scrolled into view. As you can imagine, even with the fastest retrieval times this didn't paint nearly as fast as anyone would have liked. This time, we had more control over the data. It was still a large data set. But it was not infinite. As we were in a meeting one day with everyone discussing various ways would could make the application perform better, I said, \"Let me tell you what I've been thinking about.\" And I proceeded to layout a concept based on my earlier work where we'd only load the rows as we need them AND remove them once we had some assurance they were no longer being used. I was then told to go work on a POC for that concept and got far enough to know I was on to something but not far enough to solve all the issues we were going to run into. Meanwhile, new management came in that talked the original manager out of working on this at this time and I was told to work on other things. I'm not complaining. While I wish I could have continued working on this, this was the right decision for the company. Now, I couldn't let it go. I kept thinking about it. And another thought came to mind. If we always use essentially the same Actions, Effects and Reducers for each entity, could we just create factory methods that would generate them for us? And if we could do that, could we hide the bulk of what is NgRX from the developer? At this point, I how merged the two concepts. Using the main library of this project, you can register your NgRX entities in a providers section and then use \"SmartSelectors\" to join the data back together again. Only the join doesn't just join the data, it retrieves the data as it is accessed. We are still at the very beginning of this project. We still need to provide a way of removing rows that are no longer being accessed. We still need to provide a way to perform CRUD operations on the rows. But the groundwork has been laid. At this point, the two things you need to know about NgRX are 1) You'll need to use selectors or the Smart Selectors from this library to \"Join\" or \"Nest\" rows and 2) you'll need to create Effect Services to deal with retrieving the data from the server (and ultimately perform the CRUD operations). Have a look at our \"Ultimate Goals\" to see where we are headed."
  },
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "Ultimate Goals",
    "route": "/home",
    "fragment": "ultimate-goals",
    "content": " Hide the NgRX boiler-plate code from the developer Dynamically generate Actions, Reducers and Effects. Support server side searching for rows Provide optimistic UI natively Optionally remove unused entity rows from the store. Allow this to work with other NgRX implementations or use only this implementation as desired or needed. Provide multiples ways to retrieve child rows. For small sets of nested data, provide the IDs of the child elements in an array of the parent. For larger sets of nested data, provide another mechanism that will allow for \"paging\" the rows. Allow this to work with code that has to account for write lag on the server Allow the server to notify this code via websockets (or any future server side notification) that a row needs to be updated and have the code automatically refresh if the row is currently rendered some place. Provide hooks that allow the client to tell the server what rows/entities it is interested in hearing about changes for."
  },
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "Documentation",
    "route": "/home",
    "fragment": "documentation",
    "content": "All the documentation can be found at SmartNgRX Documentation"
  },
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "Prerequisites",
    "route": "/home",
    "fragment": "prerequisites",
    "content": "NodeJS - ^18.10.0 || ^20.0.0pnpm - ^8"
  },
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "Steps",
    "route": "/home",
    "fragment": "steps",
    "content": "Checkout the projectRun pnpm istart the server with pnpm run start:serverstart the client with pnpm run startopen a browser to http://localhost:4200"
  },
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "How to run the documentation project",
    "route": "/home",
    "fragment": "how-to-run-the-documentation-project",
    "content": "Checkout the project (if you haven't already)Run pnpm i (if you haven't already)start the documentation server with pnpm run start:documentationopen a browser to http://localhost:4201"
  },
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "Participating",
    "route": "/home",
    "fragment": "participating",
    "content": "Code of Conduct"
  },
  {
    "breadcrumbs": [
      "Home"
    ],
    "pageType": "guide",
    "title": "Home",
    "section": "Participating",
    "route": "/home",
    "fragment": "participating",
    "content": "Contributing"
  },
  {
    "breadcrumbs": [
      "Cookbook",
      "TBD"
    ],
    "pageType": "guide",
    "title": "TBD",
    "section": "TBD",
    "route": "/cookbook/tbd",
    "fragment": "tbd",
    "content": "This section will hold specific use cases you may run into. Kind of a \"how to\" section."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Effects Service"
    ],
    "pageType": "guide",
    "title": "Effects Service",
    "section": "Effects Service",
    "route": "/using-smart-ng-rx/effects-service",
    "fragment": "effects-service",
    "content": "The Effects Service is the service that an effect calls to perform CRUD operations against the server. You can put any code you want in this service as long as it supports the interface and achieves the stated purpose. This allows you to retrieve data from the server in whatever way you need. To create an effect service, you'll need to inherit from the EffectService"
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Effects Service"
    ],
    "pageType": "guide",
    "title": "Effects Service",
    "section": "Effects Service",
    "route": "/using-smart-ng-rx/effects-service",
    "fragment": "effects-service",
    "content": " abstract class and implement the abstract methods. The EffectService"
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Effects Service"
    ],
    "pageType": "guide",
    "title": "Effects Service",
    "section": "Effects Service",
    "route": "/using-smart-ng-rx/effects-service",
    "fragment": "effects-service",
    "content": " abstract class is a generic class that takes the type of the entity as the generic type. This allows us to ensure that the methods you implement are returning the correct type."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Effects Service"
    ],
    "pageType": "guide",
    "title": "Effects Service",
    "section": "Effects Service",
    "route": "/using-smart-ng-rx/effects-service",
    "fragment": "effects-service",
    "content": "Because this will be used by an effect, and the effect needs some way of knowing what service to call, we need to have some way of passing the service down into the effect. The best way to do this is by passing in an InjectionToken"
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Entity Definitions"
    ],
    "pageType": "guide",
    "title": "Entity Definitions",
    "section": "Entity Definitions",
    "route": "/using-smart-ng-rx/entity-definitions",
    "fragment": "entity-definitions",
    "content": "As mentioned earlier, most of NgRX is hidden from you by Smart NgRX. The first API that allows us to do this is the provideSmartFeatureEntities function. This is a functional provider that allows us to register all the entities for a feature. We've found that the best way to use this provider is to create the entity definitions as objects in a separate file that we import into the location we want to register the entities. Each object would live with the entity code it represents. For example, if we have a User entity, we would create a users-definition.ts file that would contain the entity definition. We would then import that file into the the module file where our provideSmartFeatureEntities function is located so we can register the entity. Let's take a look at an example. In this example, we'll create a users-definition.ts file that contains the entity definition for the User entity. We'll then import that file into the users.module.ts file so we can register the entity. As outlined in the EntityDefinition interface, we need to provide the following information: fieldName: The field name that you'd usually use in the reducer object you'd use in StoreModule.forFeature(featureName, reducer) OR the name you'd use in provideState(featureName, reducer)We also use this name along with the feature as the Source field in actions but this should not matter to you because you'll either be using actions we've created or using your own actions for your specific purposes.NOTE: this is not a \"field\" in the database sense but a \"field in the sense of a \"field\" in a JavaScript object.effectServiceToken: The Injection Token for the Effect Service that will be used by the entity. This is the service that the effect will call to perform CRUD operations against the server.defaultRow: A function that returns a default row for the entity. This is used by the reducer to create a new row when the addRow action is dispatched. The function takes an id parameter that is the id of the row that is being created. This is useful if you need to create a row that has a reference to the id of the row that is being created."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Injection Token"
    ],
    "pageType": "guide",
    "title": "Injection Token",
    "section": "Injection Token",
    "route": "/using-smart-ng-rx/injection-token",
    "fragment": "injection-token",
    "content": "For each service, you'll need to create an Injection Token. Continuing with the example of a UserEffectsService, we'll create an Injection Token for it. Which we can use to register the service in our module:"
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Intro"
    ],
    "pageType": "guide",
    "title": "Intro",
    "section": "Entities Under the Hood",
    "route": "/using-smart-ng-rx/intro",
    "fragment": "entities-under-the-hood",
    "content": "Smart NgRX uses NgRX Entities under the hood to manage the state of the application. This means that the state of the application is stored in a normalized way. This is a very powerful approach that allows us to easily manage the state of the application and to easily update the state of the application. The main benefit of using Entities is that we can do lookups for existing data quickly. Everything that Smart NgRX is doing uses standard NgRX patterns and practices with one minor exception. Smart NgRX is based on the command Action pattern rather than the event pattern. By doing this we are able to create the factories for Actions, Reducers and Effects that allow us to hide these details from you. However, because this is still NgRX, any NgRX dev tools you might be using, such as the Redux Dev Tools, will still work."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Intro"
    ],
    "pageType": "guide",
    "title": "Intro",
    "section": "Only What you Need",
    "route": "/using-smart-ng-rx/intro",
    "fragment": "only-what-you-need",
    "content": "Another concept you'll need to understand is that Smart NgRX only loads the data that you need. This means that if you have a page that only needs to display a list of users, then Smart NgRX will only load the users. If you have a page that needs to display a list of users and a list of roles, then Smart NgRX will load the users and the roles. It also only loads the data when you need it. Not only does this mean that it will only navigate the data when you are on the page that request the data, but if you've already loaded the data, it won't load it again, unless the data has been marked dirty (coming soon)."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Intro"
    ],
    "pageType": "guide",
    "title": "Intro",
    "section": "Dirty Data",
    "route": "/using-smart-ng-rx/intro",
    "fragment": "dirty-data",
    "content": "There are multiple ways data might become \"dirty\". The first is by setting an expiration time on the data. This can be done when we register the entity using the provideSmartFeatureEntities method. By setting the time, Smart NgRX will mark rows dirty when the expiration time is hit. The second is that you can mark the data dirty for any number of reasons. The main one might be because a websocket message was received that indicates the data needs to be refreshed. Whenever data is marked dirty, Smart NgRX will automatically reload the data if or when it is needed. That is, if your code is accessing the row, Smart NgRX will use the same mechanisms it originally used to get a fresh copy of the data."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Intro"
    ],
    "pageType": "guide",
    "title": "Intro",
    "section": "What this Means for Your Code",
    "route": "/using-smart-ng-rx/intro",
    "fragment": "what-this-means-for-your-code",
    "content": "Because of the way Smart NgRX works, you'll want to be sure to take advantage of Virtual Scrolling and, once Angular 17 is released, @Defer(), to ensure that you are only loading the data that you need. This will ensure that your application is as performant as possible. By doing this, you'll be able to get the benefits of Virtual Data as well as Virtual Scrolling. It may also mean you'll want to re-think how you've structured your data. For example, imagine the situation where you've a set of fields in your row that you only display some of the time. In this case, you might want to consider moving those fields to a separate entity. This will ensure that you are only loading the data that you need. But lets take this a bit further. Let's say each of those fields is conditionally displayed. In this case, it might make more sense to make the entity a list of fields that each relate back to the main entity. By doing this, you can retrieve and display only the rows that are being displayed."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Intro"
    ],
    "pageType": "guide",
    "title": "Intro",
    "section": "Performance",
    "route": "/using-smart-ng-rx/intro",
    "fragment": "performance",
    "content": "You might be wondering how all this will impact performance. It is top of mind for us as well. We will be adding in various ways of retrieving data so that you can choose the best way to structure your data based on individual scenarios. There may be times when you want to load all the data up front. For example, lookup tables. There are other cases when you'll have a set of related entities that you want to load together rather than waiting for them to display. We'll be adding in ways to do this as well. All while hiding the details from you and your team."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "ProxyChild"
    ],
    "pageType": "guide",
    "title": "ProxyChild",
    "section": "ProxyChild",
    "route": "/using-smart-ng-rx/proxy-child",
    "fragment": "proxychild",
    "content": "Now that we've setup our state management, the last step is being able to get the data out of the store and into our components where we can see them. This is where Smart Selectors come in. But before we can create a selector, we need to understand the ProxyChild interface. It has the following components, as outlined in the API documentation: childFeature - The name of the feature the child entity was registered with. We need to supply this and the childFieldName so that the code can lookup information about the entity we've already supplied from provideSmartFeatureEntities.childFieldName - The name of the field the child entity was registered with.childSelector - the selector we use to retrieve the information for the child. The childSelector is an EntityState selector. This allows us to lookup an ID in the entity quickly.parentFieldName - the name of the field in the parent entity that contains the IDs of the children."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Registration"
    ],
    "pageType": "guide",
    "title": "Registration",
    "section": "Registration",
    "route": "/using-smart-ng-rx/registration",
    "fragment": "registration",
    "content": "Now that we have all the pieces in place, we can register our definitions with Smart NgRX so that they can be used by the library. We register our definitions by feature. By making even your common NgRX entities feature specific, all your NgRX code looks the same and is easy to move to another feature as needed. The following is how we would register our User entity with Smart NgRX: If there are other entities you want to register with this feature, you would add them to the array of entity definitions."
  },
  {
    "breadcrumbs": [
      "Using Smart NgRX",
      "Smart Selector"
    ],
    "pageType": "guide",
    "title": "Smart Selector",
    "section": "Smart Selector",
    "route": "/using-smart-ng-rx/smart-selector",
    "fragment": "smart-selector",
    "content": "And now, we can use the ProxyChild interface to create a selector that will retrieve the child entity from the parent entity. We can use this selector in our components to retrieve the child entity from the store. Note that the createSmartSelector function takes an array of ProxyChild objects. This allows us to create a selector that will retrieve multiple child entities from the parent entity. That is, one row may point to multiple children. By passing the array you can account for each of them with one call. In the case where your User row might have some child field named, roles your `createSmartSelector`` call might look like this: For now, the first parameter to createSmartSelector expects a selector that returns the parent entity. Eventually, we'd like for this parameter to accept any valid selector it can be used with existing code that does not use NgRX Entities."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "assert"
    ],
    "pageType": "api",
    "title": "assert",
    "section": "assert",
    "route": "/api/smart-ngrx/functions/assert",
    "fragment": "assert",
    "content": "This is an internal function documented here for reference by people doing development on this library. Asserts that a value is true. You should only use one condition at a time. If you are working with a value that should always be true, this is easier than putting if(condition) around what you are going to use the condition for."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "assert"
    ],
    "pageType": "api",
    "title": "assert",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/assert",
    "fragment": "parameters",
    "content": "condition to check"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "assert"
    ],
    "pageType": "api",
    "title": "assert",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/assert",
    "fragment": "parameters",
    "content": "description of what we checked. If you put a GUID in the string it will make it easier to find the error in the source code."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "castTo"
    ],
    "pageType": "api",
    "title": "castTo",
    "section": "castTo",
    "route": "/api/smart-ngrx/functions/castTo",
    "fragment": "castto",
    "content": "Casts a value to a given type. This is instead of using:"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "bufferAction"
    ],
    "pageType": "api",
    "title": "bufferAction",
    "section": "bufferAction",
    "route": "/api/smart-ngrx/functions/bufferAction",
    "fragment": "bufferaction",
    "content": "This is an internal function that is used by the Effects to buffer IDs of an action coming into an effect so that we can dispatch them independently but send them to the server in a single request. NOTE: bufferAction assumes an array of ids is passed to the action it is buffering."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "bufferAction"
    ],
    "pageType": "api",
    "title": "bufferAction",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/bufferAction",
    "fragment": "parameters",
    "content": "The zone to use to run outside of Angular."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "bufferAction"
    ],
    "pageType": "api",
    "title": "bufferAction",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/bufferAction",
    "fragment": "parameters",
    "content": "The time to buffer the ids before sending them to the server. The default is 1ms which only allow the buffer to last until the thread frees up and is probably all we will ever need."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EffectService"
    ],
    "pageType": "api",
    "title": "EffectService",
    "section": "EffectService",
    "route": "/api/smart-ngrx/classes/EffectService",
    "fragment": "effectservice",
    "content": "This is the abstract class that all services the Effects use must implement."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EffectService"
    ],
    "pageType": "api",
    "title": "EffectService",
    "section": "Properties",
    "route": "/api/smart-ngrx/classes/EffectService",
    "fragment": "properties",
    "content": "Used to load ALL the rows from the server for the given entity."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EffectService"
    ],
    "pageType": "api",
    "title": "EffectService",
    "section": "Properties",
    "route": "/api/smart-ngrx/classes/EffectService",
    "fragment": "properties",
    "content": "Loads the rows represented by the array of ids passed in."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EffectsFactory"
    ],
    "pageType": "api",
    "title": "EffectsFactory",
    "section": "EffectsFactory",
    "route": "/api/smart-ngrx/interfaces/EffectsFactory",
    "fragment": "effectsfactory",
    "content": "This is an internal interface that should not be required by anyone developing with this lib. This is the type information that effectsFactory returns."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EffectsFactory"
    ],
    "pageType": "api",
    "title": "EffectsFactory",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/EffectsFactory",
    "fragment": "properties",
    "content": "The effect the load action will end up calling."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EffectsFactory"
    ],
    "pageType": "api",
    "title": "EffectsFactory",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/EffectsFactory",
    "fragment": "properties",
    "content": "The effect the loadById action will end up calling."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "effectsFactory"
    ],
    "pageType": "api",
    "title": "effectsFactory",
    "section": "effectsFactory",
    "route": "/api/smart-ngrx/functions/effectsFactory",
    "fragment": "effectsfactory",
    "content": "The effects factory creates a new set of effects for the Action source provided and calls the service represented by the InjectionToken provided."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "effectsFactory"
    ],
    "pageType": "api",
    "title": "effectsFactory",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/effectsFactory",
    "fragment": "parameters",
    "content": "The source of the actions for this effect"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "effectsFactory"
    ],
    "pageType": "api",
    "title": "effectsFactory",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/effectsFactory",
    "fragment": "parameters",
    "content": "The token for the service that the resulting effect will call."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "LoadByIdsEffect"
    ],
    "pageType": "api",
    "title": "LoadByIdsEffect",
    "section": "LoadByIdsEffect",
    "route": "/api/smart-ngrx/type-aliases/LoadByIdsEffect",
    "fragment": "loadbyidseffect",
    "content": "Shorthand for the type of the LoadById effect."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "LoadEffect"
    ],
    "pageType": "api",
    "title": "LoadEffect",
    "section": "LoadEffect",
    "route": "/api/smart-ngrx/type-aliases/LoadEffect",
    "fragment": "loadeffect",
    "content": "Shorthand for the type of the Load effect."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadByIdsEffect"
    ],
    "pageType": "api",
    "title": "loadByIdsEffect",
    "section": "loadByIdsEffect",
    "route": "/api/smart-ngrx/functions/loadByIdsEffect",
    "fragment": "loadbyidseffect",
    "content": "This is the effect that loads the ids from the service."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadByIdsEffect"
    ],
    "pageType": "api",
    "title": "loadByIdsEffect",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/loadByIdsEffect",
    "fragment": "parameters",
    "content": "the effect service token that knows how to load the ids"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadByIdsEffect"
    ],
    "pageType": "api",
    "title": "loadByIdsEffect",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/loadByIdsEffect",
    "fragment": "parameters",
    "content": "the action group for the source provided"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadByIdsPreloadEffect"
    ],
    "pageType": "api",
    "title": "loadByIdsPreloadEffect",
    "section": "loadByIdsPreloadEffect",
    "route": "/api/smart-ngrx/functions/loadByIdsPreloadEffect",
    "fragment": "loadbyidspreloadeffect",
    "content": "This is the effect that queues up the ids so the dummy records can be loaded into the store while the service is retrieving the real records."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadByIdsPreloadEffect"
    ],
    "pageType": "api",
    "title": "loadByIdsPreloadEffect",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/loadByIdsPreloadEffect",
    "fragment": "parameters",
    "content": "the action group for the source provided"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadEffect"
    ],
    "pageType": "api",
    "title": "loadEffect",
    "section": "loadEffect",
    "route": "/api/smart-ngrx/functions/loadEffect",
    "fragment": "loadeffect",
    "content": "This is an internal function that defines the load effect"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadEffect"
    ],
    "pageType": "api",
    "title": "loadEffect",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/loadEffect",
    "fragment": "parameters",
    "content": "Token for the effect service that loads the data"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "loadEffect"
    ],
    "pageType": "api",
    "title": "loadEffect",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/loadEffect",
    "fragment": "parameters",
    "content": "The action group for the source provided"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ActionGroup"
    ],
    "pageType": "api",
    "title": "ActionGroup",
    "section": "ActionGroup",
    "route": "/api/smart-ngrx/interfaces/ActionGroup",
    "fragment": "actiongroup"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "actionFactory"
    ],
    "pageType": "api",
    "title": "actionFactory",
    "section": "actionFactory",
    "route": "/api/smart-ngrx/functions/actionFactory",
    "fragment": "actionfactory",
    "content": "This creates all the Actions for a given source. You would only need to call this if you needed to directly dispatch one of these actions from your own code. They are used internally and are only exposed for convenience."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "actionFactory"
    ],
    "pageType": "api",
    "title": "actionFactory",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/actionFactory",
    "fragment": "parameters",
    "content": "The source of the actions for this effect"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "provideSmartFeatureEntities"
    ],
    "pageType": "api",
    "title": "provideSmartFeatureEntities",
    "section": "provideSmartFeatureEntities",
    "route": "/api/smart-ngrx/functions/provideSmartFeatureEntities",
    "fragment": "providesmartfeatureentities",
    "content": "This provides all the NgRX parts for a given feature and entity Note: the generic parameters are implied so they are not documented here."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "provideSmartFeatureEntities"
    ],
    "pageType": "api",
    "title": "provideSmartFeatureEntities",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/provideSmartFeatureEntities",
    "fragment": "parameters",
    "content": "This is the name you would use for forFeature() in standard NgRX code."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "provideSmartFeatureEntities"
    ],
    "pageType": "api",
    "title": "provideSmartFeatureEntities",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/provideSmartFeatureEntities",
    "fragment": "parameters",
    "content": "An array of entity definitions."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "registerEntity"
    ],
    "pageType": "api",
    "title": "registerEntity",
    "section": "registerEntity",
    "route": "/api/smart-ngrx/functions/registerEntity",
    "fragment": "registerentity",
    "content": "Internal function used to register attributes the entity will need later on."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "registerEntity"
    ],
    "pageType": "api",
    "title": "registerEntity",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/registerEntity",
    "fragment": "parameters",
    "content": "the feature we used when we registered the entity in the providers"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "registerEntity"
    ],
    "pageType": "api",
    "title": "registerEntity",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/registerEntity",
    "fragment": "parameters",
    "content": "the fieldName we used when we registered the entity in the providers"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "registerEntity"
    ],
    "pageType": "api",
    "title": "registerEntity",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/registerEntity",
    "fragment": "parameters",
    "content": "things we want to be able to get at later."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "unregisterEntity"
    ],
    "pageType": "api",
    "title": "unregisterEntity",
    "section": "unregisterEntity",
    "route": "/api/smart-ngrx/functions/unregisterEntity",
    "fragment": "unregisterentity",
    "content": "This function exist so we can unregister entities in unit tests."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "unregisterEntity"
    ],
    "pageType": "api",
    "title": "unregisterEntity",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/unregisterEntity",
    "fragment": "parameters",
    "content": "the feature we used when we registered the entity in the providers"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "unregisterEntity"
    ],
    "pageType": "api",
    "title": "unregisterEntity",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/unregisterEntity",
    "fragment": "parameters",
    "content": "the fieldName we used when we registered the entity in the providers"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "reducerFactory"
    ],
    "pageType": "api",
    "title": "reducerFactory",
    "section": "reducerFactory",
    "route": "/api/smart-ngrx/functions/reducerFactory",
    "fragment": "reducerfactory",
    "content": "This creates a reducer for the give source. It is used internally and documented here for future contributions. Application code should never need to use this function."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "reducerFactory"
    ],
    "pageType": "api",
    "title": "reducerFactory",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/reducerFactory",
    "fragment": "parameters",
    "content": "The source of the actions for this effect"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "reducerFactory"
    ],
    "pageType": "api",
    "title": "reducerFactory",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/reducerFactory",
    "fragment": "parameters",
    "content": "A function that returns a default row for the given id"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "defaultRows"
    ],
    "pageType": "api",
    "title": "defaultRows",
    "section": "defaultRows",
    "route": "/api/smart-ngrx/functions/defaultRows",
    "fragment": "defaultrows",
    "content": "Filters out the rows we already have and provides a default row for the ones we don't have."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "defaultRows"
    ],
    "pageType": "api",
    "title": "defaultRows",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/defaultRows",
    "fragment": "parameters",
    "content": "The ids to check"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "defaultRows"
    ],
    "pageType": "api",
    "title": "defaultRows",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/defaultRows",
    "fragment": "parameters",
    "content": "The current state to check ids against"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "defaultRows"
    ],
    "pageType": "api",
    "title": "defaultRows",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/defaultRows",
    "fragment": "parameters",
    "content": "The defaultRow function to use to create a new row for the ids that are missing."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "ArrayProxy",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "arrayproxy",
    "content": "This is an internal class used by createSmartSelector to wrap the field that represents the child array with a class that manages all the magic of loading the data from the server as it is accessed."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Constructor",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "constructor",
    "content": "The constructor for the ArrayProxy class."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Constructor",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "constructor",
    "content": "The array of ids to wrap"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Constructor",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "constructor",
    "content": "The child entity we use to find the item in the store"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Constructor",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "constructor",
    "content": "the action to fire if the item has not been loaded"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Constructor",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "constructor",
    "content": "function that returns a default row for the child"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Methods",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "methods",
    "content": "Allows us to go after the data in the store based on the index of the array."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Methods",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "methods",
    "content": "the index into the rawArray that has the ID we will lookup in the entity."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Methods",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "methods",
    "content": "This initialized the class once it has been created. We do this so that we can test the class without having to worry about executable code in the constructor."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ArrayProxy"
    ],
    "pageType": "api",
    "title": "ArrayProxy",
    "section": "Methods",
    "route": "/api/smart-ngrx/classes/ArrayProxy",
    "fragment": "methods",
    "content": "This primarily exist for testing so you can stringify the array and then parse it so that you get an array you can compare against instead of an object of type ArrayProxy that you can't do much with."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "createInnerSmartSelector"
    ],
    "pageType": "api",
    "title": "createInnerSmartSelector",
    "section": "createInnerSmartSelector",
    "route": "/api/smart-ngrx/functions/createInnerSmartSelector",
    "fragment": "createinnersmartselector",
    "content": "This is an internal function used by createSmartSelector. It is documented here for completeness. Use createSmartSelector instead. createInnerSmartSelector wraps the specified child array with a Proxy that will request the items from the server as they are accessed (virtual data) rather than loading everything from the array up front. In order to access the array without triggering a request, as is needed for a tree control that uses virtual data, the proxy adds support for a rawArray property that returns the original array before it was proxied."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "createInnerSmartSelector"
    ],
    "pageType": "api",
    "title": "createInnerSmartSelector",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/createInnerSmartSelector",
    "fragment": "parameters",
    "content": "The selector to retrieve the parent data from the store."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "createInnerSmartSelector"
    ],
    "pageType": "api",
    "title": "createInnerSmartSelector",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/createInnerSmartSelector",
    "fragment": "parameters",
    "content": "that defines what the child should look like"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "createSmartSelector"
    ],
    "pageType": "api",
    "title": "createSmartSelector",
    "section": "createSmartSelector",
    "route": "/api/smart-ngrx/functions/createSmartSelector",
    "fragment": "createsmartselector",
    "content": "Wraps the specified child array(s) with a Proxy that will request the items from the server as they are accessed (virtual data) rather than loading everything from the array up front. In order to access the array without triggering a request, as is needed for a tree control that uses virtual data, the proxy adds support for a rawArray property that returns the original array before it was proxied."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "createSmartSelector"
    ],
    "pageType": "api",
    "title": "createSmartSelector",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/createSmartSelector",
    "fragment": "parameters",
    "content": "The selector to retrieve the parent data from the store."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "createSmartSelector"
    ],
    "pageType": "api",
    "title": "createSmartSelector",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/createSmartSelector",
    "fragment": "parameters",
    "content": "The array of ProxyChild objects that define the child data to retrieve."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ensureDataLoaded"
    ],
    "pageType": "api",
    "title": "ensureDataLoaded",
    "section": "ensureDataLoaded",
    "route": "/api/smart-ngrx/functions/ensureDataLoaded",
    "fragment": "ensuredataloaded",
    "content": "Internal function that ensures that the ID is loaded into the store for the entity by dispatching the action if it isn't."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ensureDataLoaded"
    ],
    "pageType": "api",
    "title": "ensureDataLoaded",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/ensureDataLoaded",
    "fragment": "parameters",
    "content": "The entity to check for the id"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ensureDataLoaded"
    ],
    "pageType": "api",
    "title": "ensureDataLoaded",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/ensureDataLoaded",
    "fragment": "parameters",
    "content": "The id to check for"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ensureDataLoaded"
    ],
    "pageType": "api",
    "title": "ensureDataLoaded",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/ensureDataLoaded",
    "fragment": "parameters",
    "content": "The action to dispatch if the id isn't loaded"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "getArrayItem"
    ],
    "pageType": "api",
    "title": "getArrayItem",
    "section": "getArrayItem",
    "route": "/api/smart-ngrx/functions/getArrayItem",
    "fragment": "getarrayitem",
    "content": "Internal function used by createInnerSmartSelector use to load the data if it doesn't exist in the store and return a placeholder row if it doesn't exist."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "getArrayItem"
    ],
    "pageType": "api",
    "title": "getArrayItem",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/getArrayItem",
    "fragment": "parameters",
    "content": "The entity to check for the id"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "getArrayItem"
    ],
    "pageType": "api",
    "title": "getArrayItem",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/getArrayItem",
    "fragment": "parameters",
    "content": "The id to check"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "getArrayItem"
    ],
    "pageType": "api",
    "title": "getArrayItem",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/getArrayItem",
    "fragment": "parameters",
    "content": "The action to dispatch if the id isn't loaded"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "getArrayItem"
    ],
    "pageType": "api",
    "title": "getArrayItem",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/getArrayItem",
    "fragment": "parameters",
    "content": "The row to return if the row for the id doesn't exist"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "isArrayProxy"
    ],
    "pageType": "api",
    "title": "isArrayProxy",
    "section": "isArrayProxy",
    "route": "/api/smart-ngrx/functions/isArrayProxy",
    "fragment": "isarrayproxy",
    "content": "Determines if the specified object is an ArrayProxy"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "isArrayProxy"
    ],
    "pageType": "api",
    "title": "isArrayProxy",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/isArrayProxy",
    "fragment": "parameters",
    "content": "the object to check"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ParentSelector"
    ],
    "pageType": "api",
    "title": "ParentSelector",
    "section": "ParentSelector",
    "route": "/api/smart-ngrx/type-aliases/ParentSelector",
    "fragment": "parentselector",
    "content": "Shorthand for the type of the parentSelector."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "realOrMocked"
    ],
    "pageType": "api",
    "title": "realOrMocked",
    "section": "realOrMocked",
    "route": "/api/smart-ngrx/functions/realOrMocked",
    "fragment": "realormocked",
    "content": "Internal function used by createInnerSmartSelector use to load the data if it doesn't exist in the store and return a placeholder row if it doesn't"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "realOrMocked"
    ],
    "pageType": "api",
    "title": "realOrMocked",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/realOrMocked",
    "fragment": "parameters",
    "content": "the entity used to lookup the id"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "realOrMocked"
    ],
    "pageType": "api",
    "title": "realOrMocked",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/realOrMocked",
    "fragment": "parameters",
    "content": "the id to lookup"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "realOrMocked"
    ],
    "pageType": "api",
    "title": "realOrMocked",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/realOrMocked",
    "fragment": "parameters",
    "content": "the default object to return if the id doesn't exist"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "StoreEffects"
    ],
    "pageType": "api",
    "title": "StoreEffects",
    "section": "StoreEffects",
    "route": "/api/smart-ngrx/classes/StoreEffects",
    "fragment": "storeeffects",
    "content": "This is the Effect that is used to provide a store that is globally accessible to the application."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "StoreEffects"
    ],
    "pageType": "api",
    "title": "StoreEffects",
    "section": "Constructor",
    "route": "/api/smart-ngrx/classes/StoreEffects",
    "fragment": "constructor",
    "content": "This is the constructor that is used to set the global store."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "store"
    ],
    "pageType": "api",
    "title": "store",
    "section": "store",
    "route": "/api/smart-ngrx/functions/store",
    "fragment": "store",
    "content": "Internal function used to provide and retrieve a global store that is needed by code that does not have DI."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "store"
    ],
    "pageType": "api",
    "title": "store",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/store",
    "fragment": "parameters",
    "content": "This is an optional parameter. If it is there, we set the store. Otherwise, we use what is already set."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "globalStore"
    ],
    "pageType": "api",
    "title": "globalStore",
    "section": "globalStore",
    "route": "/api/smart-ngrx/variables/globalStore",
    "fragment": "globalstore",
    "content": "This code allows us to make the store globally available without using dependency injection. This is set by the StoreEffects code where DI puts it in the constructor which then calls this function."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "convertEntityIdToName"
    ],
    "pageType": "api",
    "title": "convertEntityIdToName",
    "section": "convertEntityIdToName",
    "route": "/api/smart-ngrx/functions/convertEntityIdToName",
    "fragment": "convertentityidtoname",
    "content": "Used by unit tests"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "entityStateFactory"
    ],
    "pageType": "api",
    "title": "entityStateFactory",
    "section": "entityStateFactory",
    "route": "/api/smart-ngrx/functions/entityStateFactory",
    "fragment": "entitystatefactory",
    "content": "Used by unit tests to create a mock entity state."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "entityStateFactory"
    ],
    "pageType": "api",
    "title": "entityStateFactory",
    "section": "Parameters",
    "route": "/api/smart-ngrx/functions/entityStateFactory",
    "fragment": "parameters",
    "content": "The parameters to use to create the mock entity state."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "Entity"
    ],
    "pageType": "api",
    "title": "Entity",
    "section": "Entity",
    "route": "/api/smart-ngrx/interfaces/Entity",
    "fragment": "entity",
    "content": "Used by unit tests"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EffectServiceToken"
    ],
    "pageType": "api",
    "title": "EffectServiceToken",
    "section": "EffectServiceToken",
    "route": "/api/smart-ngrx/type-aliases/EffectServiceToken",
    "fragment": "effectservicetoken",
    "content": "Shorthand type for the token used to inject the effect service"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityAttributes"
    ],
    "pageType": "api",
    "title": "EntityAttributes",
    "section": "EntityAttributes",
    "route": "/api/smart-ngrx/interfaces/EntityAttributes",
    "fragment": "entityattributes",
    "content": "This is an interface that holds all the attributes we will need in provideEntities() so that we can just do a lookup for them later when we need them."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityAttributes"
    ],
    "pageType": "api",
    "title": "EntityAttributes",
    "section": "Methods",
    "route": "/api/smart-ngrx/interfaces/EntityAttributes",
    "fragment": "methods",
    "content": "Function that defines the default row for the entity"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityAttributes"
    ],
    "pageType": "api",
    "title": "EntityAttributes",
    "section": "Methods",
    "route": "/api/smart-ngrx/interfaces/EntityAttributes",
    "fragment": "methods",
    "content": "the unique ID of the row"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityDefinition"
    ],
    "pageType": "api",
    "title": "EntityDefinition",
    "section": "EntityDefinition",
    "route": "/api/smart-ngrx/interfaces/EntityDefinition",
    "fragment": "entitydefinition",
    "content": "This is the interface that is used to define the entity for the provideSmartFeatureEntities provider function"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityDefinition"
    ],
    "pageType": "api",
    "title": "EntityDefinition",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/EntityDefinition",
    "fragment": "properties",
    "content": "This is the service token related to the service the effect for this entity should call to do CRUD operations against the backend."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityDefinition"
    ],
    "pageType": "api",
    "title": "EntityDefinition",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/EntityDefinition",
    "fragment": "properties",
    "content": "The field name that you'd usually use in the reducer object you'd use in StoreModule.forFeature(featureName, reducer) OR the name you'd use in provideState(featureName, reducer) We also use this name along with the feature as the Source field in actions but this should not matter to you because you'll either be using actions we've created or using your own actions for your specific purposes."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityDefinition"
    ],
    "pageType": "api",
    "title": "EntityDefinition",
    "section": "Methods",
    "route": "/api/smart-ngrx/interfaces/EntityDefinition",
    "fragment": "methods",
    "content": "The static function that returns a default row for the entity when it does not yet exist in the store."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "EntityDefinition"
    ],
    "pageType": "api",
    "title": "EntityDefinition",
    "section": "Methods",
    "route": "/api/smart-ngrx/interfaces/EntityDefinition",
    "fragment": "methods",
    "content": "The unique identifier for the row. You should use this to set the id of the id row in the default row."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "IdProp"
    ],
    "pageType": "api",
    "title": "IdProp",
    "section": "IdProp",
    "route": "/api/smart-ngrx/interfaces/IdProp",
    "fragment": "idprop",
    "content": "Interface for Actions that take an id property"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "IdsProp"
    ],
    "pageType": "api",
    "title": "IdsProp",
    "section": "IdsProp",
    "route": "/api/smart-ngrx/interfaces/IdsProp",
    "fragment": "idsprop",
    "content": "Interface for Actions that take an array of ids"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "MarkAndDeleteSelector"
    ],
    "pageType": "api",
    "title": "MarkAndDeleteSelector",
    "section": "MarkAndDeleteSelector",
    "route": "/api/smart-ngrx/type-aliases/MarkAndDeleteSelector",
    "fragment": "markanddeleteselector",
    "content": "This type allows us to deal with just the MarkAndDelete part of an entity. This is used internally."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "MarkAndDelete"
    ],
    "pageType": "api",
    "title": "MarkAndDelete",
    "section": "MarkAndDelete",
    "route": "/api/smart-ngrx/interfaces/MarkAndDelete",
    "fragment": "markanddelete",
    "content": "This interface should be used by any interface that represents an entity in the store that uses the Smart NgRX library. You will not otherwise need to access this field in your own code as the dirty or not dirty status is handled by the Smart NgRX code for you."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ProxyChild"
    ],
    "pageType": "api",
    "title": "ProxyChild",
    "section": "ProxyChild",
    "route": "/api/smart-ngrx/interfaces/ProxyChild",
    "fragment": "proxychild",
    "content": "The definition of how to access the child data from a parent entity."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ProxyChild"
    ],
    "pageType": "api",
    "title": "ProxyChild",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/ProxyChild",
    "fragment": "properties",
    "content": "The name of the feature that contains the child data."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ProxyChild"
    ],
    "pageType": "api",
    "title": "ProxyChild",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/ProxyChild",
    "fragment": "properties",
    "content": "The fieldName we used to register the entity in the provider."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ProxyChild"
    ],
    "pageType": "api",
    "title": "ProxyChild",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/ProxyChild",
    "fragment": "properties",
    "content": "The selector to retrieve the child data from the store."
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "ProxyChild"
    ],
    "pageType": "api",
    "title": "ProxyChild",
    "section": "Properties",
    "route": "/api/smart-ngrx/interfaces/ProxyChild",
    "fragment": "properties",
    "content": "The name of the field in the parent that contains the child IDs"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "RowProp"
    ],
    "pageType": "api",
    "title": "RowProp",
    "section": "RowProp",
    "route": "/api/smart-ngrx/interfaces/RowProp",
    "fragment": "rowprop",
    "content": "Interface for Actions that take a row property"
  },
  {
    "breadcrumbs": [
      "API",
      "smart-ngrx",
      "RowsProp"
    ],
    "pageType": "api",
    "title": "RowsProp",
    "section": "RowsProp",
    "route": "/api/smart-ngrx/interfaces/RowsProp",
    "fragment": "rowsprop",
    "content": "Interface for Actions that take an array of rows"
  }
]