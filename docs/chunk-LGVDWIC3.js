import{a as h}from"./chunk-NCOWMHCX.js";import{a as r}from"./chunk-TD4XB5UG.js";import"./chunk-NGTZT3PE.js";import{a as t}from"./chunk-MHNQVTJN.js";import{L as d,Qa as o,Ra as g,Ub as k,ia as c,va as i}from"./chunk-3EY2YW7E.js";import{a as l,b as p,g as f}from"./chunk-JPKLQMV2.js";var m=f(k());var w={title:"WebSockets",mdFile:"./index.md",order:11,category:h},n=w;var u=[];var b={},j=b;var S=`<h1 id="websockets" class="ngde">WebSockets<a title="Link to heading" class="ng-doc-header-link ngde" href="/using-smart-ng-rx/web-sockets#websockets"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde">To use SmartNgRX with WebSockets, you'll need to establish your own WebSocket connection. The only information you'll need to pass up to the client are which type of action needs to be performed, the table name that is impacted, and the ids of the records that are impacted.</p><h2 id="updates" class="ngde">Updates<a title="Link to heading" class="ng-doc-header-link ngde" href="/using-smart-ng-rx/web-sockets#updates"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">So, as an example, if you update the content of a row in the <code class="ngde">users</code> table, you'll need to send a message to the client that might like this:</p><pre class="ngde hljs"><code class="hljs language-json code-lines ngde" lang="json" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-punctuation ngde">{</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"action"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"update"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"table"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"users"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"ids"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-punctuation ngde">[</span><span class="hljs-string ngde">"1"</span><span class="hljs-punctuation ngde">]</span>
</span><span class="line ngde"><span class="hljs-punctuation ngde">}</span>
</span></code></pre><p class="ngde">Normally, there will only be one element in the array, but we've created the APIs to handle multiple IDs in case you need to update multiple records at once.</p><p class="ngde">Then you would pass this information to SmartNgRX using this code:</p><pre class="ngde hljs"><code class="hljs language-typescript code-lines ngde" lang="typescript" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <a href="/api/smart-ngrx/functions/handleSocketNotification" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">handleSocketNotification</a> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'@smarttools/smart-ngrx'</span>;
</span><span class="line ngde">
</span><span class="line ngde"><span class="hljs-title function_ ngde"><a href="/api/smart-ngrx/functions/handleSocketNotification" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">handleSocketNotification</a></span>(data.<span class="hljs-property ngde">table</span>, data.<span class="hljs-property ngde">action</span>, data.<span class="hljs-property ngde">ids</span>);
</span></code></pre><h2 id="creates" class="ngde">Creates<a title="Link to heading" class="ng-doc-header-link ngde" href="/using-smart-ng-rx/web-sockets#creates"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">When you add a row to the <code class="ngde">users</code> table, you might think that you'd send a message the might look like this:</p><pre class="ngde hljs"><code class="hljs language-json code-lines ngde" lang="json" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-punctuation ngde">{</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"action"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"create"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"table"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"users"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"ids"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-punctuation ngde">[</span><span class="hljs-string ngde">"1"</span><span class="hljs-punctuation ngde">]</span>
</span><span class="line ngde"><span class="hljs-punctuation ngde">}</span>
</span></code></pre><p class="ngde">But, when you add a row, you'd typically add it as a child of another row, so what you really want to update is the parent row. So, you'd send a message that might look like this:</p><pre class="ngde hljs"><code class="hljs language-json code-lines ngde" lang="json" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-punctuation ngde">{</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"action"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"update"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"table"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"organizations"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"ids"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-punctuation ngde">[</span><span class="hljs-string ngde">"1"</span><span class="hljs-punctuation ngde">]</span>
</span><span class="line ngde"><span class="hljs-punctuation ngde">}</span>
</span></code></pre><p class="ngde">Where, <code class="ngde">organizations</code> is the table that is the parent of the <code class="ngde">users</code> table. In this case, the <code class="ngde">ids</code> array would contain the id of the organizations row that is affected, not the users row.</p><h2 id="deletes" class="ngde">Deletes<a title="Link to heading" class="ng-doc-header-link ngde" href="/using-smart-ng-rx/web-sockets#deletes"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">Given this, you might think that deleting a row would also use the update method, but in this case it is more difficult to determine all the places the row might be referenced from, but we already know all the places it is referenced from on the client side, so we can just send a message that looks like this:</p><pre class="ngde hljs"><code class="hljs language-json code-lines ngde" lang="json" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-punctuation ngde">{</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"action"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"delete"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"table"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-string ngde">"users"</span><span class="hljs-punctuation ngde">,</span>
</span><span class="line ngde">  <span class="hljs-attr ngde">"ids"</span><span class="hljs-punctuation ngde">:</span> <span class="hljs-punctuation ngde">[</span><span class="hljs-string ngde">"1"</span><span class="hljs-punctuation ngde">]</span>
</span><span class="line ngde"><span class="hljs-punctuation ngde">}</span>
</span></code></pre><p class="ngde">And then we pass it to SmartNgRX using this code:</p><pre class="ngde hljs"><code class="hljs language-typescript code-lines ngde" lang="typescript" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <a href="/api/smart-ngrx/functions/handleSocketNotification" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">handleSocketNotification</a> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'@smarttools/smart-ngrx'</span>;
</span><span class="line ngde">
</span><span class="line ngde"><span class="hljs-title function_ ngde"><a href="/api/smart-ngrx/functions/handleSocketNotification" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">handleSocketNotification</a></span>(data.<span class="hljs-property ngde">table</span>, data.<span class="hljs-property ngde">action</span>, data.<span class="hljs-property ngde">ids</span>);
</span></code></pre><p class="ngde">And SmartNgRX will take care of the rest.</p><h2 id="translations" class="ngde">Translations<a title="Link to heading" class="ng-doc-header-link ngde" href="/using-smart-ng-rx/web-sockets#translations"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">In the demo code, we have rows that we modify that aren't directly parented by tables represented in the UI. That is, on the server, we have <code class="ngde">Docs</code>, <code class="ngde">Folders</code>, etc., but they are represented in the UI as <code class="ngde">departmentChildren</code>. Since good programming practice says that the server should not know how the client uses the data, what the server sends up is going to have a value for <code class="ngde">table</code> that is the same as the table name on the server, and the client will have a map that maps the server table name to the client table name. In the demo code, we've mapped the table like this:</p><pre class="ngde hljs"><code class="hljs language-typescript code-lines ngde" lang="typescript" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">switch</span> (data.<span class="hljs-property ngde">table</span>) {
</span><span class="line ngde">  <span class="hljs-keyword ngde">case</span> <span class="hljs-string ngde">'docs'</span>:
</span><span class="line ngde">    data.<span class="hljs-property ngde">table</span> = <span class="hljs-string ngde">'departmentChildren'</span>;
</span><span class="line ngde">    data.<span class="hljs-property ngde">ids</span> = data.<span class="hljs-property ngde">ids</span>.<span class="hljs-title function_ ngde">map</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">id</span>) =></span> <span class="hljs-string ngde">\`docs:<span class="hljs-subst ngde">\${id}</span>\`</span>);
</span><span class="line ngde">    <span class="hljs-keyword ngde">break</span>;
</span><span class="line ngde">  <span class="hljs-keyword ngde">case</span> <span class="hljs-string ngde">'lists'</span>:
</span><span class="line ngde">    data.<span class="hljs-property ngde">table</span> = <span class="hljs-string ngde">'departmentChildren'</span>;
</span><span class="line ngde">    data.<span class="hljs-property ngde">ids</span> = data.<span class="hljs-property ngde">ids</span>.<span class="hljs-title function_ ngde">map</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">id</span>) =></span> <span class="hljs-string ngde">\`lists:<span class="hljs-subst ngde">\${id}</span>\`</span>);
</span><span class="line ngde">    <span class="hljs-keyword ngde">break</span>;
</span><span class="line ngde">  <span class="hljs-keyword ngde">case</span> <span class="hljs-string ngde">'folders'</span>:
</span><span class="line ngde">    data.<span class="hljs-property ngde">table</span> = <span class="hljs-string ngde">'departmentChildren'</span>;
</span><span class="line ngde">    data.<span class="hljs-property ngde">ids</span> = data.<span class="hljs-property ngde">ids</span>.<span class="hljs-title function_ ngde">map</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">id</span>) =></span> <span class="hljs-string ngde">\`folders:<span class="hljs-subst ngde">\${id}</span>\`</span>);
</span><span class="line ngde">    <span class="hljs-keyword ngde">break</span>;
</span><span class="line ngde">  <span class="hljs-keyword ngde">case</span> <span class="hljs-string ngde">'sprintFolders'</span>:
</span><span class="line ngde">    data.<span class="hljs-property ngde">table</span> = <span class="hljs-string ngde">'departmentChildren'</span>;
</span><span class="line ngde">    data.<span class="hljs-property ngde">ids</span> = data.<span class="hljs-property ngde">ids</span>.<span class="hljs-title function_ ngde">map</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">id</span>) =></span> <span class="hljs-string ngde">\`sprint-folders:<span class="hljs-subst ngde">\${id}</span>\`</span>);
</span><span class="line ngde">    <span class="hljs-keyword ngde">break</span>;
</span><span class="line ngde">  <span class="hljs-attr ngde">default</span>:
</span><span class="line ngde">    <span class="hljs-keyword ngde">break</span>;
</span><span class="line ngde">}
</span></code></pre><p class="ngde">before we pass it on down to SmartNgRX.</p>`,x=(()=>{let s=class s extends t{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=S,this.editSourceFileUrl="https://github.com/DaveMBush/SmartNgRX/edit/main/apps/documentation/src/app/using-smart-ng-rx/web-sockets/index.md?message=docs(web-sockets): describe your changes here...",this.page=n,this.demoAssets=j}};s.\u0275fac=function(e){return new(e||s)},s.\u0275cmp=d({type:s,selectors:[["ng-doc-page-using-smart-ng-rx-web-sockets"]],standalone:!0,features:[o([{provide:t,useExisting:s},u,n.providers??[]]),c,g],decls:1,vars:0,template:function(e,v){e&1&&i(0,"ng-doc-page")},dependencies:[r],encapsulation:2,changeDetection:0});let a=s;return a})(),N=[p(l({},(0,m.isRoute)(n.route)?n.route:{}),{path:"",component:x,title:"WebSockets"})],U=N;export{x as DynamicComponent,U as default};
