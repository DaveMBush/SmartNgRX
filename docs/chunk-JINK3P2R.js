import{a as c}from"./chunk-YWRD4FHU.js";import"./chunk-WDR7ZGDV.js";import{a as s}from"./chunk-RVP6FOET.js";import{L as a,Qa as i,Ra as r,ia as n,va as o}from"./chunk-ECT43PI4.js";import"./chunk-JPKLQMV2.js";var g='<header class="ngde"><div class="ng-doc-page-tags ngde"><span class="ng-doc-tag ngde" indexable="false" data-content="ng-doc-scope">smart-ngrx</span> <span class="ng-doc-inline-delimiter ngde" indexable="false">/</span> <span class="ng-doc-tag ngde" indexable="false" data-content="Interface">Interface</span></div><h1 id="actiongroup" class="ngde">ActionGroup<a title="Link to heading" class="ng-doc-header-link ngde" href="/api/smart-ngrx/interfaces/ActionGroup#actiongroup"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1></header><section class="ngde"><p class="ngde">Interface that describes a group of actions for a feature</p></section><section class="ngde"><h2 id="properties" class="ngde">Properties<a title="Link to heading" class="ng-doc-header-link ngde" href="/api/smart-ngrx/interfaces/ActionGroup#properties"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><div class="ng-doc-table-wrapper ngde"><table class="ng-doc-properties-table ngde"><thead class="ngde"><tr indexable="false" class="ngde"><th class="ng-doc-properties-table-name ngde">Name</th><th class="ng-doc-properties-table-type ngde">Type</th><th class="ng-doc-properties-table-description ngde">Description</th></tr></thead><tbody class="ngde"><tr data-slug="add" data-slugtype="member" id="add" class="ngde"><td indexable="false" class="ngde">add<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Add`, (props: { row: T; parentId: string; parentFeature: string; parentEntityName: string; }) => Action&#x3C;`[${any}] Add`> &#x26; { row: T; parentId: string; parentFeature: string; parentEntityName: string; }></code></td><td class="ngde"><p class="ngde">Action to trigger adding a new row</p></td></tr><tr data-slug="addSuccess" data-slugtype="member" id="addSuccess" class="ngde"><td indexable="false" class="ngde">addSuccess<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Add Success`, (props: { oldRow: T; newRow: T; parentId: string; parentFeature: string; parentEntityName: string; }) => Action&#x3C;`[${any}] Add Success`> &#x26; { oldRow: T; newRow: T; parentId: string; parentFeature: string; parentEntityName: string; }></code></td><td class="ngde"><p class="ngde">Action to trigger storing a new row</p></td></tr><tr data-slug="delete" data-slugtype="member" id="delete" class="ngde"><td indexable="false" class="ngde">delete<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Delete`, (props: { id: string; parentInfo: { feature: string; entity: string; ids: string[]; }[]; }) => Action&#x3C;`[${any}] Delete`> &#x26; { id: string; parentInfo: { feature: string; entity: string; ids: string[]; }[]; }></code></td><td class="ngde"><p class="ngde">Action to trigger deleting a new row, this eventually calls the effect service which will handle the physical delete on the server.</p></td></tr><tr data-slug="loadByIds" data-slugtype="member" id="loadByIds" class="ngde"><td indexable="false" class="ngde">loadByIds<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Load By Ids`, (props: IdsProp) => Action&#x3C;`[${any}] Load By Ids`> &#x26; IdsProp></code></td><td class="ngde"><p class="ngde">Action to load rows by their IDs.</p></td></tr><tr data-slug="remove" data-slugtype="member" id="remove" class="ngde"><td indexable="false" class="ngde">remove<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Remove`, (props: IdsProp) => Action&#x3C;`[${any}] Remove`> &#x26; IdsProp></code></td><td class="ngde"><p class="ngde">Action to remove rows represented by the IDs from the store.</p></td></tr><tr data-slug="storeRows" data-slugtype="member" id="storeRows" class="ngde"><td indexable="false" class="ngde">storeRows<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Store Rows`, (props: RowsProp&#x3C;T>) => Action&#x3C;`[${any}] Store Rows`> &#x26; RowsProp&#x3C;T>></code></td><td class="ngde"><p class="ngde">Action to put rows into the store.</p></td></tr><tr data-slug="update" data-slugtype="member" id="update" class="ngde"><td indexable="false" class="ngde">update<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Update`, (props: { old: RowProp&#x3C;T>; new: RowProp&#x3C;T>; }) => Action&#x3C;`[${any}] Update`> &#x26; { old: RowProp&#x3C;T>; new: RowProp&#x3C;T>; }></code></td><td class="ngde"><p class="ngde">Action to update a row in the store. The old row is passed so we can roll back on failure.</p></td></tr><tr data-slug="updateMany" data-slugtype="member" id="updateMany" class="ngde"><td indexable="false" class="ngde">updateMany<div class="ng-doc-node-details ngde"></div></td><td class="ngde"><code indexable="false" class="ngde">ActionCreator&#x3C;`[${any}] Update Many`, (props: UpdateChanges&#x3C;T>) => Action&#x3C;`[${any}] Update Many`> &#x26; UpdateChanges&#x3C;T>></code></td><td class="ngde"><p class="ngde">Action to update state with multiple changes at a time.</p></td></tr></tbody></table></div></section>',p=(()=>{let e=class e extends s{constructor(){super(),this.routePrefix=void 0,this.pageType="api",this.pageContent=g,this.demo=void 0,this.demoAssets=void 0}};e.\u0275fac=function(d){return new(d||e)},e.\u0275cmp=a({type:e,selectors:[["ng-doc-page-api-smart-ngrx-interfaces-action-group"]],standalone:!0,features:[i([{provide:s,useExisting:e}]),n,r],decls:1,vars:0,template:function(d,x){d&1&&o(0,"ng-doc-page")},dependencies:[c],encapsulation:2,changeDetection:0});let t=e;return t})(),u=[{path:"",component:p,title:"ActionGroup"}],m=u;export{p as DynamicComponent,m as default};
