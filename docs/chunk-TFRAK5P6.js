import{a as h}from"./chunk-HBZWFD3Q.js";import{a as p}from"./chunk-ILHULVET.js";import"./chunk-QCRGZPLW.js";import"./chunk-NHVJC6EG.js";import{a}from"./chunk-3NJKGVAP.js";import{X as m}from"./chunk-QXTZ4AYG.js";import"./chunk-AACWRZT7.js";import{Ba as r,Fa as c,Wa as d,sb as l}from"./chunk-O44Q3Q27.js";import{a as t,b as o,h as k}from"./chunk-TWZW5B45.js";var u=k(m());var B={title:"Entity Definitions",mdFile:"./index.md",order:4,category:h},e=B;var g=[];var D={},f=D;var F=`<h1 id="entity-definitions" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">Entity Definitions<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="entity-definitions"></ng-doc-heading-anchor></h1><p class="ngde">As mentioned earlier, most of NgRX is hidden from you by SmartNgRX. The first API that allows us to do this is the <code class="ngde ng-doc-code-with-link"><a href="public-api/functions/public-api/provideSmartFeatureEntities" class="ng-doc-code-anchor ngde">provideSmartFeatureEntities</a></code> function. This is a functional provider that allows us to register all the entities for a feature.</p><p class="ngde">We've found that the best way to use this provider is to create the entity definitions as objects in a separate file that we import into the location we want to register the entities. Each object would live with the entity code it represents. For example, if we have a <code class="ngde">User</code> entity, we would create a <code class="ngde">users-definition.ts</code> file that would contain the entity definition. We would then import that file into the module file where our <code class="ngde ng-doc-code-with-link"><a href="public-api/functions/public-api/provideSmartFeatureEntities" class="ng-doc-code-anchor ngde">provideSmartFeatureEntities</a></code> function is located so we can register the entity.</p><p class="ngde">Let's take a look at an example. In this example, we'll create a <code class="ngde">users-definition.ts</code> file that contains the entity definition for the <code class="ngde">User</code> entity. We'll then import that file into the <code class="ngde">users.module.ts</code> file so we can register the entity.</p><pre class="shiki shiki-themes github-light ayu-dark" style="background-color:#fff;--shiki-dark-bg:#0b0e14;color:#24292e;--shiki-dark:#bfbdb6" tabindex="0"><code class="language-typescript"><span class="line"><span style="color:#6A737D;--shiki-dark:#ACB6BF8C;font-style:inherit;--shiki-dark-font-style:italic" class="ngde">// users-definition.ts</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">import</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> { <a href="public-api/interfaces/public-api/SmartEntityDefinition" class="ng-doc-code-anchor ngde">SmartEntityDefinition</a> } </span><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">from</span><span style="color:#032F62;--shiki-dark:#AAD94C" class="ngde"> '@smarttools/smart-ngrx'</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">import</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> { User } </span><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">from</span><span style="color:#032F62;--shiki-dark:#AAD94C" class="ngde"> './user.interface'</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">import</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> { userEffectsServiceToken } </span><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">from</span><span style="color:#032F62;--shiki-dark:#AAD94C" class="ngde"> './user-effects.service-token'</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">export</span><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde"> const</span><span style="color:#005CC5;--shiki-dark:#BFBDB6" class="ngde"> usersDefinition</span><span style="color:#D73A49;--shiki-dark:#F29668" class="ngde">:</span><span style="color:#6F42C1;--shiki-dark:#59C2FF" class="ngde"> <a href="public-api/interfaces/public-api/SmartEntityDefinition" class="ng-doc-code-anchor ngde">SmartEntityDefinition</a></span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#59C2FF" class="ngde">User</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">> </span><span style="color:#D73A49;--shiki-dark:#F29668" class="ngde">=</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">  entityName</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">:</span><span style="color:#032F62;--shiki-dark:#AAD94C" class="ngde"> 'users'</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">  effectServiceToken</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">:</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> userEffectsServiceToken</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#FFB454" class="ngde">  defaultRow</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">:</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> (</span><span style="color:#E36209;--shiki-dark:#D2A6FF" class="ngde">id</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">) </span><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">=></span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> ({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">    id</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">    name</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">:</span><span style="color:#032F62;--shiki-dark:#AAD94C" class="ngde"> ''</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">    children</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">:</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> []</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">  })</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">}</span><span style="color:#24292E;--shiki-dark:#BFBDB6B3" class="ngde">;</span></span></code></pre><p class="ngde">As outlined in the <code class="ngde ng-doc-code-with-link"><a href="public-api/interfaces/public-api/SmartEntityDefinition" class="ng-doc-code-anchor ngde">SmartEntityDefinition</a></code> interface, we need to provide the following information:</p><h2 id="entityname" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">entityName<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="entityname"></ng-doc-heading-anchor></h2><p class="ngde">The field name that you'd usually use in the reducer object you'd use in <code class="ngde">StoreModule.forFeature(featureName, reducer)</code> OR the name you'd use in <code class="ngde">provideState(featureName, reducer)</code>.</p><p class="ngde">We also use this name along with the feature as the <code class="ngde">Source</code> field in actions but this should not matter to you because you'll either be using actions we've created or using your own actions for your specific purposes.</p><p class="ngde">If you think of this as the name of the NgRX entity, you'll be fine.</p><h2 id="effectservicetoken" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">effectServiceToken<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="effectservicetoken"></ng-doc-heading-anchor></h2><p class="ngde">The Injection Token for the Effect Service that will be used by the entity. This is the service that the effect will call to perform CRUD operations against the server.</p><h2 id="defaultrow" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">defaultRow<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="defaultrow"></ng-doc-heading-anchor></h2><p class="ngde">A function that returns a default row for the entity. This is used by the reducer to create a new row when the <code class="ngde">addToStore</code> method on the <code class="ngde ng-doc-code-with-link"><a href="internal-api/classes/internal-api/ArrayProxy" class="ng-doc-code-anchor ngde">ArrayProxy</a></code> is dispatched. The function takes an <code class="ngde">id</code> parameter that is the id of the row that is being created. This is useful if you need to create a row that has a reference to the id of the row that is being created.</p><h2 id="optional-fields" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">Optional Fields<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="optional-fields"></ng-doc-heading-anchor></h2><p class="ngde">You can also provide the following optional fields as your needs dictate:</p><h3 id="entityadapter" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">entityAdapter<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="entityadapter"></ng-doc-heading-anchor></h3><p class="ngde">This field will let you supply your own <a href="https://ngrx.io/api/entity/EntityAdapter" class="ngde">EntityAdapter</a> for the entity. This would be useful if your code uses a field other than <code class="ngde">id</code> as the primary key for the entity. Nothing in SmartNgRX makes use of the sortComparer function so you can ignore that.</p><h3 id="markanddelete" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">markAndDelete<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="markanddelete"></ng-doc-heading-anchor></h3><p class="ngde">This provides configuration information for the mark and delete feature that we will cover later.</p><h3 id="isinitialrow" href="using-smart-ng-rx/entity-definitions" headinglink="true" class="ngde">isInitialRow<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="isinitialrow"></ng-doc-heading-anchor></h3><p class="ngde">Set this field to true if this is a top level row. Top level rows are used as a mechanism to retrieve data from the server without having a parent row, typically used to retrieve the top level of entities your application needs.</p>`,i=class s extends a{constructor(){super();this.pageType="guide";this.pageContent=F;this.editSourceFileUrl="https://github.com/DaveMBush/SmartNgRX/edit/main/apps/documentation/src/app/using-smart-ng-rx/entity-definitions/index.md?message=docs(): describe your changes here...";this.viewSourceFileUrl="https://github.com/DaveMBush/SmartNgRX/blob/release/apps/documentation/src/app/using-smart-ng-rx/entity-definitions/index.md";this.page=e;this.demoAssets=f}static{this.\u0275fac=function(n){return new(n||s)}}static{this.\u0275cmp=r({type:s,selectors:[["ng-doc-page-mwsn1ds8"]],features:[l([{provide:a,useExisting:s},g,e.providers??[]]),c],decls:1,vars:0,template:function(n,A){n&1&&d(0,"ng-doc-page")},dependencies:[p],encapsulation:2,changeDetection:0})}},E=[o(t({},(0,u.isRoute)(e.route)?e.route:{}),{path:"",component:i,title:"Entity Definitions"})],L=E;export{i as PageComponent,L as default};
